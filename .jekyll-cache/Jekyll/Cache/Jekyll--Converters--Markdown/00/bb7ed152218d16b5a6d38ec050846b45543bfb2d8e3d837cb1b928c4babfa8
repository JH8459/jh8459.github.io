I"<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="보드-게임">보드 게임</h2>
<h3 id="문제">문제</h3>
<hr />
<p>N * N의 크기를 가진 보드판 위에서 게임을 하려고 합니다. 게임의 룰은 다음과 같습니다.</p>

<ol>
  <li>좌표 왼쪽 상단(0, 0)에 말을 놓는다.</li>
  <li>말은 상, 하, 좌, 우로 이동할 수 있고, 플레이어가 조작할 수 있다.</li>
  <li>조작의 기회는 딱 한 번 주어진다.</li>
  <li>조작할 때 U, D, L, R은 각각 상, 하, 좌, 우를 의미하며 한 줄에 띄어쓰기 없이 써야 한다.
    <ul>
      <li>예시: <code class="language-plaintext highlighter-rouge">UDDLLRRDRR</code>, <code class="language-plaintext highlighter-rouge">RRRRR</code></li>
    </ul>
  </li>
  <li>한 번 움직일 때마다 한 칸씩 움직이게 되며, 그 칸 안의 요소인 숫자를 획득할 수 있다.</li>
  <li>방문한 곳을 또 방문해도 숫자를 획득할 수 있다.</li>
  <li>보드 밖을 나간 말은 OUT 처리가 된다.</li>
  <li>칸 안의 숫자는 0 또는 1이다.
    <ul>
      <li>단, 좌표 왼쪽 상단(0, 0)은 항상 0이다.</li>
    </ul>
  </li>
  <li>획득한 숫자를 합산하여 숫자가 제일 큰 사람이 이기게 된다.</li>
</ol>

<p>보드판이 담긴 board와 조작하려고 하는 문자열 operation이 주어질 때, 말이 해당 칸을 지나가면서 획득한 숫자의 합을 구하는 함수를 작성하세요.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1-board">인자 1: board</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입의 2차원 배열</li>
  <li>2 &lt;= board.length &lt;= 1,000</li>
  <li>예: <code class="language-plaintext highlighter-rouge">[ [0, 0, 1], [1, 0, 1], [1, 1, 1] ]</code></li>
</ul>

<h4 id="인자-2-operation">인자 2: operation</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">string</code> 타입의 대문자 영어가 쓰여진 문자열</li>
  <li>1 &lt;= operation.length &lt;= board.length * 2</li>
  <li>U, L, D, R 이외의 문자열은 없습니다.</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입을 반환해야 합니다.
    <ul>
      <li>board와 operation이 입력값의 예시 (<code class="language-plaintext highlighter-rouge">[ [0, 0, 1], [1, 0, 1], [1, 1, 1] ]</code>, <code class="language-plaintext highlighter-rouge">DDR</code>)일 때, (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) 순서로 이동하게 되고, 각 0, 1, 1, 1을 얻어 <code class="language-plaintext highlighter-rouge">3</code>을 반환합니다.</li>
    </ul>
  </li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>만약, 말이 보드 밖으로 나갔다면 즉시 <code class="language-plaintext highlighter-rouge">OUT</code> 을 반환합니다.
    <h3 id="입출력-예시">입출력 예시</h3>
    <hr />
    <p>```javascript
const board1 = [
[0, 0, 0, 1],
[1, 1, 1, 0],
[1, 1, 0, 0],
[0, 0, 0, 0]
]
const output1 = boardGame(board1, ‘RRDLLD’);
console.log(output1); // 4</p>
  </li>
</ul>

<p>const board2 = [
  [0, 0, 1],
  [1, 1, 1],
  [1, 0, 0]
]
const output2 = boardGame(board2, ‘UUUDD’);
console.log(output2); // ‘OUT’</p>

<p>const board3 = [
  [0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0]
]
const output3 = boardGame(board3, ‘DDRRRUDUDUD’);
console.log(output3); // 0</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## Solution
### 수도코드
---

**가장 가치가 높은 동전인 500원 1개를 먼저 거슬러 주고 잔액을 확인한 뒤, 이후 100원 4개, 50원 1개, 10원 1개의 순서대로 거슬러 준다.** Greedy 알고리즘의 모토이다.

간단하게 입력받은 인자 `k`를 `500원`, `100원`, ... , `1원` 으로 각각 나눈 몫들의 합은 동전의 갯수의 합과 같다.

### 문제풀이 
---

```javascript
function partTimeJob(k) {
  let totalCoinNum = 0; // 동전의 갯수
  let idx = 0;  // 코인 배열을 탐색할 idx
  const coins = [500, 100, 50, 10, 5, 1];  // 거스름돈 배열 모음
  
  while(k &gt; 0) {  // 거슬러줄 잔돈이 없어질때까지 반복
    const coinNum = Math.floor(k/coins[idx]);  // 각 동전들의 갯수 (몫이 곧 갯수이므로, 나눈 값에 소숫점은 버림해준다)
    totalCoinNum += coinNum;  // 총 동전의 갯수에 현재 동전갯수를 더해준다
    
    k = k % coins[idx];  // 남은 잔액을 현재 동전으로 나눈 뒤 나머지값으로 대체한다
    idx++;  // 다음 동전으로 이동한다
  }

  return totalCoinNum;
}

</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">partTimeJob</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="p">[</span><span class="mi">500</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">k</span> <span class="o">/</span> <span class="nx">wallet</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      <span class="nx">result</span> <span class="o">+=</span> <span class="nx">sum</span><span class="p">;</span>
      <span class="nx">k</span> <span class="o">=</span> <span class="nx">k</span> <span class="o">-</span> <span class="p">(</span><span class="nx">wallet</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">sum</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="느낀-점">느낀 점</h2>

<p><strong>Reference Code</strong>와 비슷하게 접근하였다.</p>
:ET