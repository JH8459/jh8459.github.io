I"B<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-인터넷-프로토콜">1. 인터넷 프로토콜</h3>
<hr />

<h4 id="1-1-ip와-ip-packet">1-1. IP와 IP Packet</h4>
<hr />
<ul>
  <li>
    <p>IP 패킷에서 패킷은 pack과 bucket이 합쳐진 단어로 소포로 비유할 수 있다. IP 패킷은 우체국 송장처럼 전송 데이터를 무사히 전송하기 위해 출발지 IP, 목적지 IP와 같은 정보가 포함되어 있으며 데이터를 전달하는 통신의 단위이다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/138825068-009e4ba1-8fda-4b99-a212-807c3e789a45.png" alt="스크린샷, 2021-10-26 16-00-27" /></p>
  </li>
  <li><strong>클라이언트 패킷 전달</strong> 과정을 살펴보면 다음과 같다.
    <ul>
      <li>클라이언트가 IP 패킷을 인터넷 상의 노드에 던진다.</li>
      <li>인터넷 상의 노드(컴퓨터)들은 모두 IP 프로토콜을 따르기 때문에 해당 패킷의 정보(출발지, 목적지)를 이해할 수 있다.</li>
      <li>중간 노드들은 목적지 노드가 어디있는지 서로 물어가면서 해당 패킷을 전달한다. (라우팅 과정)</li>
    </ul>

    <p>위 과정을 통해 복잡한 인터넷 망 사이에서도 정확한 목적지로 패킷을 전송할 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/138825380-553cb65d-3184-4f0a-8516-665800250ad2.png" alt="패킷전달" /></p>
  </li>
  <li>
    <p><strong>서버 패킷 전달</strong> 과정또한 클라이언트와 마찬가지로 이뤄지며, 패킷 단위 데이터로 통신이 이뤄진다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/138826068-51706885-137a-42bc-ba0e-0ac272c41502.png" alt="패킷전달(서버)" /></p>
  </li>
</ul>

<hr />
<h5 id="ip-프로토콜-한계">IP 프로토콜 한계</h5>
<ul>
  <li>정확한 출발지와 목적지를 파악할 수 있다는 점에서 IP 프로토콜은 적절한 통신 방법으로 보이지만 단점도 명확하다.
    <ul>
      <li><strong>비연결성</strong> : 만약 패킷을 받을 대상이 없거나 서비스 불능 상태여도 클라이언트는 서버의 상태를 파악할 방법이 없기 때문에 패킷을 그대로 전송하게 된다.</li>
    </ul>

    <p><img src="https://user-images.githubusercontent.com/83164003/138827457-b05f840f-afb7-4ece-9a2d-59937362903b.png" alt="한계1" /></p>
    <ul>
      <li><strong>비신뢰성</strong> : 중간에 있는 서버가 데이터를 전달하던 중 장애가 생겨 패킷이 중간에 소실되더라도 클라이언트는 이를 파악할 방법이 없다.</li>
    </ul>

    <p><img src="https://user-images.githubusercontent.com/83164003/138827666-578adb60-0e06-44ca-857e-94629c312ae7.png" alt="한계2" /></p>
    <ul>
      <li>
        <p><strong>패킷 전달 순서 문제</strong> : 전송하려는 패킷의 용량이 매우 큰 경우 (대략 1500Byte 정도가 넘으면 해당 내용을 끊어서 보낸다), 이러한 경우 전송하려는 패킷들의 순서가 중요하다.</p>

        <p>그러나 IP프로토콜에서는 하나의 데이터에 연관된 패킷들이 각각 다른 경로로 전송될 수 있다. 따라서 도착하는 순서도 보장되지 않는다.</p>

        <p><img src="https://user-images.githubusercontent.com/83164003/138828051-be48dfef-3fc8-4718-8008-961959215dad.png" alt="한계3" /></p>
      </li>
    </ul>
  </li>
</ul>

<h4 id="1-2-tcp--udp">1-2. TCP / UDP</h4>
<ul>
  <li>
    <p>네트워크 프로토콜 계층은 다음과 같이 OSI 7계층과 TCP/IP 4 계층으로 나눌 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/138831221-93740d56-e01a-4a86-ad31-4e0ecf309f6c.PNG" alt="osi7" /></p>

    <p>IP 프로토콜 보다 더 높은 계층에 TCP 프로토콜이 존재하기 때문에 앞서 다룬 IP 프로토콜에서 발생했던 수많은 문제들(패킷의 순서가 꼬이고, 유실되는 등의 문제)을 TCP 프로토콜이 해결해준다.</p>
  </li>
</ul>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>[GIT] 브랜치 관리와 고급기능</li>
</ul>
:ET