I" ,<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="짐-나르기-greedy">짐 나르기 (Greedy)</h2>
<h3 id="문제">문제</h3>
<hr />
<p>편의점에서 아르바이트를 하고 있는 중에, 하필이면 피크 시간대에 손님에게 거스름돈으로 줄 동전이 부족하다는 것을 알게 되었습니다.<br />
현재 가지고 있는 동전은 <code class="language-plaintext highlighter-rouge">1원</code>, <code class="language-plaintext highlighter-rouge">5원</code>, <code class="language-plaintext highlighter-rouge">10원</code>, <code class="language-plaintext highlighter-rouge">50원</code>, <code class="language-plaintext highlighter-rouge">100원</code>, <code class="language-plaintext highlighter-rouge">500원</code>으로 오름차순으로 정렬되어 있고, 각 동전들은 서로 배수 관계에 있습니다.
동전 개수를 최소화하여 거스름돈 K를 만들어야 합니다. 이때, 필요한 동전 개수의 최솟값을 구하는 함수를 작성해 주세요.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1-k">인자 1: k</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입의 k</li>
  <li>1 &lt;= k &lt;= 100,000,000</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입의 거스름돈 K원을 만드는데 필요한 동전 개수의 최솟값을 반환해야 합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 4000원을 받았을 때 500원짜리 동전 8개를 반환합니다.</span>
<span class="kd">const</span> <span class="nx">output1</span> <span class="o">=</span> <span class="nx">test1</span><span class="p">(</span><span class="mi">4000</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output1</span><span class="p">);</span> <span class="c1">// --&gt; 8</span>

<span class="c1">// 4972원을 받았을 때 500원짜리 동전 9개, 100원짜리 동전 4개, 50원짜리 동전 1개, 10원짜리 동전 2개, 1원짜리 동전 2개, 총 18개를 반환합니다.</span>
<span class="kd">const</span> <span class="nx">output2</span> <span class="o">=</span> <span class="nx">test1</span><span class="p">(</span><span class="mi">4972</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output2</span><span class="p">);</span> <span class="c1">// --&gt; 18</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<p><strong>가장 가치가 높은 동전인 500원 1개를 먼저 거슬러 주고 잔액을 확인한 뒤, 이후 100원 4개, 50원 1개, 10원 1개의 순서대로 거슬러 준다.</strong> Greedy 알고리즘의 모토이다.</p>

<p>간단하게 입력받은 인자 <code class="language-plaintext highlighter-rouge">k</code>를 <code class="language-plaintext highlighter-rouge">500원</code>, <code class="language-plaintext highlighter-rouge">100원</code>, … , <code class="language-plaintext highlighter-rouge">1원</code> 으로 각각 나눈 몫들의 합은 동전의 갯수의 합과 같다.</p>

<h3 id="문제풀이">문제풀이</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">movingStuff</span><span class="p">(</span><span class="nx">stuff</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sortedStuff</span> <span class="o">=</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">);</span> <span class="c1">// 물건의 무게를 내림차순으로 정렬</span>

  <span class="kd">let</span> <span class="nx">maxIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 가장 무거운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">minIdx</span> <span class="o">=</span> <span class="nx">sortedStuff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span>  <span class="c1">// 가장 가벼운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 박스의 갯수</span>
  
  <span class="k">while</span><span class="p">(</span><span class="nx">maxIdx</span> <span class="o">&lt;=</span> <span class="nx">minIdx</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 반복문 탈출 조건</span>
    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">maxIdx</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">minIdx</span><span class="p">])</span> <span class="o">&gt;</span> <span class="nx">limit</span> <span class="p">)</span> <span class="p">{</span>  
      <span class="c1">// 두 짐의 합이 limit 보다 클 경우에는 무거운 짐만 박스에 넣으므로 maxIdx만 증가한다</span>
      <span class="nx">maxIdx</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">maxIdx</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">minIdx</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="nx">limit</span> <span class="p">){</span>
      <span class="c1">// 두 짐의 합이 limit 보다 작을 경우에는 두짐 모두 박스에 넣으므로 두 idx값 모두 조정한다</span>
      <span class="nx">maxIdx</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">minIdx</span><span class="o">--</span><span class="p">;</span>
      <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">movingStuff</span><span class="p">(</span><span class="nx">stuff</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">twoStuff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="c1">// 짐을 무게순으로 오름차순 정렬</span>
  <span class="kd">let</span> <span class="nx">sortedStuff</span> <span class="o">=</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">);</span>
  <span class="c1">// 가장 가벼운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">leftIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="c1">// 가장 무거운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">rightIdx</span> <span class="o">=</span> <span class="nx">sortedStuff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="nx">leftIdx</span> <span class="o">&lt;</span> <span class="nx">rightIdx</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 가장 가벼운 짐과 무거운 짐의 합이 limit 보다 작거나 같으면 2개를 한번에 나를 수 있다</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">leftIdx</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">rightIdx</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 다음 짐을 확인하기 위해 가장 가벼운 짐과 무거운 짐을 가리키는 인덱스를 옮겨주고</span>
      <span class="c1">// 한번에 2개 옮길 수 있는 개수를 +1 해준다   </span>
          <span class="nx">leftIdx</span><span class="o">++</span><span class="p">;</span>
          <span class="nx">rightIdx</span><span class="o">--</span><span class="p">;</span>
          <span class="nx">twoStuff</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// 위 조건에 맞지 않는 경우는 한번에 한 개만 나를 수 있는 경우이기 때문에</span>
          <span class="c1">// 가장 무거운 짐의 인덱스만 옮겨준다</span>
              <span class="nx">rightIdx</span><span class="o">--</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// 전체 짐의 개수에서 한번에 2개를 나를 수 있는 경우를 빼 주면 총 필요한 박스의 개수를 구할 수 있다</span>
  <span class="k">return</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">twoStuff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="느낀-점">느낀 점</h2>

<p><strong>Reference Code</strong>와 비슷하게 접근하였다. 우선 박스를 하중(<code class="language-plaintext highlighter-rouge">limit</code>)을 모두 채워 쓰는걸 고려하는 알고리즘은 아니기때문에 효율적인 알고리즘은 아님이 확실하다…  다만 결과를 도출하기 가장 명쾌하게 접근이 가능한 알고리즘인 듯 하다.</p>
:ET