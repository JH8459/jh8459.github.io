I"<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-http네트워크">1. HTTP/네트워크</h3>
<h4 id="1-1-클라이언트-서버-아키텍처">1-1. 클라이언트-서버 아키텍처</h4>
<ul>
  <li>
    <p>클라이언트-서버 아키텍처는 리소스가 존재하는 곳과, 리소스를 사용하는 앱을 분리시킨 네트워크 모델이다. 리소스를 사용하는 앱이 바로 <strong>“클라이언트”</strong>, 리소스가 제공(serve)하는 곳은 <strong>“서버”</strong> 라고 부른다. 클라이언트와 서버로만 이루어진 모델을 2-Tier 아키텍처라고 부르기도 한다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/131768527-fd46d641-6172-48e5-a547-1625cc3a6537.png" alt="클라이언트-서버 아키텍처" /></p>

    <p>일반적으로 서버는 리소스를 전달해주는 역할만 담당한다. 리소스를 저장하는 공간을 별도로 마련해 두는데, 이 공간을 <strong>“데이터베이스”</strong> 라고 부르며, 이처럼 기존 2티어 아키텍처에 데이터베이스가 추가된 형태를 3티어 아키텍처라고 일컫는다.</p>
  </li>
</ul>

<hr />
<h4 id="1-1-http-프로토콜이란">1-1. HTTP 프로토콜이란?</h4>
<ul>
  <li>
    <p>HTTP(Hypertext Transfer Protocol)는 웹을 개발하는 사람이라면 누구나 다 알아야 하는 통신 프로토콜이다. <strong>프로토콜</strong>이란 상호 간에 정의한 규칙을 의미하며 특정 기기 간에 데이터를 주고받기 위해 정의되어 있다.</p>

    <p>웹에서는 브라우저와 서버 간에 데이터를 주고받기 위한 방식으로 HTTP 프로토콜을 사용하고 있다.</p>
  </li>
  <li>
    <p>HTTP 프로토콜의 특징은 상태가 없는(stateless) 프로토콜이다. 여기서 “상태가 없다”라는 말은 데이터를 주고 받기 위한 각각의 데이터 요청이 서로 독립적으로 관리가 된다는 말이다. 즉, 이전 데이터 요청과 다음 데이터 요청이 서로 관련이 없이 독립적이다.</p>

    <p>이러한 특징 덕택에 서버는 세션과 같은 별도의 추가 정보를 관리하지 않아도 되고, 다수의 요청 처리 및 서버의 부하를 줄일 수 있는 성능 상의 이점이 생긴다.</p>
  </li>
</ul>

<h4 id="1-2-http-request--http-response">1-2. HTTP Request &amp; HTTP Response</h4>
<ul>
  <li>
    <p>HTTP로 데이터를 주고받기 위해서는 아래와 같이 요청(Request)을 보내고 응답(Response)을 받아야 합니다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/131771279-0f128cc4-9b64-491a-8e92-ccab232618a7.png" alt="request-response" /></p>

    <p>이때 서버는 요청을 받은 클라이언트에게 리소스를 잘 활용할 수 있도록 인터페이스(interface)를 제공해줘야 한다. 이것을 <strong>API, 애플리케이션 프로그래밍 인터페이스(Application Programming Interface)</strong> 라고 한다.</p>
  </li>
  <li>
    <p>보통 인터넷에 있는 데이터를 요청할 때에는 HTTP라는 프로토콜을 사용하며, 주소(URL, URI)를 통해 접근할 수 있게 된다. URL(Uniform Resource Locator)은 서버에 자원을 요청하기 위해 입력하는 영문 주소이며, 아무래도 숫자로 되어 있는 IP 주소보다는 훨씬 기억하기 쉽고 접근하기 용이하다.</p>

    <p><code class="language-plaintext highlighter-rouge">http://www.google.com:80/search?q=JavaScript</code> 를 브라우저의 검색창에 입력하면, 구글에서 JavaScript를 검색한 결과가 나타난다. 이를 자세히 살펴 보면 다음과 같은 특징을 갖는다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/131773354-a25d92e9-1d99-4226-aab3-af8589ebc612.png" alt="스크린샷, 2021-09-02 11-46-06" /></p>
  </li>
</ul>

<h4 id="1-3-http-요청-메서드">1-3. HTTP 요청 메서드</h4>
<ul>
  <li>
    <p>앞에서 살펴본 URL을 이용하면 서버에 특정 데이터를 요청할 수 있다. 여기서 요청하는 데이터에 특정 동작을 수행하고 싶으면 HTTP 요청 메서드(Http Request Methods)를 이용한다. 일반적으로 HTTP 요청 메서드는 HTTP Verbs라고도 불리우며 아래와 같이 주요 메서드를 갖고 있다.</p>

    <ol>
      <li><strong>GET</strong> : 존재하는 자원에 대한 요청</li>
      <li><strong>POST</strong> : 새로운 자원을 생성</li>
      <li><strong>PUT(PATCH)</strong> : 존재하는 자원에 대한 변경</li>
      <li><strong>DELETE</strong> : 존재하는 자원에 대한 삭제</li>
    </ol>
  </li>
</ul>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li>작성중</li>
</ul>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>작성중</li>
  <li>
    <p>TOY 8. 알고리즘 풀이</p>

    <blockquote>
      <p>정수를 요소로 갖는 배열을 입력받아 3개의 요소를 곱해 나올 수 있는 최대값을 리턴해야 합니다.</p>

      <p><img src="https://user-images.githubusercontent.com/83164003/131699769-9d13e085-7064-42fc-baa4-9ddfeae3a423.png" alt="스크린샷, 2021-09-02 00-25-55" /></p>
    </blockquote>
  </li>
</ul>
:ET