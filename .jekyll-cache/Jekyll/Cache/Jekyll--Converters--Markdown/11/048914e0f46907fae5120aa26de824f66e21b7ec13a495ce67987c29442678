I"U7<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="algorithm" /></p>
<h2 id="toy-25-robotpath">TOY 25. robotPath</h2>
<h3 id="문제">문제</h3>
<hr />
<p>세로와 가로의 길이가 각각 M, N인 방의 지도가 2차원 배열로 주어졌을 때, <code class="language-plaintext highlighter-rouge">1</code>은 장애물을 의미하고 <code class="language-plaintext highlighter-rouge">0</code> 이동이 가능한 통로를 의미합니다. 로봇은 지도 위를 일분에 한 칸씩 상하좌우로 이동할 수 있습니다. 로봇의 위치와 목표 지점이 함께 주어질 경우, 로봇이 목표 지점까지 도달하는 데 걸리는 최소 시간을 리턴해야 합니다.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1--room">인자 1 : room</h4>
<ul>
  <li>배열을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">room.length</code>는 <code class="language-plaintext highlighter-rouge">M</code></li>
  <li><code class="language-plaintext highlighter-rouge">room[i]</code>는 <code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">room[i].length</code>는 N</li>
  <li><code class="language-plaintext highlighter-rouge">room[i][j]</code>는 세로로 i, 가로로 j인 지점의 정보를 의미</li>
  <li><code class="language-plaintext highlighter-rouge">room[i][j]</code>는 0 또는 1
 #### 인자 2 : src</li>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">src.length</code>는 2</li>
  <li><code class="language-plaintext highlighter-rouge">src[i]</code>는 0 이상의 정수</li>
  <li><code class="language-plaintext highlighter-rouge">src</code>의 요소는 차례대로 좌표평면 위의 y좌표, x좌표
 #### 인자 3 : dst</li>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">dst.length</code>는 2</li>
  <li><code class="language-plaintext highlighter-rouge">dst[i]</code>는 0 이상의 정수</li>
  <li><code class="language-plaintext highlighter-rouge">dst</code>의 요소는 차례대로 좌표평면 위의 y좌표, x좌표</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 리턴해야 합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>M, N은 20 이하의 자연수입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">src</code>, <code class="language-plaintext highlighter-rouge">dst</code>는 항상 로봇이 지나갈 수 있는 통로입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">src</code>에서 <code class="language-plaintext highlighter-rouge">dst</code>로 가는 경로가 항상 존재합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">room</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
<span class="p">];</span>
<span class="kd">let</span> <span class="nx">src</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">dst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">robotPath</span><span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">dst</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// --&gt; 8</span>
</code></pre></div></div>

<h3 id="advanced">Advanced</h3>
<hr />
<ul>
  <li>LPS를 계산하는 효율적인 알고리즘(<code class="language-plaintext highlighter-rouge">O(N)</code>)이 존재합니다. 쉽지 않기 때문에 바로 레퍼런스 코드를 보고 이해하는 데 집중하시기 바랍니다.</li>
  <li>정규식(regular expression)을 활용하면 아래처럼 간단하게 구현할 수 있습니다. 정규식에 대해서 학습하시기 바랍니다. <a href="https://regexr.com/" target="_blank">(참고사이트)</a></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">LPS</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^</span><span class="se">(\w</span><span class="sr">*</span><span class="se">)</span><span class="sr">.*</span><span class="se">\1</span><span class="sr">$/</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="toy-19-solution">TOY 19. Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />
<p>사실 문제가 이해가 잘 안가서 몇번 다시 쳐다보았다. 
손으로 써가며 이해한 바로는</p>

<p><img src="https://user-images.githubusercontent.com/83164003/133775557-73296f0c-37e8-43b6-ae64-0aba0d96ac2e.jpg" alt="손코딩" /></p>

<ol>
  <li>문자열을 절반(짝수 경우 5:5로 쪼갤수있고, 홀수인 경우엔 알아서… 비는 문자열 없이 나눠준다.)으로 나눠준다.</li>
  <li>쪼개진 <code class="language-plaintext highlighter-rouge">prefix</code>와 <code class="language-plaintext highlighter-rouge">sufix</code> 안의 내부 문자를 반복문을 통해 순회한다.</li>
  <li><code class="language-plaintext highlighter-rouge">prefix</code>는 0번 인덱스는 고정,<code class="language-plaintext highlighter-rouge">prefix[prefix.length]</code> 인덱스를 줄여가며 만들어진 새로운 문자열은 LPS 후보가 된다</li>
  <li><code class="language-plaintext highlighter-rouge">sufix</code>는 0번 인덱스부터 늘려가며 <code class="language-plaintext highlighter-rouge">sufix[sufix.length]</code>인덱스는 고정한 상태에서 만들어진 새로운 문자열은 LPS 후보가 된다.</li>
  <li>반복문을 순회하며 새로 만들어진 두 문자열이 같아지면 반복문을 종료하고 현재 중복된 문자열의 길이를 반환한다.
    <h3 id="문제풀이">문제풀이</h3>
    <hr />
    <p>```javascript 
const LPS = function (str) {
  // TODO: 여기에 코드를 작성합니다.
  let result = ‘’;</p>
  </li>
</ol>

<p>for (let i=0; i&lt;= str.length/2; i++) {
    let prefix = str.slice(0, i);
    let suffix = str.slice(str.length-i);</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (prefix===suffix) {
  result=prefix;
}   };
</code></pre></div></div>

<p>return result.length;
};</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### Reference Code
---
```javascript
// naive solution
// const LPS3 = function (str) {
//   if (str.length &lt; 2) return 0;

//   // 문자열을 두 부분으로 나누고
//   // 부분 문자열을 쉽게 구하기 위해
//   // 왼쪽 부분의 마지막 인덱스와 오른쪽 부분의 첫 인덱스를 저장

//   let halfSize = Math.floor(str.length / 2);
//   // 문자열의 길이가 홀수일 수 있으므로, 올림한다.
//   let rightStart = Math.ceil(str.length / 2);

//   // 가장 긴 LPS 후보부터 차례대로 검사한다
//   for (let offset = 0; offset &lt; halfSize; offset++) {
//     let matched = true;
//     for (let i = 0; i &lt; halfSize - offset; i++) {
//       if (str[i] !== str[rightStart + offset + i]) {
//         matched = false;
//         break;
//       }
//     }
//     if (matched) return halfSize - offset;
//   }

//   // LPS가 없는 경우
//   return 0;
// };

// naive solution2
// const LPS = function (str) {
//   if (str.length &lt; 2) return 0;

//   // 문자열을 두 부분으로 나누고
//   // 각 부분의 첫 인덱스를 저장
//   let leftIdx = 0;
//   // 문자열의 길이가 홀수일 수 있으므로, 올림한다.
//   let rightIdx = Math.ceil(str.length / 2);

//   while (rightIdx &lt; str.length) {
//     if (str[leftIdx] == str[rightIdx]) {
//       // LPS 검사를 시작한 위치부터 지금까지 계속 같은 경우
//       // 다음 문자도 같은지 확인하기 위해 인덱스를 이동한다.
//       leftIdx++;
//       rightIdx++;
//     } else {
//       // leftIdx가 0인 경우, 단순히 rightIdx를 1 증가 (suffix의 시작점을 뒤로 한 칸 이동)
//       // prefix, suffix가 계속 일치하다가 중간에서 일치하지 않는 경우에도,
//       // 현재 suffix의 시작점을 뒤로 한 칸 이동한다.
//       rightIdx = rightIdx - leftIdx + 1;
//       leftIdx = 0;
//     }
//   }

//   // LPS가 없는 경우
//   return leftIdx;
// };

// dynamic solution: O(N)
// non-overlapping 조건을 제거하고 lps를 구한다.
// lps는 주어진 문자열에서 아래 조건을 만족하는 가장 긴 접두어(prefix)의 길이를 의미한다.
//  - 해당 접두어는 주어진 문자열의 접미어(suffix)이기도 하다.
// 이때, 문자열 자기 자신은 그 자체로 prefix이자 suffix인데, 이는 고려 대상에서 제외한다.
const LPS = function (str) {
  // lps[i]는 0부터 i까지의 부분 문자열, 즉 str.slice(0, i + 1)에서 lps의 길이를 저장한다.
  const lps = Array(str.length);
  // lps[0]은 길이가 1인 문자열의 lps의 길이이므로 항상 0이다. (자기 자신 포함 금지)
  lps[0] = 0;
  let leftIdx = 0;
  let rightIdx = 1;
  // lps[i]를 1부터, 즉 문자열의 길이가 2일때부터 차례대로 구한다.
  while (rightIdx &lt; str.length) {
    if (str[leftIdx] === str[rightIdx] &amp;&amp; rightIdx &gt;= str.length / 2) {
      // 가장 단순한 경우를 생각해보면, 쉽게 이해할 수 있다.
      // 1) 길이가 2 경우
      // 2) 길이가 3 이상인데 전부 같은 문자인 경우
      // 0부터 leftIdx까지 매칭이 되었으므로 매칭된 길이는 leftIdx + 1이다.
      leftIdx++;
      lps[rightIdx] = leftIdx;
      rightIdx++;
    } else {
      // 중간에 매칭이 되지 않은 경우, leftIdx를 조정한다.
      // 현재 lps[0]부터 lps[rightIdx - 1]까지 계산이 완료된 상태이다.
      // 처음부터 다시 prefix, suffix 매칭을 하는 것이 원칙이지만
      // 앞서 계산한 결과인 lps 배열을 통해 처음으로 되돌아갈 필요는 없다.

      // 예. aaabaaaa
      // 현재 leftIdx는 2, rigthIdx는 3, lps는 [0, 1, 2]인 상태라고 가정해보자.
      // leftIdx가 1일 때까지, 즉 현재 leftIdx 직전(leftIdx - 1)까지는 매칭이 되었다.
      if (leftIdx !== 0) {
        leftIdx = lps[leftIdx - 1];
        // Also, note that we do
        // not increment i here
      } else {
        // rightIdx가 1인 경우, 즉 첫 iteration일 경우
        // lps[rightIdx]가 0인 것은 명백하다. (예. ab)
        // leftIdx가 0이라는 것은 처음부터 prefix, suffix 매칭을 하는 경우이다.
        //
        // lps가 존재하지 않는 경우이다.
        lps[rightIdx] = 0;
        rightIdx++;
      }
    }
  }
  const res = lps[lps.length - 1];
  return res &gt; str.length / 2 ? Math.floor(str.length / 2) : res;
};
</code></pre></div></div>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>TOY 19. LPS</li>
</ul>
:ET