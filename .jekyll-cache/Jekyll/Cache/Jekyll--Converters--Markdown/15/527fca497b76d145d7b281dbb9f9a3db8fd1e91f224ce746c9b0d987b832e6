I"!\<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="algorithm" /></p>
<h2 id="toy-25-robotpath">TOY 25. robotPath</h2>
<h3 id="문제">문제</h3>
<hr />
<p>세로와 가로의 길이가 각각 M, N인 방의 지도가 2차원 배열로 주어졌을 때, <code class="language-plaintext highlighter-rouge">1</code>은 장애물을 의미하고 <code class="language-plaintext highlighter-rouge">0</code> 이동이 가능한 통로를 의미합니다. 로봇은 지도 위를 일분에 한 칸씩 상하좌우로 이동할 수 있습니다. 로봇의 위치와 목표 지점이 함께 주어질 경우, 로봇이 목표 지점까지 도달하는 데 걸리는 최소 시간을 리턴해야 합니다.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1--room">인자 1 : room</h4>
<ul>
  <li>배열을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">room.length</code>는 <code class="language-plaintext highlighter-rouge">M</code></li>
  <li><code class="language-plaintext highlighter-rouge">room[i]</code>는 <code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">room[i].length</code>는 N</li>
  <li><code class="language-plaintext highlighter-rouge">room[i][j]</code>는 세로로 i, 가로로 j인 지점의 정보를 의미</li>
  <li><code class="language-plaintext highlighter-rouge">room[i][j]</code>는 0 또는 1</li>
</ul>

<h4 id="인자-2--src">인자 2 : src</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">src.length</code>는 2</li>
  <li><code class="language-plaintext highlighter-rouge">src[i]</code>는 0 이상의 정수</li>
  <li><code class="language-plaintext highlighter-rouge">src</code>의 요소는 차례대로 좌표평면 위의 y좌표, x좌표</li>
</ul>

<h4 id="인자-3--dst">인자 3 : dst</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">dst.length</code>는 2</li>
  <li><code class="language-plaintext highlighter-rouge">dst[i]</code>는 0 이상의 정수</li>
  <li><code class="language-plaintext highlighter-rouge">dst</code>의 요소는 차례대로 좌표평면 위의 y좌표, x좌표</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 리턴해야 합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>M, N은 20 이하의 자연수입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">src</code>, <code class="language-plaintext highlighter-rouge">dst</code>는 항상 로봇이 지나갈 수 있는 통로입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">src</code>에서 <code class="language-plaintext highlighter-rouge">dst</code>로 가는 경로가 항상 존재합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">room</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
<span class="p">];</span>
<span class="kd">let</span> <span class="nx">src</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">dst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">robotPath</span><span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">dst</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// --&gt; 8</span>
</code></pre></div></div>

<h2 id="toy-25-solution">TOY 25. Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />
<p>Toy 알고리즘 너무 어렵다… 우선 레퍼런스를 보기전 열심히 구글링을 해보니 내가 이해할 수 있는 수준의 코드로 풀이를 해놓은 <a href="https://foamless.tistory.com/797" target="_blank">블로그</a>를 발견하여서 이해하는 수준에서 마무리지었다.</p>

<p>우선 키포인트는 <strong>완전탐색</strong>이다.  현재의 좌표를 기준으로 4방향으로 움직인다. 다만, 최단거리를 구하는 효율성 문제이므로 BFS 방식(시작 지점부터 가까운 정점들 우선 탐색하는 방법)으로 풀었다고한다.</p>

<p>코드가 복잡해보이지만 전형적인 BFS 탐색 방식이다. 코드의 세부적인 내용은 주석으로 대체하였다.</p>

<h3 id="문제풀이">문제풀이</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">robotPath</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">dst</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">visit</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">room</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">().</span><span class="nx">map</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nb">Array</span><span class="p">(</span><span class="nx">room</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// 0으로 채워진 방문여부 지도 (room.length X room[0].length 사이즈) 2차원 배열 생성</span>
  <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[[...</span><span class="nx">src</span><span class="p">,</span> <span class="mi">1</span><span class="p">]];</span>  <span class="c1">// [y,x,cnt] 값, 큐가 비워지며 반복문을 시작하므로 1부터 시작한다.</span>
  <span class="kd">const</span> <span class="nx">direction</span> <span class="o">=</span> <span class="p">[</span>  <span class="c1">// 4방향 좌표이동치</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
    <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
  <span class="p">];</span>
  <span class="kd">const</span> <span class="nx">ny</span> <span class="o">=</span> <span class="nx">room</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// y값의 최대값(인덱스)은 room배열의 length-1, 유효값 검사에 쓰인다.</span>
  <span class="kd">const</span> <span class="nx">nx</span> <span class="o">=</span> <span class="nx">room</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// x값의 최대값(인덱스)은 room[0]배열의 length-1</span>

  <span class="nx">visit</span><span class="p">[</span><span class="nx">src</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">src</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// 시작점부터 방문 체크 진행 후 반복문에 진입한다.</span>

  <span class="k">while</span><span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 큐가 모두 비워질때까지 진행한다.</span>
    <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>  
    <span class="kd">let</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">cnt</span><span class="p">]</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>  <span class="c1">// 큐에서 뺀 result 값을 각각 y,x,cnt로 구조분해 할당 </span>
    
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">dy</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">direction</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>  <span class="c1">// robot이 이동할 다음 좌표 (현재 기준점에서 사방향을 모두 검사한다 [완전탐색])</span>
      <span class="kd">let</span> <span class="nx">dx</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">direction</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

      <span class="c1">// robot이 이동하기 전, 다음좌표가 이동이 가능한지 유효성 검사</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">dx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">dy</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">dx</span> <span class="o">&gt;</span> <span class="nx">nx</span> <span class="o">||</span> <span class="nx">dy</span> <span class="o">&gt;</span> <span class="nx">ny</span> <span class="p">)</span> <span class="k">continue</span><span class="p">;</span>  <span class="c1">// robot이 이동할 좌표가 room 배열을 벗어나는 경우</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">room</span><span class="p">[</span><span class="nx">dy</span><span class="p">][</span><span class="nx">dx</span><span class="p">]</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>  <span class="c1">// robot이 이동할 좌표가 장애물이 있는 경우</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">visit</span><span class="p">[</span><span class="nx">dy</span><span class="p">][</span><span class="nx">dx</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>  <span class="c1">// robot이 이동할 좌표가 이미 방문한적이 있는 경우</span>

      <span class="c1">// 다음 이동할 좌표가 dst(도착점) 좌표와 일치하다면 반복문 탈출</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">dy</span> <span class="o">===</span> <span class="nx">dst</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">dx</span> <span class="o">===</span> <span class="nx">dst</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">return</span> <span class="nx">result</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>  <span class="c1">// 이동할 좌표가 dst와 일치하다면 result 배열의 cnt값을 반환한다.</span>

      <span class="c1">// 유효성 검사를 통과했으며, 도착점도 아니라면 아래의 코드를 수행한다</span>
      <span class="nx">visit</span><span class="p">[</span><span class="nx">dy</span><span class="p">][</span><span class="nx">dx</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// 현재 좌표를 방문표시한다.</span>
      <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">dy</span><span class="p">,</span> <span class="nx">dx</span><span class="p">,</span> <span class="nx">cnt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>  <span class="c1">// queue에 이동할 다음 좌표값을 넣고 cnt값을 증가시킨다.</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<hr />
<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">robotPath</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">room</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">dst</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">aux</span> <span class="o">=</span> <span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">N</span><span class="p">,</span> <span class="nx">candi</span><span class="p">,</span> <span class="nx">step</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 현재 위치</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">row</span><span class="p">,</span> <span class="nx">col</span><span class="p">]</span> <span class="o">=</span> <span class="nx">candi</span><span class="p">;</span>

    <span class="c1">// 배열의 범위를 벗어난 경우</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">row</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">row</span> <span class="o">&gt;=</span> <span class="nx">M</span> <span class="o">||</span> <span class="nx">col</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">col</span> <span class="o">&gt;=</span> <span class="nx">N</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">room</span><span class="p">[</span><span class="nx">row</span><span class="p">][</span><span class="nx">col</span><span class="p">]</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">room</span><span class="p">[</span><span class="nx">row</span><span class="p">][</span><span class="nx">col</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">room</span><span class="p">[</span><span class="nx">row</span><span class="p">][</span><span class="nx">col</span><span class="p">]</span> <span class="o">=</span> <span class="nx">step</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 장애물(1)이거나 이미 최소 시간(1)으로 통과가 가능한 경우</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// dfs로 4가지 방향에 대해 탐색을 한다.</span>
    <span class="c1">// 완전탐색을 해야하므로 bfs나 dfs가 큰 차이가 없다.</span>
    <span class="c1">// bfs의 경우 목적지에 도착하는 경우 탐색을 중단해도 되므로,</span>
    <span class="c1">// 약간 더 효율적이다.</span>
    <span class="nx">aux</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">N</span><span class="p">,</span> <span class="p">[</span><span class="nx">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">col</span><span class="p">],</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 상</span>
    <span class="nx">aux</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">N</span><span class="p">,</span> <span class="p">[</span><span class="nx">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">col</span><span class="p">],</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 하</span>
    <span class="nx">aux</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">N</span><span class="p">,</span> <span class="p">[</span><span class="nx">row</span><span class="p">,</span> <span class="nx">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 좌</span>
    <span class="nx">aux</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">N</span><span class="p">,</span> <span class="p">[</span><span class="nx">row</span><span class="p">,</span> <span class="nx">col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="nx">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 우</span>
  <span class="p">};</span>

  <span class="c1">// 로봇이 서 있는 위치를 1로 초기화하면 (다시 방문하지 않기 위해서),</span>
  <span class="c1">// 바로 옆 통로는 2가 된다.</span>
  <span class="c1">// 계산이 완료된 후에 최종값에 1을 빼주면 된다.</span>
  <span class="nx">aux</span><span class="p">(</span><span class="nx">room</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">room</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">r</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="nx">dst</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">room</span><span class="p">[</span><span class="nx">r</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">visit</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">room</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">().</span><span class="nx">map</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nb">Array</span><span class="p">(</span><span class="nx">room</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</code></pre></div></div>
<p>2차원 배열로 지도(방문여부 플래그)를 그리는 코드이다. <code class="language-plaintext highlighter-rouge">map</code> 메서드를 이용해서 <code class="language-plaintext highlighter-rouge">room.length</code> * <code class="language-plaintext highlighter-rouge">room[0].length</code> 사이즈의 2차원 배열을 생성한다. 생소하지만 앞으로 유용할 듯 하다. 아직 BFS 탐색 알고리즘… 완전탐색 알고리즘이 익숙하지 않다. <del>(언제쯤 혼자 풀어볼까…)</del></p>

<p>꾸준히 알고리즘 풀어봐야 할 듯 하다.</p>
<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>TOY 26. LSCS</li>
</ul>
:ET