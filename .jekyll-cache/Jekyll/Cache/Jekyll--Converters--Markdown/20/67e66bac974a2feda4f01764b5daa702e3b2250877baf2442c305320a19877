I"^<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-part1---session">1. Part1 - Session</h3>
<hr />
<p>HTTPS 프로토콜 서버를 만들고, 클라이언트에서 쿠키에 담긴 세션 정보를 확인해야 한다.</p>

<h4 id="1-1-사전준비">1-1. 사전준비</h4>
<hr />
<h5 id="환경-변수-설정">환경 변수 설정</h5>
<hr />
<ul>
  <li>Sequelize 스프린트때 해보았기 때문에 별도로 mysql을 node.js에서 어떻게 사용하는지 구조를 뜯어보진 않았다. <code class="language-plaintext highlighter-rouge">.env</code> 파일을 내 로컬환경에 알맞게 설정해 주었다.</li>
  <li><code class="language-plaintext highlighter-rouge">config/config.js</code> 파일에 이미 데이터베이스 이름(<code class="language-plaintext highlighter-rouge">database: 'authentication'</code>)이 명시되어 있었다.  해당 이름의 DB를 생성해주었다.</li>
</ul>

<h5 id="데이터베이스-마이그레이션">데이터베이스 마이그레이션</h5>
<hr />
<ul>
  <li>
    <p>이 또한 Sequelize 스프린트때 해보았기 때문에 <code class="language-plaintext highlighter-rouge">models</code>와 <code class="language-plaintext highlighter-rouge">migrations</code> 폴더 내부의 파일들을 확인하지 않았다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npx</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">db</span><span class="p">:</span><span class="nx">migrate</span>
</code></pre></div>    </div>

    <p>위 sequelize 명령어로 이미 짜여진 DB 스키마를 내 mysql 환경으로 마이그레이션 해주었다.</p>
  </li>
</ul>

<h5 id="인증서-발급">인증서 발급</h5>
<hr />
<ul>
  <li><a href="https://github.com/FiloSottile/mkcert" target="_blank">mkcert</a>라는 프로그램을 이용해서 로컬 환경에서 인증서를 생성했다.</li>
</ul>

<h4 id="1-2-서버구현">1-2. 서버구현</h4>
<hr />

<h5 id="쿠키-옵션--https-옵션-설정">쿠키 옵션 &amp; HTTPS 옵션 설정</h5>
<hr />
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">server-session/index.js</code> 파일에서 쿠키 옵션 설정을 해주었다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// TODO: express-session 라이브러리를 이용해 쿠키 설정을 해줄 수 있습니다.</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span>
      <span class="nx">session</span><span class="p">({</span>
          <span class="na">secret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@codestates</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">resave</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
          <span class="na">saveUninitialized</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">cookie</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">domain</span><span class="p">:</span> <span class="dl">'</span><span class="s1">localhost</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// Domain : 쿠키의 Domain 옵션과 서버의 도메인이 일치해야한다.(스프린트는 로컬 환경)</span>
              <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>  <span class="c1">// Path : default값은 '/'이다.</span>
              <span class="na">maxAge</span><span class="p">:</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">10000</span><span class="p">,</span>  <span class="c1">// maxAge : 해당 초만큼 유지되는 쿠키 유효기간 옵션이다.</span>
              <span class="na">sameSite</span><span class="p">:</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">,</span>  <span class="c1">// sameSite : 항상 쿠키를 보내 줄 수 있다.(secure : true 옵션과 함께 써야한다.)</span>
              <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// httpOnly : 'true'이기 때문에, JS에서는 쿠키에 접근이 불가하다.</span>
              <span class="na">secure</span><span class="p">:</span> <span class="kc">true</span>
          <span class="p">},</span>
      <span class="p">})</span>
  <span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>마찬가지로 <code class="language-plaintext highlighter-rouge">server-session/index.js</code> 파일에서 HTTPS 옵션 설정을 해주었다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// TODO: CORS 설정이 필요합니다. 클라이언트가 어떤 origin인지에 따라 달리 설정할 수 있습니다.</span>
  <span class="c1">// 메서드는 GET, POST, OPTIONS를 허용합니다.</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">({</span>
      <span class="na">origin</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://localhost:3000</span><span class="dl">'</span><span class="p">,</span>  <span class="c1">// 출처(origin)는 클라이언트 주소를 준다.</span>
      <span class="na">method</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">OPTIONS</span><span class="dl">'</span><span class="p">],</span>  <span class="c1">// 메소드는 제시되어 있다.</span>
      <span class="na">credentials</span><span class="p">:</span> <span class="kc">true</span>  <span class="c1">// 인증서를 이용한 CORS 옵션.</span>
  <span class="p">}));</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="post-userslogin">POST /users/login</h5>
<hr />
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">controller/users/login.js</code>에서 로그인에 관련 기능을 완성하자.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 해당 모델의 인스턴스를 models/index.js에서 가져옵니다.</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">Users</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../../models</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">// DB</span>
	
  <span class="nl">post</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// userInfo는 유저정보가 데이터베이스에 존재하고, 완벽히 일치하는 경우에만 데이터가 존재합니다.</span>
      <span class="c1">// 만약 userInfo가 NULL 혹은 빈 객체라면 전달받은 유저정보가 데이터베이스에 존재하는지 확인해 보세요</span>
      <span class="kd">const</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span>
          <span class="na">where</span><span class="p">:</span> <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">userId</span><span class="p">,</span> <span class="na">password</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span> <span class="p">},</span>
      <span class="p">});</span>

      <span class="c1">// TODO: userInfo 결과 존재 여부에 따라 응답을 구현하세요.</span>
      <span class="c1">// 결과가 존재하는 경우 세션 객체에 userId가 저장되어야 합니다.</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">userInfo</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">not authorized</span><span class="dl">'</span><span class="p">});</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// HINT: req.session을 사용하세요.</span>
          <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// 세션 객체에 저장하는 방법</span>
              <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">userId</span> <span class="o">=</span> <span class="nx">userInfo</span><span class="p">.</span><span class="nx">userId</span><span class="p">;</span>
              <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ok</span><span class="dl">'</span><span class="p">});</span>
          <span class="p">});</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">req.session</code> 사용방법은 <a href="https://github.com/expressjs/session#reqsession" target="_blank">GitHub: express-session</a> 문서를 통해 확인하였다.</li>
    </ul>
  </li>
</ul>

<h5 id="post-userslogout">POST /users/logout</h5>
<hr />
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">controller/users/logout.js</code>에서 로그아웃에 관련된 기능을 완성하자.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">post</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

      <span class="c1">// TODO: 세션 아이디를 통해 고유한 세션 객체에 접근할 수 있습니다.</span>
      <span class="c1">// 앞서 로그인시 세션 객체에 저장했던 값이 존재할 경우, 이미 로그인한 상태로 판단할 수 있습니다.</span>
      <span class="c1">// 세션 객체에 담긴 값의 존재 여부에 따라 응답을 구현하세요.</span>

      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// 로그인 전에 로그아웃 요청</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">400</span><span class="p">);</span> <span class="c1">// 400번 에러코드</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// TODO: 로그아웃 요청은 세션을 삭제하는 과정을 포함해야 합니다.</span>
          <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>  <span class="c1">// 세션 객체 파괴</span>
              <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">;</span> 
          <span class="p">});</span>
          <span class="cm">/* 세션 삭제는 req.session = null 또한 가능한듯하다... 세션 객체를 null값으로 초기화 */</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="post-usersuserinfo">POST /users/userinfo</h5>
<hr />
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">controller/userinfo.js</code>에서 마이페이지 관련된 기능을 완성하자.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">Users</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../../models</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">// DB</span>
	
  <span class="nl">get</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// TODO: 세션 객체에 담긴 값의 존재 여부에 따라 응답을 구현하세요.</span>
      <span class="c1">// HINT: 세션 객체에 담긴 정보가 궁금하다면 req.session을 콘솔로 출력해보세요</span>

      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">not authorized</span><span class="dl">'</span><span class="p">});</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// TODO: 데이터베이스에서 로그인한 사용자의 정보를 조회한 후 응답합니다.</span>
          <span class="nx">Users</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span>  <span class="c1">// Users 테이블에서 조회 후</span>
              <span class="na">where</span><span class="p">:</span> <span class="p">{</span>
                  <span class="na">userId</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">userId</span>
              <span class="p">}</span>
          <span class="p">})</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>  <span class="c1">// 응답에 조회값을 넘겨준다.</span>
              <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="na">data</span><span class="p">:</span><span class="nx">data</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ok</span><span class="dl">'</span><span class="p">})</span>
          <span class="p">})</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="1-3-클라이언트-구현">1-3. 클라이언트 구현</h4>
<hr />
<h5 id="mypage">Mypage</h5>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">components/Mypage.js</code>에서 마이페이지 관련된 기능을 완성하자.</li>
  <li>서버의 API를 활용하기 위해서는 <a href="https://github.com/axios/axios" target="_blank">Axios</a> 라이브러리를 사용해야 한다.
    <ul>
      <li>Axios는 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리이다.</li>
      <li>자바스크립트에 내장되어 있는 fetch api와 유사한 기능이지만, url을 제공하는 등 차이점이 있다.</li>
    </ul>
  </li>
  <li>
    <p><strong>Mypage</strong>에서는 로그인 이후 userinfo가 보여지며, 로그아웃 버튼이 존재한다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">Mypage</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">handleLogout</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="c1">// TODO: 서버에 로그아웃 요청을 보낸다음 요청이 성공하면 props.logoutHandler를 호출하여 로그인 상태를 업데이트 해야 합니다.</span>
          <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://localhost:4000/users/logout</span><span class="dl">'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span>  <span class="p">{</span><span class="na">withCredentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span>  <span class="c1">// url은 서버의 endpoint, data는 null값을 그리고 cors옵션중 Credential값이 'true'이므로 withCredentials 옵션을 준다.</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
              <span class="nx">props</span><span class="p">.</span><span class="nx">logoutHandler</span><span class="p">();</span> <span class="c1">// post 요청 후 logoutHandler 함수 호출하여 isLogin 상태를 업데이트 한다.</span>
          <span class="p">});</span>
		
      <span class="cm">/* 생략 */</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="login">Login</h5>
<hr />
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">components/Login.js</code> 에서는 <code class="language-plaintext highlighter-rouge">loginRequestHandler()</code> 함수를 완성해주면 된다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">loginRequestHandler</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// TODO: 로그인 요청을 보내세요.</span>
		
      <span class="c1">// 로그인에 성공하면</span>
      <span class="c1">// - props로 전달받은 함수를 호출해, 로그인 상태를 변경하세요.</span>
      <span class="c1">// - GET /users/userinfo 를 통해 사용자 정보를 요청하세요</span>
		
      <span class="c1">//   // 사용자 정보를 받아온 후</span>
      <span class="c1">// - props로 전달받은 함수를 호출해, 사용자 정보를 변경하세요.</span>
		
      <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://localhost:4000/users/login</span><span class="dl">'</span><span class="p">,{</span><span class="na">userId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="na">password</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">password</span><span class="p">},</span> <span class="p">{</span><span class="na">withCredentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span>  <span class="c1">// 로그인 요청</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">loginHandler</span><span class="p">();</span>  <span class="c1">// 로그인 요청에 성공하면, 전달받은 함수를 호출해 로그인 상태를 변경</span>
          <span class="k">return</span> <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://localhost:4000/users/userinfo</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">withCredentials</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span>  <span class="c1">// GET /users/userinfo 를 통해 사용자 정보를 요청</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>  <span class="c1">// 사용자 정보를 받아온 후</span>
          <span class="kd">const</span> <span class="p">{</span><span class="nx">userId</span><span class="p">,</span> <span class="nx">email</span><span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span> <span class="c1">// 사용자 정보는 controller/userinfo.js에서 data: data 형식으로 보냈다.</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setUserInfo</span><span class="p">({</span>  <span class="c1">// props로 전달받은 함수를 호출</span>
              <span class="nx">userId</span><span class="p">,</span>
              <span class="nx">email</span>
          <span class="p">});</span>
      <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p>어렵다 어렵다 어렵다…</p>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>[인증/보안] 기초</li>
</ul>
:ET