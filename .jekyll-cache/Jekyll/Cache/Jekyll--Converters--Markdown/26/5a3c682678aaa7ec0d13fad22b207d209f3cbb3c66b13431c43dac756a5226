I"8<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="algorithm" /></p>
<h2 id="toy-22-rotatematrix">TOY 22. rotateMatrix</h2>
<h3 id="문제">문제</h3>
<hr />
<p>2차원 N x N 배열을 시계 방향으로 90도 회전시킨 배열을 리턴해야 합니다.</p>
<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1--matrix">인자 1 : matrix</h4>
<ul>
  <li>가로 길이(<code class="language-plaintext highlighter-rouge">matrix[i].length</code>)와 세로 길이(<code class="language-plaintext highlighter-rouge">matrix.length</code>)가 모두 N인 2차원 배열</li>
  <li><code class="language-plaintext highlighter-rouge">matrix[i][j]</code>는 <code class="language-plaintext highlighter-rouge">number</code> 타입</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li>2차원 배열을 리턴해야 합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">matrix</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">],</span>
<span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// --&gt; 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matrix</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span> <span class="c1">// --&gt; 15</span>

<span class="kd">const</span> <span class="nx">rotatedMatrix</span> <span class="o">=</span> <span class="nx">rotateMatrix</span><span class="p">(</span><span class="nx">matrix</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rotatedMatrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// --&gt; 13</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rotatedMatrix</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span> <span class="c1">// --&gt; 8</span>
</code></pre></div></div>

<h3 id="힌트">힌트</h3>
<hr />
<ul>
  <li>컴퓨터 과학에서 행렬은 ‘행’의 길이인 m과 ‘열’의 길이인 n의 곱으로 표현됩니다. m X n 행렬은 아래와 같이 2차원 배열로 구현할 수 있습니다. (행렬의 요소를 전부 <code class="language-plaintext highlighter-rouge">initVal</code>로 초기화)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">matrix</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">row</span> <span class="o">&lt;</span> <span class="nx">m</span><span class="p">;</span> <span class="nx">row</span><span class="o">++&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">matrix</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="nx">initVal</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이때 <code class="language-plaintext highlighter-rouge">matrix[i][j]</code>는 ‘행(세로축)을 기준으로 i만큼 아래에 있고 열(가로축)을 기준으로 j만큼 옆에 있다.’ 를 뜻합니다. 이 방식은 기하학에서 좌표 평면 위의 한 점을 나타낼 때 (x, y), 즉 가로축을 먼저 표기하고 세로축을 다음에 표기하는 방식과는 다릅니다. 그래프를 인접행렬로 구현할 때, 이 점을 주의하셔야 합니다.</p>

<h3 id="advanced">Advanced</h3>
<hr />

<ul>
  <li>세로와 가로의 길이가 각각 M, N인 2차원 M X N 배열을 시계방향으로 90도씩 K번 회전시킨 배열을 리턴해 보세요. 회전수가 두 번째 입력으로 주어집니다.</li>
</ul>

<h2 id="toy-22-solution">TOY 22. Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />
<p>90도로 돌려주는 문제이기때문에 배열의 행과 열을 주의해서 2중 for문으로 풀어준다.</p>
<h3 id="문제풀이">문제풀이</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* const matrix = [
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9, 10, 11, 12],
  [13, 14, 15, 16],
]; */</span>

<span class="kd">const</span> <span class="nx">rotateMatrix</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">matrix</span><span class="p">)</span>  <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>  <span class="c1">// 빈 배열 입력시 빈 배열 리턴</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">// 행 단위 임시배열</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">){</span>
      <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span> <span class="c1">// case 1 : [13, 9, 5, 1] -&gt; case 2 : [14, 10, 6, 2]...</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">temp</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 아래 코드는 수정하지 마세요.</span>
<span class="kd">function</span> <span class="nx">swap</span><span class="p">(</span><span class="nx">idx1</span><span class="p">,</span> <span class="nx">idx2</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 두 변수를 바꾸는 방법</span>

  <span class="c1">// 1) 임시 변수를 활용한 방법</span>
  <span class="c1">// let temp = arr[idx1];</span>
  <span class="c1">// arr[idx1] = arr[idx2];</span>
  <span class="c1">// arr[idx2] = temp;</span>

  <span class="c1">// 2) Destructuring assignment를 활용한 방법</span>
  <span class="c1">// arr이 reference type이라 가능</span>
  <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">idx1</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">idx2</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">idx2</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">idx1</span><span class="p">]];</span>

  <span class="c1">// 3) XOR 연산을 활용한 방법</span>
  <span class="c1">// arr이 reference type이라 가능</span>
  <span class="c1">// arr[idx1] ^= arr[idx2];</span>
  <span class="c1">// arr[idx2] ^= arr[idx1];</span>
  <span class="c1">// arr[idx1] ^= arr[idx2];</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getParentIdx</span><span class="p">(</span><span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// TODO: 여기에 코드를 작성합니다.</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">insert</span><span class="p">(</span><span class="nx">heap</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// TODO: 여기에 코드를 작성합니다.</span>
  <span class="nx">heap</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">curIdx</span> <span class="o">=</span> <span class="nx">heap</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">pIdx</span> <span class="o">=</span> <span class="nx">getParentIdx</span><span class="p">(</span><span class="nx">curIdx</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">pIdx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">heap</span><span class="p">[</span><span class="nx">curIdx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">heap</span><span class="p">[</span><span class="nx">pIdx</span><span class="p">])</span> <span class="p">{</span>
    <span class="nx">swap</span><span class="p">(</span><span class="nx">curIdx</span><span class="p">,</span> <span class="nx">pIdx</span><span class="p">,</span> <span class="nx">heap</span><span class="p">);</span>
    <span class="nx">curIdx</span> <span class="o">=</span> <span class="nx">pIdx</span><span class="p">;</span>
    <span class="nx">pIdx</span> <span class="o">=</span> <span class="nx">getParentIdx</span><span class="p">(</span><span class="nx">curIdx</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">heap</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 아래 코드는 수정하지 마세요.</span>
<span class="kd">const</span> <span class="nx">binaryHeap</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">heap</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">insert</span><span class="p">(</span><span class="nx">heap</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[]);</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<p>정렬..참 종류도 많다. 힙 정렬 같은 경우 이진탐색 트리의 특성을 잘 활용한 정렬이라 느껴졌다.</p>

<p>이진트리를 배열로 표현할 경우 인덱스를 구하는 방식의 규칙을 깨닫고나니 어려운 문제는 아니라 느껴졌다. <del>(물론 레퍼런스 코드를 보고 풀었지만..)</del></p>
<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>TOY 30. heapSort</li>
</ul>
:ET