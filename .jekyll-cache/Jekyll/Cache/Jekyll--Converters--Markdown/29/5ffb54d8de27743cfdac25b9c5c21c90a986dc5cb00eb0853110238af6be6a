I"1<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="짐-나르기-greedy">짐 나르기 (Greedy)</h2>
<h3 id="문제">문제</h3>
<hr />
<p>김코딩과 박해커는 사무실 이사를 위해 짐을 미리 싸 둔 뒤, 짐을 넣을 박스를 사왔다. 박스를 사오고 보니 각 이사짐의 무게는 들쭉날쭉한 반면, 박스는 너무 작아서 한번에 최대 2개의 짐 밖에 넣을 수 없었고 무게 제한도 있었다.</p>

<p>예를 들어, 짐의 무게가 <code class="language-plaintext highlighter-rouge">[70kg, 50kg, 80kg, 50kg]</code>이고 박스의 무게 제한이 100kg이라면 2번째 짐과 4번째 짐은 같이 넣을 수 있지만 1번째 짐과 3번째 짐의 무게의 합은 150kg이므로 박스의 무게 제한을 초과하여 같이 넣을 수 없다.</p>

<p>박스를 최대한 적게 사용하여 모든 짐을 옮기려고 합니다.</p>

<p>짐의 무게를 담은 배열 stuff와 박스의 무게 제한 limit가 매개변수로 주어질 때, 모든 짐을 옮기기 위해 필요한 박스 개수의 최소값을 return 하도록 movingStuff 함수를 작성하세요.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1-stuff">인자 1: stuff</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입의 40 이상 240 이하의 자연수를 담은 배열
    <ul>
      <li>ex) <code class="language-plaintext highlighter-rouge">[70, 50, 80, 50]</code></li>
    </ul>
  </li>
</ul>

<h4 id="인자-2-limited">인자 2: limited</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입의 40 이상 240 이하의 자연수</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입을 리턴해야 합니다.</li>
  <li>모든 짐을 옮기기 위해 필요한 박스 개수의 최솟값을 숫자로 반환합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>옮겨야 할 짐의 개수는 1개 이상 50,000개 이하입니다.</li>
  <li>박스의 무게 제한은 항상 짐의 무게 중 최대값보다 크게 주어지므로 짐을 나르지 못하는 경우는 없습니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">movingStuff</span><span class="p">([</span><span class="mi">70</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="mi">100</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 3</span>

<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">movingStuff</span><span class="p">([</span><span class="mi">60</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">130</span><span class="p">],</span> <span class="mi">140</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 4</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<p>박스에는 최대 2개의 물건을 넣을 수 있으며, 조건중 짐을 나르지 못하는 경우는 없으므로 박스에는 1~2개의 물건이 무조건 들어간다.</p>

<p>옮겨야 할 짐의 개수는 1~50,000의 범위를 갖고있으므로, 연산의 횟수를 줄이기 위해 인덱스로 접근한다.</p>

<p>Greedy 알고리즘으로 접근한다면, 미래는 생각하지 않고 지금 현재의 최적의 경우만 고려하면 되므로 간단하게 풀이 할 수 있다.</p>

<ol>
  <li>물건들을 무게가 큰 순서대로 내림차순으로 정렬한다.</li>
  <li>가장 무게가 큰 물건 + 가장 작은 물건의 합이 <code class="language-plaintext highlighter-rouge">limit</code>보다 작다면 박스에 물건을 2개를 넣고, 아니면 현재 가장 무거운 물건 1개만 박스에 넣는다. <del>너무 Greedy 에 충실하긴하다..</del></li>
  <li>박스의 갯수를 세어가며 모든 물건 인덱스를 탐색하면 반복문을 종료하여 결과값을 반환한다.</li>
</ol>

<h3 id="문제풀이">문제풀이</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">movingStuff</span><span class="p">(</span><span class="nx">stuff</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">sortedStuff</span> <span class="o">=</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">);</span> <span class="c1">// 물건의 무게를 내림차순으로 정렬</span>

  <span class="kd">let</span> <span class="nx">maxIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 가장 무거운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">minIdx</span> <span class="o">=</span> <span class="nx">sortedStuff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span>  <span class="c1">// 가장 가벼운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 박스의 갯수</span>
  
  <span class="k">while</span><span class="p">(</span><span class="nx">maxIdx</span> <span class="o">&lt;=</span> <span class="nx">minIdx</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 반복문 탈출 조건</span>
    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">maxIdx</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">minIdx</span><span class="p">])</span> <span class="o">&gt;</span> <span class="nx">limit</span> <span class="p">)</span> <span class="p">{</span>  
      <span class="c1">// 두 짐의 합이 limit 보다 클 경우에는 무거운 짐만 박스에 넣으므로 maxIdx만 증가한다</span>
      <span class="nx">maxIdx</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">maxIdx</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">minIdx</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="nx">limit</span> <span class="p">){</span>
      <span class="c1">// 두 짐의 합이 limit 보다 작을 경우에는 두짐 모두 박스에 넣으므로 두 idx값 모두 조정한다</span>
      <span class="nx">maxIdx</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">minIdx</span><span class="o">--</span><span class="p">;</span>
      <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">movingStuff</span><span class="p">(</span><span class="nx">stuff</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">twoStuff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="c1">// 짐을 무게순으로 오름차순 정렬</span>
  <span class="kd">let</span> <span class="nx">sortedStuff</span> <span class="o">=</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">);</span>
  <span class="c1">// 가장 가벼운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">leftIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="c1">// 가장 무거운 짐의 인덱스</span>
  <span class="kd">let</span> <span class="nx">rightIdx</span> <span class="o">=</span> <span class="nx">sortedStuff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span><span class="nx">leftIdx</span> <span class="o">&lt;</span> <span class="nx">rightIdx</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 가장 가벼운 짐과 무거운 짐의 합이 limit 보다 작거나 같으면 2개를 한번에 나를 수 있다</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">leftIdx</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sortedStuff</span><span class="p">[</span><span class="nx">rightIdx</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 다음 짐을 확인하기 위해 가장 가벼운 짐과 무거운 짐을 가리키는 인덱스를 옮겨주고</span>
      <span class="c1">// 한번에 2개 옮길 수 있는 개수를 +1 해준다   </span>
          <span class="nx">leftIdx</span><span class="o">++</span><span class="p">;</span>
          <span class="nx">rightIdx</span><span class="o">--</span><span class="p">;</span>
          <span class="nx">twoStuff</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// 위 조건에 맞지 않는 경우는 한번에 한 개만 나를 수 있는 경우이기 때문에</span>
          <span class="c1">// 가장 무거운 짐의 인덱스만 옮겨준다</span>
              <span class="nx">rightIdx</span><span class="o">--</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// 전체 짐의 개수에서 한번에 2개를 나를 수 있는 경우를 빼 주면 총 필요한 박스의 개수를 구할 수 있다</span>
  <span class="k">return</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">twoStuff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p><strong>Reference Code</strong>와 비슷하게 접근하였다. 우선 박스를 하중을 모두 채워 쓰는 알고리즘은 아니기때문에 효율적인 알고리즘은 아님이 확실하다…  다만 결과를 도출하기 가장 명쾌하게 접근이 가능한 알고리즘인 듯 하다.</p>
:ET