I"<p><img src="https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<p>프로젝트중 SMS 발송이 필요한 부분을 가비아의 문자 서비스를 이용하고 있다.</p>

<p>가비아 문자서비스 개발 가이드 공식문서에서는 Node 환경에서 단순 <code class="language-plaintext highlighter-rouge">https</code> 내장 모듈을 이용한 Request 요청을 보내어 사용하고 있다.</p>

<p>현재 프로젝트는 NodeJS에서 NestJS 프레임워크를 기반으로 하고있다.<br />
레퍼런스들이 많지 않아서 개발과정에서 겪었던 불편함들이 있었기에 나와 같은 상황을 겪는 이들에게 도움이 되고자 글을 남긴다.</p>

<p><br />
<br /></p>

<h3 id="1-사용자-인증">1. 사용자 인증</h3>
<hr />

<p><img src="https://user-images.githubusercontent.com/83164003/167132404-cbc69353-9e16-4eb1-b758-556f2cbd5dcc.png" alt="스크린샷 2022-05-06 오후 9 20 49" /></p>

<p><br />
<br /></p>

<h4 id="1-1-orm-vs-javascript">1-1. ORM vs JavaScript</h4>
<hr />

<ul>
  <li>
    <p><strong>TypeORM</strong></p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">boards</span> <span class="o">=</span> <span class="nx">Board</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span><span class="p">.</span>
      <span class="na">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUBLIC</span><span class="dl">'</span>
  <span class="p">});</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>JavaScript</strong></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">db</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">'</span><span class="s1">SELECT * FROM boards WHERE title = </span><span class="dl">'</span><span class="nx">Hello</span><span class="dl">'</span><span class="s1"> AND status = </span><span class="dl">'</span><span class="nx">PUBLIC</span><span class="dl">'</span><span class="s1">, (err, result) =&gt; 
      if(err) throw new Error(</span><span class="dl">'</span><span class="nb">Error</span><span class="dl">'</span><span class="s1">);
      boards = result.rows;
  });
</span></code></pre></div>    </div>
  </li>
</ul>

<p>ORM은 모델을 기반으로 DB 테이블 체계를 자동으로 생성하지만 순수 JS로만 사용하게 된다면 모두 수동으로 처리해주어야한다.</p>

<p>또한, 데이터베이스에서 개체를 쉽게 삽입, 업데이트 및 삭제(CRUD)를 할 수 있다는 장점이 있으며 테이블 간의 매핑(1:1, 1:N, N:N) 또한 손쉽게 처리할 수 있다.</p>

<p><br />
<br /></p>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p>사실 ORM은 Sequelize만 사용해봤는데 Sequelize는 TypeScript와는 호환성 이슈로 많은 불편함이 있다는 정도만 안다.</p>

<p>반면 NestJS의 프로그래밍 언어는 타입스크립트를 기본으로 채택하고 있기에 조금더 호환성에서 자유로울 것 같다는 생각이 우선 든다.</p>

<p>ORM은 사실 문법을 따로 학습을 계속 해야 할 듯하다. Sequelize를 쓸 때도 공식문서<del>(공식문서 진짜..너무 불친절)</del>를 항상 참조해서 문법을 완성시켰었다.</p>

<p>우선 Maria DB와 현재 진행중인 실습 프로젝트를 연결 후 다양한 문법을 실습해봐야 알 듯 하다.</p>

<p><br />
<br /></p>
:ET