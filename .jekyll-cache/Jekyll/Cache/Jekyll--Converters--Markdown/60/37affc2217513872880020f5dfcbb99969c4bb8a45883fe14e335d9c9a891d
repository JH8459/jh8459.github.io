I"n5<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="블랙잭은-지겨워">블랙잭은 지겨워</h2>
<h3 id="문제">문제</h3>
<hr />

<p>평범한 블랙잭 게임에서 수시로 패배하자 흥미가 떨어진 김코딩은 박타짜에게 게임룰을 변형하여 새로운 카드 놀이를 해 볼 것을 제안합니다.<br />
새로운 룰은 다음과 같습니다.</p>

<blockquote>
  <ol>
    <li>숫자로 이루어진 카드를 여러 장 받습니다.<br /></li>
    <li>3장씩 카드를 고르고, 3장에 적힌 숫자들의 합이 소수인지 확인합니다.<br /></li>
    <li>받아든 카드로 만들 수 있는 소수의 개수가 많은 사람이 이기게 됩니다.</li>
  </ol>
</blockquote>

<p>예로, [1, 2, 3, 4]라는 카드를 받았을 때 만들 수 있는 숫자는 6, 7, 8, 9이고, 소수는 7 하나이기 때문에 가지고 있는 소수의 개수는 1개입니다.<br />
[2, 3, 4, 8, 13]라는 카드를 받았을 때 만들 수 있는 숫자는 9, 13, 18, 14, 19, 23, 15, 20, 24, 25이고, 소수는 13, 19, 23 총 3개이기 때문에 가지고 있는 소수의 개수는 3개입니다.</p>

<p>게임을 진행하기 전에 소수에 대해 아무런 지식이 없는 박타짜는 게임을 며칠 미룬 뒤, 게임의 룰을 따르는 함수를 만들기로 했습니다.<br />
소수에 약한 박타짜를 도와 여러 장의 카드 중 세 장씩 조합해 소수가 되는 경우의 수를 리턴하는 함수를 완성해 주세요.</p>

<h3 id="입력">입력</h3>
<hr />

<h4 id="인자-1-cards">인자 1: cards</h4>
<ul>
  <li>cards: <code class="language-plaintext highlighter-rouge">Array</code> 3개 이상 50개 이하의 카드가 숫자로 들어 있는 배열</li>
</ul>

<h3 id="출력">출력</h3>
<hr />

<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입을 리턴해야 합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />

<ul>
  <li>cards 에는 중복된 숫자의 카드는 들어있지 않습니다.</li>
  <li>각 카드에 적힌 수는 1이상 1,000이하의 자연수입니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">boringBlackjack</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 1</span>

<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">boringBlackjack</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 3</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<ol>
  <li>소수 Check 함수 구현</li>
  <li>카드는 3장을 중복없이 뽑는 중첩 for문 작성</li>
  <li>뽑은 3장의 카드의 합이 소수인지 Check</li>
  <li>카드 3장의 합이 소수라면 count 해주는 변수를 만들고 리턴한다.</li>
</ol>

<p>어렵지 않게 3중 for문으로 풀 수있다. (반복 횟수가 고정적이므로 for문으로 풀이 가능)</p>

<p>카드는 중복된 카드가 없으므로 for문의 인덱스만 조심히 설계하자.</p>

<h3 id="문제풀이">문제풀이</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">boringBlackjack</span><span class="p">(</span><span class="nx">cards</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">const</span> <span class="nx">isPrime</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">num</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>  <span class="c1">// 2는 소수이다.</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">num</span><span class="p">));</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 제곱근까지 판별해도 된다</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">num</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>  <span class="c1">// 자기자신과 외의 숫자로 나뉘어진다면 소수가 아니다.</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> 
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 첫번째 카드</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 두번째 카드(카드는 1장씩이니, i+1이 시작 인덱스이다.)</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">k</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="nx">k</span><span class="o">&lt;</span><span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 세번쨰 카드</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isPrime</span><span class="p">(</span><span class="nx">cards</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">k</span><span class="p">]))</span> <span class="nx">result</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">boringBlackjack</span><span class="p">(</span><span class="nx">cards</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 1. cards 에서 카드 3장 뽑기</span>
    <span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="c1">// 카드 뽑는 방식은 첫 카드를 cards 의 0번 index 부터 고정해 놓고 1씩 뒤로 옮겨간다</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 두 번째 카드의 인덱스는 첫 카드 + 1에서 시작해야 하고</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 세 번째 카드의 인덱스는 두 번째 카드 + 1에서 시작해야 한다 </span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="nx">number</span> <span class="o">=</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
          <span class="c1">// 세 카드의 합이 소수이면 경우의 수 + 1</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">isPrime</span><span class="p">(</span><span class="nx">number</span><span class="p">))</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="c1">//2. 소수 판별</span>
    <span class="kd">function</span> <span class="nx">isPrime</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2부터 비교하기 시작해서 나누어 떨어지는 수가 있으면 소수가 아니다</span>
    <span class="c1">// for 문 조건을 number/2 로 해도 되는 이유는 i &gt; number/2 가 되면 몫이 절대 0이 될수 없기 때문에</span>
    <span class="c1">// number/2 까지만 비교해 보아도 소수 판별이 가능하다</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  
    <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="느낀-점">느낀 점</h2>

<p><strong>Reference Code</strong>와 크게 다르지 않다. 어렵지 않게 풀 수 있는 문제이다.</p>
:ET