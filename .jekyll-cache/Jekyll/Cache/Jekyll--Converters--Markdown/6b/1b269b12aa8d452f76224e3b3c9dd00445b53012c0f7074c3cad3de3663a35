I"R/<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="TOY" /></p>
<h2 id="toy-21-inequalitynumber">TOY 21. inequalityNumber</h2>
<h3 id="문제">문제</h3>
<hr />
<p>아래와 같은 과정을 거쳐 부등호 수(inequalityNumber)를 만들 수 있습니다.</p>
<ul>
  <li>최대 9개의 부등호(<code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>)가 주어집니다.</li>
  <li>부등호의 좌우에는 0부터 9사이의 숫자가 한 번씩만 들어가야 합니다.</li>
  <li>부등호를 만족하는 숫자의 조합을 차례대로 이어 붙여 만든 정수를 부등호 수라고 한다.
부등호 기호들을 입력받아 부등호를 만족하는 최대 부등호 수와 최소 부등호 수의 차이를 리턴해야 합니다.</li>
</ul>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1-signs">인자 1: signs</h4>
<ul>
  <li>배열을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">string</code> 타입의 공백을 사이에 둔 부등호 기호들</li>
  <li><code class="language-plaintext highlighter-rouge">signs.length</code>는 17 이하 (최대 9개의 부등호 기호)</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 리턴해야 합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>첫 자리가 0인 경우도 부등호 수에 포함되어야 합니다.</li>
  <li>모든 입력에 답은 항상 존재합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">llet</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">inequalityNumber</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// --&gt; 88 (89 - 01)</span>

<span class="nx">output</span> <span class="o">=</span> <span class="nx">inequalityNumber</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt; &gt;</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// --&gt; 876 (897 - 021)</span>

<span class="nx">output</span> <span class="o">=</span> <span class="nx">inequalityNumber</span><span class="p">(</span><span class="dl">'</span><span class="s1">&gt; &lt; &gt;</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// --&gt; 8,754 (9,786 - 1,032)</span>
</code></pre></div></div>

<h2 id="toy-21-solution">TOY 21. Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<h3 id="문제풀이">문제풀이</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">inequalityNumber</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">signs</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">aux</span> <span class="o">=</span> <span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">signs</span><span class="p">,</span> <span class="nx">nums</span><span class="p">,</span> <span class="nx">digits</span><span class="p">,</span> <span class="nx">isVisited</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">===</span> <span class="nx">signs</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 부등호 수를 만든 경우</span>
      <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">nums</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">sign</span> <span class="o">=</span> <span class="nx">signs</span><span class="p">[</span><span class="nx">idx</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">digits</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 숫자를 차례대로 검토한다.</span>
      <span class="c1">// max를 구할 때는 9부터, min을 구할 때는 0부터</span>
      <span class="kd">const</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">digits</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="c1">// 이전 단계에서 사용한 숫자인 경우 스킵</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">isVisited</span><span class="p">[</span><span class="nx">right</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>

      <span class="c1">// 첫번째 숫자가 아닌 경우에는 조건이 중요하다.</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 항상 바로 직전의 숫자와 비교하면 된다.</span>
        <span class="kd">const</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">nums</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">sign</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">&lt;</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">left</span> <span class="o">&gt;=</span> <span class="nx">right</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">sign</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">&gt;</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">left</span> <span class="o">&lt;=</span> <span class="nx">right</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// 조건을 만족하거나 첫번째 숫자인 경우</span>
      <span class="nx">isVisited</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">aux</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">signs</span><span class="p">,</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">right</span><span class="p">),</span> <span class="nx">digits</span><span class="p">,</span> <span class="nx">isVisited</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 부등호 수를 이미 찾은 경우 탐색을 더 할 필요가 없다.</span>
        <span class="k">return</span> <span class="nx">target</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="c1">// 탐색에 실패한 경우, 시도한 숫자의 상태(사용중)를 원래대로(사용안함) 바꿔놔야 한다.</span>
      <span class="nx">isVisited</span><span class="p">[</span><span class="nx">right</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">signs</span> <span class="o">=</span> <span class="nx">signs</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">digits</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">];</span>
  <span class="c1">// arr.reverse()는 in-place 함수(데이터 직접 변경)이므로 min과 max의 순서는 중요하다.</span>
  <span class="kd">const</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">aux</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">signs</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">digits</span><span class="p">,</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">false</span><span class="p">));</span>
  <span class="kd">const</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">aux</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">signs</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">digits</span><span class="p">.</span><span class="nx">reverse</span><span class="p">(),</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">false</span><span class="p">));</span>
  <span class="k">return</span> <span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p>DFS로 접근해야겠구나 감은 잡히지만, 구현은 어렵다. <strong>Reference Code</strong>를 참고하였다.</p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>TOY 22. rotateMatrix</li>
</ul>
:ET