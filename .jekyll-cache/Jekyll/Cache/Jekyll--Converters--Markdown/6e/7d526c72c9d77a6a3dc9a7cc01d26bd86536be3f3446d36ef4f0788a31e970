I"L	<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-react-데이터-흐름">1. React 데이터 흐름</h3>
<h4 id="1-1-상향식bottom-up-개발">1-1. 상향식(bottom-up) 개발</h4>
<ul>
  <li>
    <p>React의 개발 방식의 가장 큰 특징은 페이지 단위가 아닌, 컴포넌트 단위로 시작한다는 점이다.</p>

    <p>앱을 만들거나 웹페이지를 만들때 페이지를 만들기 이전에 컴포넌트를 만들고 조립을한다. 즉, 상향식(bottom-up)으로 앱을 만드는 것이다. 이러한 구조의 가장 큰 장점은 테스트가 쉽고 확장성이 좋다. 이때 중요한점은 하나의 컴포넌트는 한가지 일만 하는 단일 책임 원칙을 따르는 것이다. 그래야 이후 오류 발생시 오류 컴포넌트를 쉽게 찾고 수정할 수 있습니다.</p>

    <p>이러한 흐름을 이해하였다면, 웹페이지나 앱 디자인을 전달 받았을때 React 개발자는 이를 컴포넌트 계층 구조로 나누는 것이 가장 먼저 해야 할 일이다.</p>
  </li>
</ul>

<h4 id="1-2-하향식top-down-데이터-흐름">1-2. 하향식(top-down) 데이터 흐름</h4>
<ul>
  <li>
    <p><strong>단방향 데이터 흐름(one-way data flow)</strong> 이라는 키워드는 React를 대표하는 키워드이다.</p>

    <p>컴포넌트는 컴포넌트 바깥에서 <code class="language-plaintext highlighter-rouge">props</code>를 이용해 데이터를 마치 인자(<code class="language-plaintext highlighter-rouge">arguments</code>) 혹은 속성(<code class="language-plaintext highlighter-rouge">attributes</code>)처럼 전달받을 수 있다. 즉, 데이터를 전달하는 주체는 부모 컴포넌트가 되며, 이는 데이터 흐름이 하향식(top-down)임을 의미한다. 또한 컴포넌트는 <code class="language-plaintext highlighter-rouge">props</code>를 통해 전달받은 데이터가 어디서 왔는지 전혀 알지 못한다는 특징들이 단방향 데이터 흐름(one-way data flow)이다.</p>
  </li>
</ul>

<h3 id="2-effect-hook">2. Effect Hook</h3>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li></li>
</ul>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<p>-</p>
:ET