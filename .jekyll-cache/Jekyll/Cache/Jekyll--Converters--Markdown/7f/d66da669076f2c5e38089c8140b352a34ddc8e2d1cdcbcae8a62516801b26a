I"3<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>

<p>기존에 EC2, S3, RDS를 통해 배포한 웹 애플리케이션을 무료 도메인으로 배포하는 삽질 과정을 백엔드/프론트엔드 영역을 나누어 포스팅 해보려 한다.</p>

<h3 id="1-무료-도메인-https-aws-배포---백엔드">1. 무료 도메인 HTTPS AWS 배포 - 백엔드</h3>
<hr />
<h4 id="1-1-도메인-발급">1-1. 도메인 발급</h4>
<hr />
<ul>
  <li>
    <p>우선 무료 도메인 사이트인 <a href="https://www.freenom.com/en/index.html?lang=en" target="_blank">Freenom</a>에서 도메인 발급 후, 해당 도메인을 이용하였다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143876151-e7fed5c2-1b13-4d57-b97f-47440d364cde.png" alt="스크린샷, 2021-11-29 22-26-24" /></p>

    <p>무료 도메인은 예고없이 사라지거나 로그인이 안되는(?)등 종잡을 수 없는 문제가 발생 할 수 있으므로.. 프로젝트나 포트폴리오 용도로는 부적합하다 생각된다.<br /></p>

    <p>학습목적 정도로만 사용하도록 하는게 알맞은 사용방향이라 생각한다.</p>
  </li>
  <li>
    <p><a href="http://cmarket.cf/" target="_blank">cmarket.cf</a> 주소로 도메인을 발급 받았으며 최초 발급 후 도메인에 접속하면 아래와 같은 에러코드를 받을 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143876050-43d949bd-e541-4507-acee-b59782c602f5.png" alt="스크린샷, 2021-11-29 22-23-51" /></p>

    <p>해당 에러코드를 구글링하여 검색해보니 일반적으로는 DNS 구성이 잘못되어있다는 에러코드인걸 알았다.</p>
  </li>
</ul>

<h4 id="1-2-elb-생성">1-2. ELB 생성</h4>
<hr />
<h5 id="elb란">ELB란?</h5>
<hr />
<ul>
  <li>우선 EC2를 통해 인스턴스에서 서버를 구현하는 내용은 이전 배포 실습시간에 해보았기 때문에 인스턴스가 왜 필요한지는 명확히 알았다. 그렇다면 ELB(로드 밸런서)는 왜 필요한지 짧게 찾아보았다.
    <blockquote>
      <p><strong>로드 밸런싱</strong>이란?</p>

      <p>하나의 인터넷 서비스가 발생하는 트래픽이 많을 때 여러 대의 서버가 분산처리하여 서버의 로드율 증가, 부하량, 속도저하 등을 고려하여 적절히 분산처리하여 해결해주는 서비스</p>
    </blockquote>
  </li>
</ul>

<hr />

<ul>
  <li>
    <p>ELB 서비스가 왜 필요한지 개념을 알았으니, AWS EC2 메뉴중 로드밸런서로 들어가 보자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143878331-14740d1a-92f8-4bdb-8c93-ce3d7e468979.png" alt="스크린샷, 2021-11-29 22-37-16" /></p>
  </li>
  <li>
    <p>로드밸런서를 생성하려보니 여러 프로토콜을 선택 할 수 있는 선택창이 나온다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143878869-f35272d9-83fe-4cee-addd-5ab157919d80.png" alt="스크린샷, 2021-11-29 22-45-13" /></p>

    <p>우리는 HTTPS 프로토콜을 이용할 예정이니 1번을 선택하였다.</p>
  </li>
  <li>Basic configuration/Load balancer name 을 정한 뒤, Listeners and routing 에서 Add Listener 버튼을 눌러서 HTTPS 리스너를 추가해주자. (포트는 default 값을 주었다.)
    <ul>
      <li><em>짧게 말해 리스너란, 구성한 프로토콜 및 포트를 사용해서 연결 요청을 확인하는 프로세스이다.</em></li>
    </ul>

    <p><img src="https://user-images.githubusercontent.com/83164003/143881038-4fa1e168-456d-46af-8601-52c50083a0e7.png" alt="스크린샷, 2021-11-29 22-49-27" /></p>
  </li>
  <li>
    <p>리스너가 추가되면 각 리스너에 타겟 그룹을 설정해줘야 한다.</p>

    <p>기존에 있는 인스턴스를 연결해주는 듯 하다..<del>(확실치 않다)</del><br />
success code 만 201번으로 바꿔주고 HTTP/HTTPS 각 포트별로 만들어서 기존 인스턴스와 연결된 타겟 그룹을 만들어 주었다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143884672-a255c90f-c1f2-44a3-98ed-7dd7eff84911.png" alt="스크린샷, 2021-11-29 23-21-03" /></p>
  </li>
  <li>
    <p>여기까지 우선 무난히 진행되었으나 AWS에서 제공하는 인증서를 새로 발급을 받던지..<br />
기존 사용하던 인증서가 있다면 해당 인증서를 import 해주어야 로드밸런서가 생성이 완성이 된다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143885271-491b92a2-92ae-4959-960d-c5b826c89da1.png" alt="스크린샷, 2021-11-29 23-25-40" /></p>

    <p>기존에 만든 SSL cert 인증서를 사용해볼까 했지만… <del>(import 방법 찾아보는것도 귀찮고)</del>  AWS에서도 무료로 인증서 발급을 해주길래 새로 발급해서 사용하기로 하였다.</p>
  </li>
</ul>

<h4 id="1-3-acm을-통한-인증서-발급">1-3. ACM을 통한 인증서 발급</h4>
<hr />
<ul>
  <li>
    <p>AWS에서 발급 가능한 인증서를 만들기 위해 우선 AWS Certificate Manager 메뉴로 진입 후 퍼블릭 인증서 요청을 눌러준뒤, Freenom에서 발급받은 도메인 주소를 넣어준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143906315-9e9655d2-8b23-4ef0-8554-82f270b898e2.png" alt="스크린샷, 2021-11-30 01-31-11" /></p>
  </li>
  <li>
    <p>조금 기다린 뒤 인증서 ID를 눌러보면 CNAME 값이 생성된 것을 볼 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143906637-868b596f-7209-491e-becf-7347fe2e9ffd.png" alt="스크린샷, 2021-11-30 01-31-46" /></p>

    <p>그 뒤 Manage Freenom DNS 로 이동해 준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143907059-b113a150-4333-498f-8a9b-37971d0370a8.png" alt="스크린샷, 2021-11-30 01-36-53" /></p>

    <blockquote>
      <p>Route 53에서 발급받은 도메인이라면 Route 53 DNS 검증이 가능하지만, 무료 도메인을 발급 받은 상황이기때문에 Freenom DNS로 가서 설정을 변경해줘야 한다.</p>
    </blockquote>

    <p>AWS에서 확인한 CNAME 이름과 값을 넣어준 뒤 저장해 준뒤 <del>(찝찝하게 CNAME 이름은 대문자로 저장이 되지만 상관없다.)</del>, 검증이 끝날 때 까지 기다려주면 아래와 같은 사진을 확인 할 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143908476-0a484866-aafa-4382-8d04-2099ea5ef71f.png" alt="스크린샷, 2021-11-30 01-45-32" /></p>
  </li>
  <li>
    <p>생성 중이던 로드밸런서에 인증서를 넣고 생성을 완료한다.</p>
  </li>
</ul>

<h4 id="1-4-freenom--route-53-연결">1-4. Freenom ⬌ Route 53 연결</h4>
<hr />
<h5 id="route-53란">Route 53란?</h5>
<hr />
<ul>
  <li>우선 Route 53은 무엇이고 왜 필요한지 짧게 찾아보았다.
    <blockquote>
      <p>AWS에서 제공하는 DNS(Domain Name Service)이다.</p>
    </blockquote>

    <p>그 외에도 도메인과 관련된 여러가지 서비스를 제공한다. 간략히 DNS 개념만 언급하자면 IP로 도메인을 기억하기는 힘들기때문에 사람이 기억하기 이름 형태로 변환해주는 시스템이다.</p>
  </li>
</ul>

<hr />
<ul>
  <li>
    <p>이제 Freenom DNS 검증은 완료되었다, AWS에서 해당 도메인을 사용하기 위해서 Freenom Nameservers 설정을 변경해 주자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143911244-7cb509e0-6b6a-4406-a120-eed04b5f6317.png" alt="스크린샷, 2021-11-30 02-02-27" /></p>

    <p>위 사진 영역에 Route 53에서 호스팅 영역을 생성 후 NS 에 해당하는 라우팅 대상을 맵핑해서 넣어주면 된다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143912771-bbaacb32-af5e-439c-9bfe-b2bcc58eabc6.png" alt="스크린샷, 2021-11-30 02-13-28" /></p>
  </li>
  <li>
    <p>이제 Freenom에서 발급 받은 무료 도메인(cmarket.cf)은 AWS Certificate Manager을 받기 위한 DNS 검증도 끝났으며, Route 53 호스팅 영역에도 연결이 되었다.</p>
  </li>
</ul>

<h4 id="1-5-route-53--elb-연결">1-5. Route 53 ⬌ ELB 연결</h4>
<hr />
<ul>
  <li>
    <p>Route 53과 ELB는 모두 설정이 완료되었으므로 연결만 해주면 된다.<br />
Route 53 메뉴로 가서 레코드 한줄만 써주도록 하자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144002528-56641315-a1d3-466e-9678-45393a8df740.png" alt="스크린샷, 2021-11-30 16-10-52" /></p>

    <p>라우팅 대상은 별칭으로 둔 뒤, 로드밸런서 별칭의 지역은 서울로 들어가면 미리 만들어둔 로드밸런서가 확인이 된다. 해당 ELB를 선택 후 레코드를 생성해 주자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144002681-f6704bb9-6591-4720-9e02-7612315550cb.png" alt="스크린샷, 2021-11-30 16-11-54" /></p>
  </li>
</ul>

<h4 id="1-6-연결-확인">1-6. 연결 확인</h4>
<hr />
<ul>
  <li>
    <p>이제 cmarket.cf 도메인을 브라우저 검색창에 검색한다면, AWS의 Route 53의 DNS서비스를 통하여 ELB에 접근하게된다.</p>

    <p>ELB에서는 트래픽을 자동으로 분산 시켜서  EC2 인스턴스로 접근을 허용시킨다.</p>
  </li>
  <li>
    <p>cmarket.cf 도메인을 검색하면 <del>트래픽 과부화 상태가 아니라면</del> EC2에 서버가 켜져있다면 endpoint <code class="language-plaintext highlighter-rouge">/</code> 로 접근이 될것이다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div>    </div>

    <p>따라서 cmarket.cf 도메인 검색시 아래와 같은 결과가 확인된다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144004657-5cd1e88e-68d8-440d-8a2e-8644f1b0a085.png" alt="스크린샷, 2021-11-30 16-31-04" /></p>
  </li>
  <li>
    <p>직접 해보니.. 무료 도메인 말고 AWS에서 도메인을 직접 구매해서 사용한다면 DNS 검증이나 Freenom에서 Route 53으로 Nameservers 연결 등등.. 절차가 훨씬 간편할거라 예상된다 (생각보다 비용도 비싸진 않다. <del>.com 같은거만 아니라면…</del>).</p>

    <p>추후 있을 프로젝트때는 AWS 도메인을 활용해봐야겠다.</p>
  </li>
</ul>

<h3 id="2-무료-도메인-https-aws-배포---프론트엔드">2. 무료 도메인 HTTPS AWS 배포 - 프론트엔드</h3>
<hr />

<h4 id="2-1-cloudfront-배포-생성-s3--cloudfront-연결">2-1. CloudFront 배포 생성 (S3 ⬌ CloudFront 연결)</h4>
<hr />
<ul>
  <li>배포 및 HTTPS 적용을 하려면 S3를 CloudFront에 연결해 주어야 한다.</li>
  <li>
    <p>우선 CloudFront 생성하기로 진입 후 기존 S3 버킷을 선택해 준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144011543-b2e1a513-685a-47ef-92cc-289afb7ebc2c.png" alt="스크린샷, 2021-11-30 16-11-54" /></p>
  </li>
  <li>
    <p>기본 캐시동작 / 뷰어 프로토콜 정책은 Redirect HTTP to HTTPS 로 선택해 준다</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144011738-e166d20b-b5b2-4023-ac3e-c8855057750f.png" alt="스크린샷, 2021-11-30 16-55-32" /></p>
  </li>
  <li>
    <p>그 다음 인증서를 등록해주면 되는데…</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144011861-e3311f89-fe4f-4925-9b09-f11a399571b8.png" alt="스크린샷, 2021-11-30 16-58-37" /></p>

    <p><strong>인증서는 반드시 미국 동부(버지니아 북부) 리전(us-east-1)에 있어야 합니다.</strong><br />
  <strong>인증서는 반드시 미국 동부(버지니아 북부) 리전(us-east-1)에 있어야 합니다.</strong></p>

    <p><del>장난..??</del></p>

    <p>아무튼 덕분에.. 인증서 다시 발급받은 뒤, 해당 인증서로 로드밸런서 다시 만들고.. Route 53 다시 연결해주는 뻘짓을 다시 하게되었다.<br />
이 글을 보시는 분들은 꼭 이런 실수 하지 마시길..</p>
  </li>
</ul>
:ET