I"o<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-database--sql">1. DataBase &amp; SQL</h3>
<hr />
<h4 id="1-1-database">1-1. DataBase</h4>
<p>데이터베이스는 <strong>IN-MEMORY</strong>, <strong>FILE I/O</strong> 방식의 한계와 관리하는 데이터의 양이 방대해짐에따라 효율적이고 데이터의 무결성을 지키기 위해 고안된 데이터에 특화된 서버이다.</p>

<p><img src="https://user-images.githubusercontent.com/83164003/137091413-50510704-5399-4401-9f0b-cc2fa12d1138.png" alt="스크린샷, 2021-10-13 16-50-13" /></p>

<p>이 데이터베이스가 활용되는 구조는 이전의 “2-TIER 아키텍쳐”인 클라이언트/서버의 구조에서 더 나아가, 웹&amp;앱에서 취급하는 <strong>데이터</strong>를 따로 분리 하는 “3-TIER 아키텍쳐”라 불리우며 보안성, 대용량 서비스에서의 강점을 지닐수 있게 되었다.</p>

<h4 id="1-2-sql">1-2. SQL</h4>
<ul>
  <li>
    <p>하나의 언어인 <strong>Structured Query Language (SQL)</strong> 은 데이터베이스 언어로, 주로 관계형 데이터베이스에서 사용한다. 예를 들어 MySQL, Oracle, SQLite, PostgreSQL 등 다양한 데이터베이스에서 SQL 구문을 사용하여 데이터베이스에 <strong>쿼리(Query)</strong> 를 보내 원하는 데이터를 가져오거나 삽입할 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/137091753-71a39723-011f-45f3-93a7-45ad1e3ceb49.png" alt="sql" /></p>

    <p>SQL을 사용할 수 있는 데이터베이스와 달리, 데이터의 구조가 고정되어 있지 않은 데이터베이스를 NoSQL이라고 한다. 관계형 데이터베이스와는 달리, 테이블을 사용하지 않고 데이터를 다른 형태로 저장을 한다. NoSQL의 대표적인 예시는 MongoDB 와 같은 문서 지향 데이터베이스가 있다.</p>
  </li>
  <li>
    <p>SQL 문법은 <a href="https://www.w3schools.com/sql/default.asp" target="_blank">링크</a>를 통하여 학습하였다.</p>
  </li>
</ul>

<h4 id="1-3-acid">1-3. ACID</h4>
<p><strong>ACID(원자성, 일관성, 고립성, 지속성)</strong> 는 데이터베이스 <em>트랜잭션</em> 이 안전하게 수행된다는 것을 보장하기 위한 성질을 가리키는 약어이다.</p>

<p>여기서 트랜잭션이란? 데이터베이스의 상태를 변환시키는 논리적 기능을 수행하기 위해 행해지는 하나 이상의 쿼리를 모아 놓은 작업의 단위 이다.</p>

<ol>
  <li><strong>원자성(Atomicity)</strong> 은 트랜잭션과 관련된 작업들이 부분적으로 실행되다가 중단되지 않는 것을 보장하는 능력이다. 예를 들어, 자금 이체는 성공할 수도 실패할 수도 있지만 보내는 쪽에서 돈을 빼 오는 작업만 성공하고 받는 쪽에 돈을 넣는 작업을 실패해서는 안된다. 원자성은 이와 같이 중간 단계까지 실행되고 실패하는 일이 없도록 하는 것이다.</li>
  <li><strong>일관성(Consistency)</strong> 은 트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 유지하는 것을 의미한다. 무결성 제약이 모든 계좌는 잔고가 있어야 한다면 이를 위반하는 트랜잭션은 중단된다.</li>
  <li><strong>독립성(Isolation)</strong> 은 트랜잭션을 수행 시 다른 트랜잭션의 연산 작업이 끼어들지 못하도록 보장하는 것을 의미한다. 이것은 트랜잭션 밖에 있는 어떤 연산도 중간 단계의 데이터를 볼 수 없음을 의미한다. 은행 관리자는 이체 작업을 하는 도중에 쿼리를 실행하더라도 특정 계좌간 이체하는 양 쪽을 볼 수 없다. 공식적으로 고립성은 트랜잭션 실행내역은 연속적이어야 함을 의미한다. 성능관련 이유로 인해 이 특성은 가장 유연성 있는 제약 조건이다. 자세한 내용은 관련 문서를 참조해야 한다.</li>
  <li><strong>지속성(Durability)</strong> 은 성공적으로 수행된 트랜잭션은 영원히 반영되어야 함을 의미한다. 시스템 문제, DB 일관성 체크 등을 하더라도 유지되어야 함을 의미한다. 전형적으로 모든 트랜잭션은 로그로 남고 시스템 장애 발생 전 상태로 되돌릴 수 있다. 트랜잭션은 로그에 모든 것이 저장된 후에만 commit 상태로 간주될 수 있다.</li>
</ol>

<h3 id="2-schema-design">2. Schema design</h3>
<h4 id="2-1-스키마schema">2-1. 스키마(Schema)</h4>
<ul>
  <li>스키마는 데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 메타데이터의 집합이다.</li>
  <li>스키마는 데이터베이스를 구성하는 데이터 개체(Entity), 속성(Attribute), 관계(Relationship) 및 데이터 조작 시 데이터 값들이 갖는 제약 조건 등에 관해 전반적으로 정의한다.</li>
  <li>스키마는 사용자의 관점에 따라 외부 스키마, 개념 스키마, 내부 스키마로 나눠진다.</li>
</ul>

<h4 id="2-2-schema-design-인스타그램-예제">2-2. Schema design (인스타그램 예제)</h4>
<p><img src="https://user-images.githubusercontent.com/83164003/137158248-6e534292-0cc7-48d0-856d-57ced7a70396.png" alt="instagram" /></p>

<ol>
  <li>게시물(Post) 작성 기능 : 인스타그램에서는 여러 개의 사진(A)을 올릴 수 있다. 사진을 업로드할 때, 사진을 설명하는 간단한 글(C)이 올라간다.</li>
  <li>게시물에 댓글 달기 및 좋아요 기능 : 게시물이 업로드되면 다른 사용자는 이 게시물에 댓글(E)을 달 수 있고, 좋아요(B) 를 눌러 관심을 표할 수 있다.
    <h3 id="3-데이터베이스-설계">3. 데이터베이스 설계</h3>
    <h4 id="3-1-관계형-데이터베이스">3-1. 관계형 데이터베이스</h4>
    <ul>
      <li>구조화된 데이터는 하나의 테이블로 표현할 수 있다. 사전에 정의된 테이블을 relation 이라고도 부르기 때문에, 테이블을 사용하는 데이터베이스를 관계형 데이터베이스(Relational database)라고 한다.</li>
      <li>관계의 종류는 다음과 같다.
        <ul>
          <li>1:1 관계</li>
          <li>1:N 관계</li>
          <li>N:N 관계</li>
          <li>Self Referencing 관계</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li></li>
</ul>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>[데이터베이스 MVC]</li>
</ul>
:ET