I"j$<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="집밥이-그리워">집밥이 그리워</h2>
<h3 id="문제">문제</h3>
<hr />

<p>김코딩은 몇 년의 해외 출장 끝에 본가에 내려왔습니다. 오랜만에 보는 김코딩의 얼굴에 반가웠던 부모님은 상다리가 부러질 정도로 음식을 만들었습니다. 감동의 재회도 잠시, 의자에 앉아 식사를 하려던 김코딩은 무엇부터 먹어야 될지 깊은 생각에 빠졌습니다. 정성스럽게 차려 주신 만큼, 최대한 많은 방법으로 다양하게 먹고 싶었기 때문입니다.</p>

<p>밥은 한 가지이며 반찬은 다수일 때, 밥과 함께 먹을 수 있는 반찬의 모든 경우의 수를 배열에 담아 리턴하세요.</p>

<h3 id="입력">입력</h3>
<hr />

<h4 id="인자-1-sidedishes">인자 1: sideDishes</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">String</code> 타입의 영문으로 된 반찬이 나열되어 있는 배열</li>
</ul>

<h3 id="출력">출력</h3>
<hr />

<ul>
  <li><code class="language-plaintext highlighter-rouge">Array</code> 타입을 리턴해야 합니다.</li>
  <li>밥과 함께 먹을 수 있는 반찬의 모든 경우의 수가 담긴 배열</li>
</ul>

<h3 id="출력-1">출력</h3>
<hr />

<ul>
  <li>반찬은 영문으로 작성이 되어 있습니다.</li>
  <li>반찬은 중복되지 않습니다.</li>
  <li>반찬을 먹지 않는 것도 포함됩니다. (출력되는 2차원 배열은 빈 배열을 포함합니다.)</li>
  <li>반찬은 3개 이상 99개 이하입니다.</li>
  <li>출력되는 배열은 전부 사전식 순서(lexical order)로 정렬되어야 합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">missHouseMeal</span><span class="p">([</span><span class="dl">"</span><span class="s2">eggroll</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">kimchi</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">fishSoup</span><span class="dl">"</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span>
<span class="cm">/*
[ [], 
  [ 'eggroll' ], 
  [ 'eggroll', 'fishSoup' ], 
  [ 'eggroll', 'fishSoup', 'kimchi' ], 
  [ 'eggroll', 'kimchi' ], 
  [ 'fishSoup' ], 
  [ 'fishSoup', 'kimchi' ], 
  [ 'kimchi' ]
] 
*/</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<p><a href="https://jh8459.github.io/algorithm/21.09.07.algorithm2/" target="_blank">TOY 11. powerSet </a> 문제의 로직과 똑같다.</p>

<p>DFS 방식으로 재귀를 구현하는 방식이다.. 사실 다시 떠올라서 풀진 못하였고, 이전에 정리한 내용을 보며 다시 풀어보았다.</p>

<h3 id="문제풀이">문제풀이</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">missHouseMeal</span><span class="p">(</span><span class="nx">sideDishes</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">sideDishes</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="kd">const</span> <span class="nx">recursive</span> <span class="o">=</span> <span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">subset</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">===</span> <span class="nx">sideDishes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 마지막 문자까지 검토한 경우</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">subset</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// recursive case</span>
    <span class="c1">// idx번째 문자가 포함되지 않는 경우</span>
    <span class="nx">recursive</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">subset</span><span class="p">);</span>

    <span class="c1">// idx번째 문자가 포함되는 경우</span>
    <span class="nx">recursive</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">subset</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">sideDishes</span><span class="p">[</span><span class="nx">idx</span><span class="p">]));</span>
  <span class="p">};</span>

  <span class="nx">recursive</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">missHouseMeal</span><span class="p">(</span><span class="nx">sideDishes</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// 결과를 담을 배열을 선언합니다.</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="c1">// sideDishes를 사전식 순서로 정렬합니다.</span>
  <span class="nx">sideDishes</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>

  <span class="c1">// 모든 조합을 검사하는 재귀 함수를 작성합니다.</span>
  <span class="kd">const</span> <span class="nx">sidePowerSet</span> <span class="o">=</span> <span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">sideDish</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="c1">// 재귀 함수이기 때문에 탈출 조건을 만듭니다.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">===</span> <span class="nx">sideDishes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 만약, idx와 sideDishes의 길이가 같다면(마지막까지 검토한 경우) result에 sideDish를 삽입하고 push합니다.</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">sideDish</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// idx번째 요소가 포함되지 않는 경우</span>
    <span class="nx">sidePowerSet</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">sideDish</span><span class="p">);</span>

    <span class="c1">// idx번째 요소가 포함되는 경우</span>
    <span class="nx">sidePowerSet</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[...</span><span class="nx">sideDish</span><span class="p">,</span> <span class="nx">sideDishes</span><span class="p">[</span><span class="nx">idx</span><span class="p">]]);</span>
  <span class="p">};</span>

  <span class="c1">// 0 번째 인덱스와 빈 배열을 인자로 받는 재귀 함수를 실행합니다.</span>
  <span class="nx">sidePowerSet</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[]);</span>

  <span class="c1">// 결과를 사전식 순서로 정렬합니다.</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="느낀-점">느낀 점</h2>

<p><strong>Reference Code</strong>와 크게 다르지 않다.</p>

<p>역시 다시 풀어보아도 어려운 문제이다… 일단은 자주 보고 자주 풀어보는게 정답인듯하다. 문제를 보자마자 “어!? 풀어본 문제인데?” 생각은 들었다…<del>물론 스스로 구현은 아직 무리다..</del></p>
:ET