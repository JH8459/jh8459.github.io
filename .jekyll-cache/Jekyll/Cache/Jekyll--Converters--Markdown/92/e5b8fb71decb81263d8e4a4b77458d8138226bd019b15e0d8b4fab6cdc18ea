I"}<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="algorithm" /></p>
<h2 id="toy-15-primepassword">TOY 15. primePassword</h2>
<h3 id="문제">문제</h3>
<hr />
<p>정수를 요소로 갖는 배열을 입력받아 오름차순으로 정렬하여 리턴해야 합니다.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1--arr">인자 1 : arr</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">arr[i]</code>는 정수</li>
  <li><code class="language-plaintext highlighter-rouge">arr.length</code>는 100,000 이하
    <h3 id="출력">출력</h3>
    <hr />
  </li>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열을 리턴해야 합니다.</li>
  <li>배열의 요소는 오름차순으로 정렬되어야 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">arr[i]</code> &lt;= <code class="language-plaintext highlighter-rouge">arr[j]</code> (<code class="language-plaintext highlighter-rouge">i &lt; j</code>)</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li><strong>퀵 정렬</strong>을 구현해야 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">arr.sort</code> 사용은 금지됩니다.</li>
  <li>입력으로 주어진 배열은 중첩되지 않은 1차원 배열입니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">quickSort</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// --&gt; [1, 3, 21]</span>
</code></pre></div></div>

<h2 id="toy-15-solution">TOY 15. Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />
<p>문제해결까지 생각이 닿질않아 레퍼런스 코드를 참고하였다.</p>

<p>우선 필요한 과정을 열거하자면..</p>

<ol>
  <li>DFS 방식으로 광범위한 경우의 수 탐색 (모든 경우의 수를 탐색한다. 경우의 수는 10^4)</li>
  <li>중복 탐색을 방지하기 위한 방문여부 check 배열로 중복 탐색 방지 (10000개의 인덱스 default 설정)</li>
  <li>첫 시작은 <code class="language-plaintext highlighter-rouge">curPwd</code>로 시작 queue에 <code class="language-plaintext highlighter-rouge">[step(숫자 바뀐 횟수) 초기값은 0, curPwd]</code> 를 enqueue한다. &gt; <em>queue=[[0,curPwd]]</em></li>
  <li>queue에 담긴 값을 꺼내어 <code class="language-plaintext highlighter-rouge">step = queue[...][0]</code>, <code class="language-plaintext highlighter-rouge">num = queue[...][1]</code>을 할당해준다.</li>
  <li>4자리 수의 수를 각 자리수 각 자리수마다 숫자를 0~9까지 하나씩 바꿔가며(현재 자리수와 같은수 제외) 탐색  한다. (탐색에 용이하게 각 자리수를 배열로 나누고, 다시 모든 자리수를 문자열로 합치는 함수 선언하여 사용 ) <del><em>코드 간결화를 위해 사용한다</em></del></li>
  <li>만약 바뀐 Pwd가 <code class="language-plaintext highlighter-rouge">newPwd</code>와 같다면 현재의 <code class="language-plaintext highlighter-rouge">step+1</code> 을 리턴해주고 탐색은 종료된다</li>
  <li><code class="language-plaintext highlighter-rouge">newPwd</code>와 같지않으면서 1,000보다 크고 9999보다 작으며, 소수인 숫자중 방문된 적이 없는 <code class="language-plaintext highlighter-rouge">num</code>은 <code class="language-plaintext highlighter-rouge">step+1</code>과 함께 enqueue 한다.  &gt; <em>queue=[…queue, [step+1, num]]</em></li>
  <li><strong>4~8번</strong> 과정을 큐가 비워질때까지 반복한다</li>
</ol>

<h3 id="문제풀이">문제풀이</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 수도코드와 Reference Code 주석 참조</span>
</code></pre></div></div>
<h3 id="reference-code">Reference Code</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li>
    <p>전혀 감을 못잡았다.. Reference Code를 보고 해석하는 정도도 겨우 소화해낸듯 싶다.</p>

    <p>모든 경우의 수 탐색후 조건에 맞는 후보(1000 이상, 소수)들을 숫자를 바꾼 횟수 <code class="language-plaintext highlighter-rouge">step</code>과 조건에 부합하는 숫자 <code class="language-plaintext highlighter-rouge">num</code>을 큐 자료구조에 enqueue 하여 관리하며, 최종 <code class="language-plaintext highlighter-rouge">newPwd</code> 까지 몇회의 숫자바꿈으로 처리되는지 탐색하는 알고리즘이다.  현재보다 작은 패스워드들도 모두 check 하기 때문에 예외 경우도 모두 부합하는 결과를 얻을 수 있었다.</p>

    <p>알고리즘도 어려웠기에 인상깊었지만, 함수를 작은 기능별로 쪼개는 모듈화도 인상깊히 학습하였다.</p>
  </li>
</ul>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>TOY 16. quickSort</li>
</ul>
:ET