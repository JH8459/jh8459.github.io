I"w<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-amazon-web-service">1. Amazon Web Service</h3>
<hr />
<ul>
  <li>웹 서비스 배포를 위한 방법으로 가상화 기술(가상의 컴퓨터를 대여)을 사용하는 클라우드 컴퓨팅을 사용할 수 있다.</li>
  <li>클라우드 컴퓨팅 서비스 중 가장 유명한 것이 Amazon Web Service(AWS)이다.
    <h4 id="1-1-cloud-computing">1-1. Cloud Computing</h4>
    <hr />
  </li>
  <li>
    <p>클라우드 등장 이전의 방식은 흔히 말하는 전산실 등에 컴퓨터를 배치하고 인터넷을 연결하여 서비스를 제공했다.</p>

    <center><img src="https://user-images.githubusercontent.com/83164003/144698139-d85f1899-2867-4e66-9ddd-e045bd12bfde.jpeg" /></center>
    <p><br /></p>

    <p>하지만 이러한 경우 서버가 요청에 대한 수용 능력이 한계에 도달한다면 같은 공간에 서버를 추가하거나 서버의 성능을 업그레이드하는 방식을 채택해야한다.</p>
  </li>
  <li>이러한 방식의 문제는 몇가지 문제점을 가지고 있다.
    <ol>
      <li>
        <p><strong>주기적인 관리가 필요</strong> : 흔히 말하는 서버실에는 종종 고장이 나거나 인터넷과 연결이 되지 않는 얘기치 못한 문제가 생기기도 한다.<br />
  이런 상황이 발생한다면 규모가 작은 서버라도 이를 해결하기 위한 인력 및 비용이 불가피하게 투입되어야 문제 해결이 가능하다.</p>
      </li>
      <li>
        <p><strong>공간의 한계</strong> : 둘째로 발생하는 문제점은 물리적인 공간의 문제점이다. 서버실이라는 공간에 컴퓨터를 배치해 두고 발생하는 트래픽에따라 서버를 추가하는 방식으로 서버의 수용 능력을 향상해야하지만, 트래픽이 매우 많아지는 경우 물리적인 공간에 제약이 생길수가 있다.</p>
      </li>
    </ol>
  </li>
  <li>이러한 물리적인 문제점들을 극복하기 위하여 나온 개념이 서버의 자원과 공간, 및 네트워크 환경을 외부로 부터 제공을 빌려 받아 사용하는 <strong>클라우드 컴퓨팅</strong>이다.</li>
</ul>

<h4 id="1-2-클라우드의-등장">1-2. 클라우드의 등장</h4>
<hr />
<ul>
  <li>
    <p>앞서 말한 서버의 자원과 공간, 및 네트워크 환경을 빌려주는 곳을 데이터 센터라 일컫는다. (이러한 환경을 <strong>온프레미스</strong>라 부르며, 반대 개념인 <strong>오프프레미스</strong>는 위에서 말한 서버실같은 환경을 말한다.)</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144698437-cb81a76c-a0ae-4be8-bf98-f587e7316ecd.png" alt="스크린샷, 2021-12-04 14-24-55" /></p>
  </li>
  <li>클라우드 컴퓨팅은 앞서 설명한 데이터센터같은  온프레미스 환경과 비슷한 역할을 하지만, 물리적인 컴퓨터가 아닌 가상 컴퓨터를 대여한다는 점이 다르다.</li>
  <li>온프레미스 환경과 다르게 가상화(Virtualization) 기술을 가진 클라우딩 컴퓨터가 갖는 이점은 다음과 같다.
    <ol>
      <li>사용이 필요할 때마다 컴퓨팅 능력을 유연하게 조절할 수 있다.</li>
      <li>이용기간에 따라 고정적인 비용이 들어가는 온프레미스(정액제)와는 달리 사용한 만큼의 요금(정량제)만 지불이 가능하다.</li>
    </ol>
  </li>
</ul>

<h4 id="1-3-클라우드의-단점">1-3. 클라우드의 단점</h4>
<hr />
<ul>
  <li>앞서 말한 장점이 뚜렷한 클라우드 컴퓨팅이지만, 이러한 환경에도 단점은 존재한다.</li>
  <li>
    <p>클라우드 제공자(AWS,Google 등..)의 환경에 문제가 있을 경우 해당 서비스 사용자들이 모두 영향을 받는다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144698955-79fd690a-ac53-4241-a7f8-3c4f3d3d9298.jpg" alt="쿠키런 장애" /></p>

    <p>클라우드 서비스에 100% 의존하는 경우, 운영 환경 자체가 클라우드 제공자에게 종속되어 버리므로 클라우드 서비스에 문제가 생기면 내가 배포하고 관리하는 환경에도 영향이 미친다.</p>
  </li>
</ul>

<h4 id="1-4-클라우드의-목표">1-4. 클라우드의 목표</h4>
<hr />
<ul>
  <li>
    <p>이러한 클라우드의 목표는 모든 것을 서비스화하는 것을 목표로 한다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144699128-fba05602-dc78-4b98-aa28-482a49df20d1.png" alt="스크린샷, 2021-12-04 14-49-04" /></p>

    <p>대표적인 클라우드 서비스의 형태는 SaaS, IaaS, PaaS 세 가지이다.</p>

    <ol>
      <li><strong>SaaS</strong>(Software as a Service)
        <ul>
          <li>1</li>
          <li>ㅇ</li>
        </ul>
      </li>
      <li>ㅇ</li>
    </ol>
  </li>
</ul>

<p><br />
<br /></p>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li></li>
</ul>

<p><br />
<br /></p>

<hr />
<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>[배포] Docker</li>
</ul>
:ET