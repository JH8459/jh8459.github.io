I"6<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="빼빼로-데이">빼빼로 데이</h2>
<h3 id="문제">문제</h3>
<hr />
<p>오늘은 빼빼로 데이입니다. 한 회사의 팀장은 출근길에 아몬드 빼빼로 M개와 누드 빼빼로 N개를 구매하여 아침 일찍 출근길에 나섰습니다.</p>

<p>팀장은 자신보다 먼저 출근해 있는 직원들에게 구매한 빼빼로를 전부 나누어 주려고 합니다.
단, 서로 질투하는 경우를 만들지 않기 위해 모든 직원들에게 공평하게 빼빼로를 나누어 주려고 합니다.
직원들은 각각의 빼빼로를 똑같은 개수만큼 받아야 합니다. 빼빼로를 쪼개서 줄 수는 없습니다.</p>

<p>하지만 회사에 도착하기 전이라 몇 명의 직원들이 있는지 모르는 상황입니다.
팀장이 아몬드 빼빼로를 4개, 누드 빼빼로를 8개를 구매 했다면, 다음과 같이 세 가지 방법으로 나누어 줄 수 있습니다.</p>

<p>출근한 직원이 1명이라면 아몬드 빼빼로 4개와 누드 빼빼로 8개를 줄 수 있습니다.
출근한 직원이 2명이라면 아몬드 빼빼로 2개와 누드 빼빼로 4개를 각각 줄 수 있습니다.
출근한 직원이 3명이라면 빼빼로를 남기지 않고 공평하게 주는 방법은 없습니다.
출근한 직원이 4명이라면 아몬드 빼빼로 1개와 누드 빼빼로 2개를 각각 줄 수 있습니다.
팀장은 출근한 직원 수에 따라 어떻게 빼빼로를 나누어 줄지 고민하고 있습니다.
여러분이 직원 수에 따라 빼빼로를 나누어 주는 방법을 구하는 솔루션을 제공해 주세요.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1-cards">인자 1: cards</h4>
<ul>
  <li>cards: <code class="language-plaintext highlighter-rouge">Array</code> 3개 이상 50개 이하의 카드가 숫자로 들어 있는 배열</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입을 리턴해야 합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>cards 에는 중복된 숫자의 카드는 들어있지 않습니다.</li>
  <li>각 카드에 적힌 수는 1이상 1,000이하의 자연수입니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">boringBlackjack</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 1</span>

<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">boringBlackjack</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 3</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<ol>
  <li>소수 Check 함수 구현</li>
  <li>카드는 3장을 중복없이 뽑는 중첩 for문 작성</li>
  <li>뽑은 3장의 카드의 합이 소수인지 Check</li>
  <li>카드 3장의 합이 소수라면 count 해주는 변수를 만들고 리턴한다.</li>
</ol>

<p>어렵지 않게 3중 for문으로 풀 수있다. (반복 횟수가 고정적이므로 for문으로 풀이 가능)</p>

<p>카드는 중복된 카드가 없으므로 for문의 인덱스만 조심히 설계하자.</p>

<h3 id="문제풀이">문제풀이</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">boringBlackjack</span><span class="p">(</span><span class="nx">cards</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">const</span> <span class="nx">isPrime</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">num</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>  <span class="c1">// 2는 소수이다.</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">num</span><span class="p">));</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 제곱근까지 판별해도 된다</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">num</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>  <span class="c1">// 자기자신과 외의 숫자로 나뉘어진다면 소수가 아니다.</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> 
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 첫번째 카드</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 두번째 카드(카드는 1장씩이니, i+1이 시작 인덱스이다.)</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">k</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="nx">k</span><span class="o">&lt;</span><span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 세번쨰 카드</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isPrime</span><span class="p">(</span><span class="nx">cards</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">k</span><span class="p">]))</span> <span class="nx">result</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">boringBlackjack</span><span class="p">(</span><span class="nx">cards</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 1. cards 에서 카드 3장 뽑기</span>
    <span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">cards</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="c1">// 카드 뽑는 방식은 첫 카드를 cards 의 0번 index 부터 고정해 놓고 1씩 뒤로 옮겨간다</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 두 번째 카드의 인덱스는 첫 카드 + 1에서 시작해야 하고</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 세 번째 카드의 인덱스는 두 번째 카드 + 1에서 시작해야 한다 </span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="nx">number</span> <span class="o">=</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">cards</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
          <span class="c1">// 세 카드의 합이 소수이면 경우의 수 + 1</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">isPrime</span><span class="p">(</span><span class="nx">number</span><span class="p">))</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="c1">//2. 소수 판별</span>
    <span class="kd">function</span> <span class="nx">isPrime</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 2부터 비교하기 시작해서 나누어 떨어지는 수가 있으면 소수가 아니다</span>
    <span class="c1">// for 문 조건을 number/2 로 해도 되는 이유는 i &gt; number/2 가 되면 몫이 절대 0이 될수 없기 때문에</span>
    <span class="c1">// number/2 까지만 비교해 보아도 소수 판별이 가능하다</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">number</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  
    <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="느낀-점">느낀 점</h2>

<p><strong>Reference Code</strong>와 크게 다르지 않다. 어렵지 않게 풀 수 있는 문제이다.</p>
:ET