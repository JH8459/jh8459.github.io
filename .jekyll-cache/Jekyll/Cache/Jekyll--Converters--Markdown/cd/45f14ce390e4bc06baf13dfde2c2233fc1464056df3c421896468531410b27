I"1<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="Algorithm" /></p>
<h2 id="짐-나르기-greedy">짐 나르기 (Greedy)</h2>
<h3 id="문제">문제</h3>
<hr />
<p>김코딩과 박해커는 사무실 이사를 위해 짐을 미리 싸 둔 뒤, 짐을 넣을 박스를 사왔다. 박스를 사오고 보니 각 이사짐의 무게는 들쭉날쭉한 반면, 박스는 너무 작아서 한번에 최대 2개의 짐 밖에 넣을 수 없었고 무게 제한도 있었다.</p>

<p>예를 들어, 짐의 무게가 <code class="language-plaintext highlighter-rouge">[70kg, 50kg, 80kg, 50kg]</code>이고 박스의 무게 제한이 100kg이라면 2번째 짐과 4번째 짐은 같이 넣을 수 있지만 1번째 짐과 3번째 짐의 무게의 합은 150kg이므로 박스의 무게 제한을 초과하여 같이 넣을 수 없다.</p>

<p>박스를 최대한 적게 사용하여 모든 짐을 옮기려고 합니다.</p>

<p>짐의 무게를 담은 배열 stuff와 박스의 무게 제한 limit가 매개변수로 주어질 때, 모든 짐을 옮기기 위해 필요한 박스 개수의 최소값을 return 하도록 movingStuff 함수를 작성하세요.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1-stuff">인자 1: stuff</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입의 40 이상 240 이하의 자연수를 담은 배열
    <ul>
      <li>ex) <code class="language-plaintext highlighter-rouge">[70, 50, 80, 50]</code></li>
    </ul>
  </li>
</ul>

<h4 id="인자-2-limited">인자 2: limited</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입의 40 이상 240 이하의 자연수</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">Number</code> 타입을 리턴해야 합니다.</li>
  <li>모든 짐을 옮기기 위해 필요한 박스 개수의 최솟값을 숫자로 반환합니다.</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li>옮겨야 할 짐의 개수는 1개 이상 50,000개 이하입니다.</li>
  <li>박스의 무게 제한은 항상 짐의 무게 중 최대값보다 크게 주어지므로 짐을 나르지 못하는 경우는 없습니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">movingStuff</span><span class="p">([</span><span class="mi">70</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="mi">100</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 3</span>

<span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">movingStuff</span><span class="p">([</span><span class="mi">60</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">130</span><span class="p">],</span> <span class="mi">140</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// 4</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />

<p>박스에는 최대 2개의 물건을 넣을 수 있으며, 조건중 짐을 나르지 못하는 경우는 없으므로 박스에는 1~2개의 물건이 무조건 들어간다.</p>

<p>옮겨야 할 짐의 개수는 1~50,000의 범위를 갖고있으므로, 연산의 횟수를 줄이기 위해 인덱스로 접근한다.</p>

<p>Greedy 알고리즘으로 접근한다면, 미래는 생각하지 않고 지금 현재의 최적의 경우만 고려하면 되므로 간단하게 풀이 할 수 있다.</p>

<ol>
  <li>물건들을 무게가 큰 순서대로 내림차순으로 정렬한다.</li>
  <li>가장 무게가 큰 물건 + 가장 작은 물건의 합이 <code class="language-plaintext highlighter-rouge">limit</code>보다 작다면 박스에 물건을 2개를 넣고, 아니면 현재 가장 무거운 물건 1개만 박스에 넣는다. <del>너무 Greedy 에 충실하긴하다..</del></li>
  <li>박스의 갯수를 세어가며 모든 물건 인덱스를 탐색하면 반복문을 종료하여 결과값을 반환한다.</li>
</ol>

<h3 id="문제풀이">문제풀이</h3>
<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
<hr />

<p><strong>Reference Code</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 좌표평면 위의 두 점 사이의 거리를 계산하는 함수입니다.</span>
<span class="kd">function</span> <span class="nx">calculateDistance</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">yDiffSquared</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">p2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">p1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">xDiffSquared</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">p2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">p1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dist</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">yDiffSquared</span> <span class="o">+</span> <span class="nx">xDiffSquared</span><span class="p">);</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">dist</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">TSP</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">places</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">currentMinDist</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">.</span><span class="nx">MAX_VALUE</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">LENGTH</span> <span class="o">=</span> <span class="nx">places</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">traverse</span><span class="p">(</span><span class="nx">lastVisited</span><span class="p">,</span> <span class="nx">visited</span><span class="p">,</span> <span class="nx">totalDist</span><span class="p">,</span> <span class="nx">visitNum</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">visitNum</span> <span class="o">===</span> <span class="nx">LENGTH</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">currentMinDist</span> <span class="o">&gt;</span> <span class="nx">totalDist</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">currentMinDist</span> <span class="o">=</span> <span class="nx">totalDist</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">visited</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 아직 방문하지 않은 도시와</span>
        <span class="c1">// 마지막으로 방문한 도시와의 거리를 구한다.</span>
        <span class="kd">const</span> <span class="nx">distToNext</span> <span class="o">=</span> <span class="nx">calculateDistance</span><span class="p">(</span><span class="nx">places</span><span class="p">[</span><span class="nx">lastVisited</span><span class="p">],</span> <span class="nx">places</span><span class="p">[</span><span class="nx">idx</span><span class="p">]);</span>
        <span class="nx">visited</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">traverse</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">visited</span><span class="p">,</span> <span class="nx">totalDist</span> <span class="o">+</span> <span class="nx">distToNext</span><span class="p">,</span> <span class="nx">visitNum</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nx">visited</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="c1">// 각 도시의 현재 방문 여부를 관리하는 배열</span>
  <span class="kd">const</span> <span class="nx">visited</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">LENGTH</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="nx">places</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">_</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 각 도시에서 출발하는 경우를 구분한다.</span>
    <span class="nx">visited</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">traverse</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">visited</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="nx">visited</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">currentMinDist</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p>우선은 <strong>Reference Code</strong>를 보고 이해하는 수준에서 마무리하였다.  <del>다시 풀어 볼 예정</del></p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>오늘 오후부터 <strong>HA3</strong> 시작이다. 이후 프로젝트 진행 예정이므로, 당분간 TOY 알고리즘은 미뤄 둘 예정이다.</li>
</ul>
:ET