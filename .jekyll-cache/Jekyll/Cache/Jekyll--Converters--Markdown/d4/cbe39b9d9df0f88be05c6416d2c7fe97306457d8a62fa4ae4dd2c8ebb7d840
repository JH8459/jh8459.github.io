I"M<<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-part3---oauth">1. Part3 - OAuth</h3>
<hr />
<p>OAuth는 인증을 중개해 주는 메커니즘이다.</p>

<p>이미 사용자 정보를 가지고 있는 웹 서비스(GitHub, google, facebook 등)에서 사용자의 인증을 대신해 주고, 접근 권한에 대한 토큰을 발급한 후, 이를 이용해 내 서버에서 인증이 가능하게끔 구현해야한다.</p>

<h4 id="1-1-사전-준비">1-1. 사전 준비</h4>
<hr />
<ul>
  <li>OAuth 2.0 문서를 참조하여 <a href="https://www.oauth.com/oauth2-servers/accessing-data/create-an-application/">GitHub에 내 앱 등록</a>을 해야한다.</li>
  <li>내 앱 등록을 끝낸 뒤, GitHub App에서 제공하는 Client ID 및 Client Secret의 정보를 서버에서 접근하기 위해 <code class="language-plaintext highlighter-rouge">.env</code> 파일에 환경변수를 등록해 주자.(Client Secret은 Github 계정 보안을 위해 타인에게 알려지면 안되므로 <code class="language-plaintext highlighter-rouge">.env</code> 파일 내부에서 관리해줘야 한다.)</li>
</ul>

<h4 id="1-2-서버-구현">1-2. 서버 구현</h4>
<hr />
<h5 id="oauthaccess_token">oauth/access_token</h5>
<hr />
<ul>
  <li>
    <p>인증을 웹 서비스(Github)에서 처리하므로, 인증서가 따로 필요하지가 않다. 우리가 구현해야 할 서버는 Github 웹에 접근하여 authorization code를 이용해 access token을 발급받기 위한 post 요청을 해주어야 한다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// req의 body로 authorization code가 들어옵니다. console.log를 통해 서버의 터미널창에서 확인해보세요!</span>
  <span class="c1">// console.log(req.body);</span>

  <span class="c1">// TODO : 이제 authorization code를 이용해 access token을 발급받기 위한 post 요청을 보냅니다. 다음 링크를 참고하세요.</span>
  <span class="c1">// https://docs.github.com/en/free-pro-team@latest/developers/apps/identifying-and-authorizing-users-for-github-apps#2-users-are-redirected-back-to-your-site-by-github</span>

  <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://github.com/login/oauth/access_token</span><span class="dl">'</span><span class="p">,</span> 
    <span class="p">{</span> <span class="na">client_id</span><span class="p">:</span> <span class="nx">clientID</span><span class="p">,</span> <span class="na">client_secret</span><span class="p">:</span> <span class="nx">clientSecret</span><span class="p">,</span> <span class="na">code</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">authorizationCode</span> <span class="p">},</span> 
      <span class="p">{</span> <span class="na">headers</span><span class="p">:</span> <span class="p">{</span> <span class="na">accept</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">}}</span>
<span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="na">accessToken</span> <span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">access_token</span><span class="p">});</span>
</code></pre></div>    </div>

    <p>accessToken 생성을 우리가 구현할 서버에서 하는 것이 아니라 OAuth에서 대신 해주고 있기때문에 authorization code를 이용해서 Github App api endpoint로 post 요청을 보내준다.</p>
  </li>
</ul>

<h4 id="1-3-클라이언트-구현">1-3. 클라이언트 구현</h4>
<hr />
<h5 id="login">Login</h5>
<hr />
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">components/Login.js</code>에서 할 일은 Github App에 요청을 보내 Authorization code를 받아오는 일이다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// TODO: GitHub로부터 사용자 인증을 위해 GitHub로 이동해야 합니다. 적절한 URL을 입력하세요.</span>
  <span class="c1">// OAuth 인증이 완료되면 authorization code와 함께 callback url로 리디렉션 합니다.</span>
  <span class="c1">// 참고: https://docs.github.com/en/free-pro-team@latest/developers/apps/identifying-and-authorizing-users-for-github-apps</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">GITHUB_LOGIN_URL</span> <span class="o">=</span> <span class="s2">`https://github.com/login/oauth/authorize?client_id=</span><span class="p">${</span><span class="nx">client가</span> <span class="nx">들어간다</span><span class="p">.}</span><span class="s2">`</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="app">App</h5>
<hr />
<ul>
  <li>
    <p><strong>Login</strong> 컴포넌트에서 Github App에 접속하여 인증 후 Authorization code를 받아왔다면 해당 코드를 server(server &gt; index.js)에 전달해 accessToken을 받아와야 한다.</p>

    <p>받아온 accessToken은 App 컴포넌트의 state에 저장한 후, Mypage 컴포넌트에서 props로 내려받아 활용해야 한다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/* 생략 */</span>
	
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">();</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">isLogin</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
          <span class="c1">// TODO:</span>
          <span class="na">accessToken</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>  <span class="c1">// 받아온 accessToken을 state에 저장해야 한다.</span>
      <span class="p">};</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">getAccessToken</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAccessToken</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">getAccessToken</span><span class="p">(</span><span class="nx">authorizationCode</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 받아온 authorization code로 다시 OAuth App에 요청해서 access token을 받을 수 있습니다.</span>
      <span class="c1">// access token은 보안 유지가 필요하기 때문에 클라이언트에서 직접 OAuth App에 요청을 하는 방법은 보안에 취약할 수 있습니다.</span>
      <span class="c1">// authorization code를 서버로 보내주고 서버에서 access token 요청을 하는 것이 적절합니다.</span>
      <span class="c1">// TODO: 서버의 /callback 엔드포인트로 authorization code를 보내주고 access token을 받아옵니다.</span>
      <span class="c1">// access token을 받아온 후</span>
      <span class="c1">//  - 로그인 상태를 true로 변경하고,</span>
      <span class="c1">//  - state에 access token을 저장하세요</span>

      <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:8080/callback</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">authorizationCode</span><span class="p">:</span> <span class="nx">authorizationCode</span> <span class="p">});</span>  <span class="c1">// 클라이언트 -&gt; 서버로 authorization code를 보내준 뒤 서버에서 Github App으로 요청을 한다.</span>

      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
          <span class="na">isLogin</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">accessToken</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">accessToken</span>  <span class="c1">// 받아온 accessToken을 App 컴포넌트의 state에 저장한다.</span>
      <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="mypage">Mypage</h5>
<hr />
<ul>
  <li>
    <p>받아온 accessToken으로 리소스에 대한 API 요청을 할 수 있다.</p>

    <p>accessToken을 전달하는 방식은 앞서 토큰에서 배웠던 Bearer Token 을 headers에 담아 주어 전달한다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">images</span><span class="p">:</span> <span class="p">[],</span>
          <span class="c1">// TODO: GitHub API 를 통해서 받아올 수 있는 정보들 중에서</span>
          <span class="c1">// 이름, login 아이디, repository 주소, public repositoty 개수를 포함한 다양한 정보들을 담아주세요.</span>
          <span class="na">name</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
          <span class="na">login</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
          <span class="na">html_url</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
          <span class="na">public_repos</span><span class="p">:</span> <span class="kc">null</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">getGitHubUserInfo</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// TODO: GitHub API를 통해 사용자 정보를 받아오세요.</span>
      <span class="c1">// https://docs.github.com/en/free-pro-team@latest/rest/reference/users#get-the-authenticated-user</span>

      <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://api.github.com/user</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
              <span class="na">authorization</span><span class="p">:</span> <span class="s2">`token </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">`</span>  <span class="c1">// token이 필요한 API 요청 시 header authorization token 담아서 보내기</span>
          <span class="p">}</span>
      <span class="p">});</span>

      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>  <span class="c1">// Github API를 통해 받아온 정보 갱신</span>
          <span class="na">name</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
          <span class="na">login</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">login</span><span class="p">,</span>
          <span class="na">html_url</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">html_url</span><span class="p">,</span>
          <span class="na">public_repos</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">public_repos</span>
      <span class="p">})</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="1-4-결과-확인">1-4. 결과 확인</h4>
<hr />
<p><img src="https://user-images.githubusercontent.com/83164003/143469590-68559aac-415b-47e6-b1dc-01e4fef06b4d.gif" alt="github" /></p>

<ol>
  <li>클라이언트의 Login 컴포넌트를 통하여 Github에 로그인 하여 authorization code를 받아 온 뒤, App 컴포넌트를 통해서 서버 <code class="language-plaintext highlighter-rouge">controller/callback.js</code>로 authorization code를 전달해 준다.</li>
  <li>서버에서는 Github API (<code class="language-plaintext highlighter-rouge">https://github.com/login/oauth</code>)에 유효한 authorization code를 보내 accessToken을 발급 받은 뒤, 응답 결과에 토큰을 담아 다시 클라이언트로 전달 해준다.</li>
  <li>Mypage 컴포넌트에서는 전달 받은 accessToken을 headers의 authorization에 담아서 GET 메소드로 Gihub API (<code class="language-plaintext highlighter-rouge">https://api.github.com/user</code>) 에서 사용자정보를 받아온다.</li>
  <li>GET 메소로 전달 받은 결과값을 현재 클라이언트에서 보여준다.</li>
</ol>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<p>후~ 드디어 [인증/보안 ] 일정을 모두 마쳤다..</p>

<p>우선 학습 할 양이 너무 많다.<br />
아직은 레퍼런스코드를 보며 이해하는 수준이기 때문에, 진짜 내것으로 만드는게 중요하다.</p>

<p><del>세션은 잘 안쓰일 듯 하고…</del> 토큰 방식 &amp; OAuth 2.0 방식의 백엔드 로직은 눈에 더 익어야 바로바로 쓸 수 있을거 같다..</p>

<p>평소에 별 생각 없이 <em>“구글로 로그인”</em> 을 눌러댔는데, 앞으로 유심히 볼 듯 하다.</p>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>[컴퓨터 공학] 기초</li>
</ul>
:ET