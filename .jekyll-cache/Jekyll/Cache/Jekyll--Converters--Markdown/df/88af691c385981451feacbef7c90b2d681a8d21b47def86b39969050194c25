I"=?<p><img src="https://user-images.githubusercontent.com/83164003/152718557-af87a691-a231-4f0f-a603-a478fe17e795.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>

<p>Sequelize ORM을 사용하며 가장 편리한 점을 꼽는다면 마이그레이션을 선택할 것 같다.</p>

<p>운영중인 서비스 중단없이 DB 스키마 모델을 변경한다던가 서비스 기획 및 설계단계에서 놓친 점을 나중에 추가할 때 DB를 갈아엎지 않고 수정할 수 있는 기능을 제공하는 마이그레이션은 써본 사람만 알 것이다.</p>

<p>다만 스키마 수정이 필요한 경우가 많이 발생하지 않기 때문에 사용빈도가 많지가 않았다.<br />
익숙치 않은 문법이기 때문에 매번 사용할 때 마다 검색을 통하여 사용하였는데, 이참에 블로그에 학습한 내용을 정리해서 내가 보려고 남겨본다.</p>

<h3 id="1-migration">1. Migration</h3>
<hr />

<p><code class="language-plaintext highlighter-rouge">Sequelize</code> 공식문서에서는 마이그레이션을 다음과 같이 설명하고 있다.</p>

<blockquote>
  <p>Just like you use <strong>version control</strong> systems such as <strong>Git</strong> to manage changes in your source code, you can use <strong>migrations</strong> to keep track of changes to the database. With migrations you can transfer your existing database into another state and vice versa: Those state transitions are saved in migration files, which describe how to get to the new state and how to revert the changes in order to get back to the old state.</p>
</blockquote>

<p>간단히 설명하자면 <strong>마이그레이션</strong>은 Git과 같은 버전 컨트롤 시스템으로써, 이를 데이터베이스에 적용하며 지원해준다.</p>

<p>즉, 마이그레이션은 데이터베이스의 수정및 롤백을 버전 컨트롤 시스템 처럼 이용할 수 있게끔 지원하는 강력한 기능이다.</p>

<p>마이그레이션을 이용하기전 Sequelize CLI가 필요하다. CLI는 마이그레이션과 프로젝트 부트스트랩 지원을 제공하며 이를 설치한 환경이라는 가정하에 글을 남긴다.</p>

<h4 id="1-1-migration-생성">1-1. Migration 생성</h4>
<hr />

<p>마이그레이션은 필요할 때마다 생성할 수 있다. <br />
스키마에 변경이 필요할 때(컬럼을 추가하거나, 기존 컬럼의 데이터 속성값을 변경할 때)마다 <code class="language-plaintext highlighter-rouge">migration.js</code> 파일을 생성하여 진행하는 것이다.</p>

<p>우선 마이그레이션을 생성하는 명령어는 다음과 같다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">using</span> <span class="nx">npm</span>
<span class="nx">npx</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">migration</span><span class="p">:</span><span class="nx">generate</span> <span class="o">--</span><span class="nx">name</span> <span class="nx">생성할</span> <span class="nx">migration</span> <span class="nx">이름</span>
<span class="err">#</span> <span class="nx">using</span> <span class="nx">yarn</span>
<span class="nx">yarn</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">migration</span><span class="p">:</span><span class="nx">generate</span> <span class="o">--</span><span class="nx">name</span> <span class="nx">생성할</span> <span class="nx">migration</span> <span class="nx">이름</span>
</code></pre></div></div>

<p>마이그레이션 파일을 보고 어떤 기능을 하는 코드인지 유추할 수 있을만한 이름만 입력해주면 생성이 된다.</p>

<p>명령어를 입력시 아래와 같은 템플릿 코드가 제공이 된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">up</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">queryInterface</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */</span>
  <span class="p">},</span>

  <span class="na">down</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">queryInterface</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable('users');
     */</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">up</code>은 마이그레이션을 담당하고 있으며, <code class="language-plaintext highlighter-rouge">down</code>은 <code class="language-plaintext highlighter-rouge">undo</code> 기능(롤백)을 담당하고 있다.</p>

<p>다음은 기능별로 함수들을 묶어 정리하였다.</p>

<h4 id="1-2-테이블을-새로-생성하거나-기존-테이블을-지워야-할-때">1-2. 테이블을 새로 생성하거나 기존 테이블을 지워야 할 때</h4>
<hr />

<p>우선 테이블을 생성할 때는 아래의 함수를 사용한다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">createTable()</code></p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// await queryInterface.createTable('테이블명', 컬럼명: {데이터 속성, 옵션}...);</span>
	
<span class="k">await</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">createTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">Users</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">INTEGER</span>
    <span class="na">autoIncrement</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">allowNull</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">primaryKey</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">username</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
    <span class="na">allowNull</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>그리고 테이블을 삭제할 때는 아래의 함수를 사용한다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dropTable()</code></p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// await queryInterface.createTable('테이블명');</span>
	
<span class="k">await</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">dropTable</span><span class="p">(</span><span class="dl">'</span><span class="s1">Users</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="1-3-테이블에-새로운-컬럼을-추가하거나-기존의-컬럼을-삭제할-때">1-3. 테이블에 새로운 컬럼을 추가하거나 기존의 컬럼을 삭제할 때</h4>
<hr />

<p>우선 테이블에 새로운 컬럼을 추가할 때는 아래의 함수를 사용한다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addColumn()</code></p>

    <p><code class="language-plaintext highlighter-rouge">Users</code> 테이블에 <code class="language-plaintext highlighter-rouge">role</code> 컬럼 추가 (데이터 속성은 <code class="language-plaintext highlighter-rouge">Integer</code>, <code class="language-plaintext highlighter-rouge">null</code>을 허용하지 않으며 기본값은 <code class="language-plaintext highlighter-rouge">1</code>)</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// await queryInterface.addColumn('테이블명', '컬럼명', {데이터 속성,옵션...});</span>
	
<span class="k">await</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">addColumn</span><span class="p">(</span><span class="dl">'</span><span class="s1">Users</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">role</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">INTEGER</span><span class="p">,</span>
    <span class="na">allowNull</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">defaltValues</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>그리고 기존의 컬럼을 삭제할 때는 아래의 함수를 사용한다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">removeColumn()</code></p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// await queryInterface.removeColumn('테이블명', '컬럼명');</span>
	
<span class="k">await</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">removeColumn</span><span class="p">(</span><span class="dl">'</span><span class="s1">Users</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">role</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="1-4-기존-컬럼의-이름-변경할-때">1-4. 기존 컬럼의 이름 변경할 때</h4>
<hr />

<p>테이블에 있는 기존 컬럼의 이름을 변경할 땐 아래의 함수를 사용한다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">renameColumn()</code></p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// await queryInterface.renameColumn('테이블명', '컬럼명', '변경할 컬럼명');</span>
	
<span class="k">await</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">renameColumn</span><span class="p">(</span><span class="dl">'</span><span class="s1">Users</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">role</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">userRole</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="1-5-기존-컬럼의-데이터-속성-및-옵션값-변경">1-5. 기존 컬럼의 데이터 속성 및 옵션값 변경</h4>
<hr />

<p>테이블에 있는 기존 컬럼의 이름을 변경할 땐 아래의 함수를 사용한다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">changeColumn()</code></p>

    <p><code class="language-plaintext highlighter-rouge">Users</code> 테이블에 <code class="language-plaintext highlighter-rouge">userRole</code> 컬럼 속성 변경 (데이터 속성은 <code class="language-plaintext highlighter-rouge">STRING</code>, 기본값은 <code class="language-plaintext highlighter-rouge">normal</code>)</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// await queryInterface.changeColumn('테이블명', '컬럼명', {데이터 속성, 옵션});</span>
	
<span class="k">await</span> <span class="nx">queryInterface</span><span class="p">.</span><span class="nx">changeColumn</span><span class="p">(</span><span class="dl">'</span><span class="s1">Users</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">userRole</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
    <span class="na">defaltValues</span><span class="p">:</span> <span class="dl">'</span><span class="s1">normal</span><span class="dl">'</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="1-6-migration-실행과-롤백">1-6. Migration 실행과 롤백</h4>
<hr />

<p>각각 필요한 기능을 <code class="language-plaintext highlighter-rouge">up()</code>과 <code class="language-plaintext highlighter-rouge">down()</code> 기능에 적절히 넣어두면 명령어를 통해 사용이 가능하다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">using</span> <span class="nx">npm</span>
<span class="nx">npx</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">db</span><span class="p">:</span><span class="nx">migrate</span>
<span class="err">#</span> <span class="nx">using</span> <span class="nx">yarn</span>
<span class="nx">yarn</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">db</span><span class="p">:</span><span class="nx">migrate</span>
</code></pre></div></div>

<p>위 명령어를 통해 마이그레이션을 실행 할 수 있으며 롤백 또한 아래의 코드를 이용하여 사용이 가능하다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">using</span> <span class="nx">npm</span>
<span class="nx">npx</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">db</span><span class="p">:</span><span class="nx">migrate</span><span class="p">:</span><span class="nx">undo</span>
<span class="err">#</span> <span class="nx">using</span> <span class="nx">yarn</span>
<span class="nx">yarn</span> <span class="nx">sequelize</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">db</span><span class="p">:</span><span class="nx">migrate</span><span class="p">:</span><span class="nx">undo</span>
</code></pre></div></div>
<p><br />
<br /></p>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<p>서비스를 멈추거나 DB를 모두 삭제 후 스키마를 수정을 해야하는 번거로움 없이 <code class="language-plaintext highlighter-rouge">Sequelize</code> Migration은 DB 스키마 수정을 간편하게 도와준다.</p>

<p>혹시 예상치 못한 스키마 수정결과가 일어나도 Git과 같이 <strong>버전 관리</strong> 기능이 있기 때문에 롤백또한 쉽게 가능하다.<br />
위 명령어들은 솔직히 자주 쓰지 못했기 때문에 매번 쓸 때마다 검색에 검색을 거듭해서 사용하곤 했었다.</p>

<p>글로 정리하며 조금 머릿속에서 정리된 기분이다.</p>

<p><br />
<br /></p>
:ET