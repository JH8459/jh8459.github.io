I"x.<p><img src="https://user-images.githubusercontent.com/83164003/131701318-f0ff36c4-1fcc-4f21-b978-18a9d8ec3386.jpg" alt="algorithm" /></p>
<h2 id="toy-11-powerset">TOY 11. powerSet</h2>
<h3 id="문제">문제</h3>
<hr />
<p>하나의 집합을 의미하는 문자열을 입력받아 각 문자를 가지고 만들 수 있는 모든 부분집합을 리턴해야 합니다.</p>

<h3 id="입력">입력</h3>
<hr />
<h4 id="인자-1--str">인자 1 : str</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">string</code> 타입의 공백이 없는 알파벳 소문자 문자열</li>
</ul>

<h3 id="출력">출력</h3>
<hr />
<ul>
  <li>배열(<code class="language-plaintext highlighter-rouge">arr</code>)을 리턴해야 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">arr[i]</code>는 각 부분집합의 원소로 구성된 문자열</li>
</ul>

<h3 id="주의사항">주의사항</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">arr[i]</code>는 각 부분집합을 구성하는 원소를 연결한 문자열입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">arr[i]</code>는 알파벳 순서로 정렬되어야 합니다.</li>
  <li>집합은 중복된 원소를 허용하지 않습니다.</li>
  <li>부분집합은 빈 문자열을 포함합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">arr</code>은 사전식 순서(lexical order)로 정렬되어야 합니다.</li>
</ul>

<h3 id="입출력-예시">입출력 예시</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">output1</span> <span class="o">=</span> <span class="nx">powerSet</span><span class="p">(</span><span class="dl">'</span><span class="s1">abc</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output1</span><span class="p">);</span> <span class="c1">// ['', 'a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']</span>

<span class="kd">let</span> <span class="nx">output2</span> <span class="o">=</span> <span class="nx">powerSet</span><span class="p">(</span><span class="dl">'</span><span class="s1">jjump</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output2</span><span class="p">);</span> <span class="c1">// ['', 'j', 'jm', 'jmp', 'jmpu', 'jmu', 'jp', 'jpu', 'ju', 'm', 'mp', 'mpu', 'mu', 'p', 'pu', 'u']</span>
</code></pre></div></div>

<h2 id="toy-11-solution">TOY 11. Solution</h2>
<h3 id="수도코드">수도코드</h3>
<hr />
<ul>
  <li><del>(작성중)</del></li>
</ul>

<h3 id="문제풀이">문제풀이</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">powerSet</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// TODO: 여기에 코드를 작성합니다.</span>
  <span class="kd">const</span> <span class="nx">sortArr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">).</span><span class="nx">sort</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">uniqueArr</span> <span class="o">=</span> <span class="nx">sortArr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">sortArr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="o">===</span> <span class="nx">index</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">flag</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">uniqueArr</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">subSets</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="kd">const</span> <span class="nx">subSet</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">DFS</span> <span class="p">(</span><span class="nx">depth</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 부분 집합 구하는 재귀 함수, DFS 알고리즘</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">depth</span> <span class="o">===</span> <span class="nx">uniqueArr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 트리의 끝에 다다른 것 ==&gt; 재귀 종료 조건</span>
      <span class="kd">const</span> <span class="nx">subSet</span> <span class="o">=</span> <span class="nx">uniqueArr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">flag</span><span class="p">[</span><span class="nx">index</span><span class="p">]).</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span> <span class="c1">// 해당 flag true =&gt; 부분집합 포함</span>
      <span class="nx">subSets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">subSet</span><span class="p">);</span> <span class="c1">// 부분집합들을 담는 배열에 push</span>

      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">flag</span><span class="p">[</span><span class="nx">depth</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// 해당 depth의 flag true = 트리의 왼쪽</span>
    <span class="nx">subSet</span><span class="p">(</span><span class="nx">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 트리의 왼쪽에 대해 재귀호출</span>

    <span class="nx">flag</span><span class="p">[</span><span class="nx">depth</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// 해당 depth의 flag false = 트리의 오른쪽</span>
    <span class="nx">subSet</span><span class="p">(</span><span class="nx">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 트리의 오른쪽에 대해 재귀 호출</span>
  <span class="p">}</span>
  
  <span class="nx">subSet</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// depth 0 부터 시작</span>
  <span class="k">return</span> <span class="nx">subSets</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
<span class="p">};</span>

</code></pre></div></div>
<h3 id="reference-code">Reference Code</h3>
<hr />
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">powerSet</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 정렬</span>
  <span class="kd">const</span> <span class="nx">sorted</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">).</span><span class="nx">sort</span><span class="p">();</span>

  <span class="c1">// 중복 제거</span>
  <span class="kd">const</span> <span class="nx">deduplicated</span> <span class="o">=</span> <span class="nx">sorted</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">acc</span><span class="p">[</span><span class="nx">acc</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="kd">let</span> <span class="nx">subSets</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="kd">const</span> <span class="nx">pickOrNot</span> <span class="o">=</span> <span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">subset</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// base case</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">===</span> <span class="nx">deduplicated</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 마지막 문자까지 검토한 경우</span>
      <span class="nx">subSets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">subset</span><span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// recursive case</span>
    <span class="c1">// idx번째 문자가 포함되지 않는 경우</span>
    <span class="nx">pickOrNot</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">subset</span><span class="p">);</span>

    <span class="c1">// idx번째 문자가 포함되는 경우</span>
    <span class="nx">pickOrNot</span><span class="p">(</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">subset</span> <span class="o">+</span> <span class="nx">deduplicated</span><span class="p">[</span><span class="nx">idx</span><span class="p">]);</span>
  <span class="p">};</span>

  <span class="nx">pickOrNot</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="dl">''</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">subSets</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li><del>(작성중)</del></li>
</ul>

<h2 id="내일-할-일">내일 할 일</h2>
<ul>
  <li>TOY 12. treeBFS</li>
  <li>TOY 6. sudoku</li>
</ul>
:ET