I"+<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>
<h3 id="1-react-데이터-흐름">1. React 데이터 흐름</h3>
<p><img src="https://user-images.githubusercontent.com/83164003/132542812-b2131f36-bbaa-436a-a174-d3e4a3e15945.png" alt="react" /></p>
<h4 id="1-1-상향식bottom-up-개발">1-1. 상향식(bottom-up) 개발</h4>
<ul>
  <li>
    <p>React의 개발 방식의 가장 큰 특징은 페이지 단위가 아닌, 컴포넌트 단위로 시작한다는 점이다.</p>

    <p>앱을 만들거나 웹페이지를 만들때 페이지를 만들기 이전에 컴포넌트를 만들고 조립을한다. 즉, 상향식(bottom-up)으로 앱을 만드는 것이다. 이러한 구조의 가장 큰 장점은 테스트가 쉽고 확장성이 좋다. 이때 중요한점은 하나의 컴포넌트는 한가지 일만 하는 단일 책임 원칙을 따르는 것이다. 그래야 이후 오류 발생시 오류 컴포넌트를 쉽게 찾고 수정할 수 있습니다.</p>

    <p>이러한 흐름을 이해하였다면, 웹페이지나 앱 디자인을 전달 받았을때 React 개발자는 이를 컴포넌트 계층 구조로 나누는 것이 가장 먼저 해야 할 일이다.</p>
  </li>
</ul>

<h4 id="1-2-하향식top-down-데이터-흐름">1-2. 하향식(top-down) 데이터 흐름</h4>
<ul>
  <li>
    <p><strong>단방향 데이터 흐름(one-way data flow)</strong> 이라는 키워드는 React를 대표하는 키워드이다.</p>

    <p>컴포넌트는 컴포넌트 바깥에서 <code class="language-plaintext highlighter-rouge">props</code>를 이용해 데이터를 마치 인자(<code class="language-plaintext highlighter-rouge">arguments</code>) 혹은 속성(<code class="language-plaintext highlighter-rouge">attributes</code>)처럼 전달받을 수 있다. 즉, 데이터를 전달하는 주체는 부모 컴포넌트가 되며, 이는 데이터 흐름이 하향식(top-down)임을 의미한다. 또한 컴포넌트는 <code class="language-plaintext highlighter-rouge">props</code>를 통해 전달받은 데이터가 어디서 왔는지 전혀 알지 못한다는 특징들이 단방향 데이터 흐름(one-way data flow)이다.</p>
  </li>
</ul>

<h4 id="1-3-데이터-흐름을-고려한-state-배치">1-3. 데이터 흐름을 고려한 State 배치</h4>
<ul>
  <li>
    <p>앞서 state에 관하여 학습했지만 데이터 흐름에 포커스를 맞춰 다시 언급하자면, App 에서 필요한 데이터는 ‘변하는 값’과 ‘변하지 않는 값’ 두 가지로 나누어볼 수 있다. 예를들어 user 가 입력하는 값은 이벤트에 따라 얼마든 변할 수 있는 값이며, 이 것을 state (상태) 라고 한다.</p>

    <p>React 로 개발을 할 때에 모든 데이터를 state 로 둘 필요는 없다. 사실 <code class="language-plaintext highlighter-rouge">state</code> 가 많아질 수록 앱이 복잡해지기 때문에 <code class="language-plaintext highlighter-rouge">state</code> 는 최소화 될 수록 좋다. 어떤 데이터를 state 로 두어야 하는지 여부는 다음 세 가지의 질문을 통해 판단해볼 수 있습니다.</p>

    <ol>
      <li>부모 컴포넌트 <code class="language-plaintext highlighter-rouge">props</code> 를 통해 전달되는가?</li>
      <li>시간이 지나도 변하지 않는가?</li>
      <li>컴포넌트 안의 다른 <code class="language-plaintext highlighter-rouge">state</code> 또는 <code class="language-plaintext highlighter-rouge">props</code> 를 가지고 계산이 가능한가?</li>
    </ol>

    <p>‘아니오’ 라는 답변이 나온다면 해당 데이터는 <code class="language-plaintext highlighter-rouge">state</code> 로 두어야 할 필요가 있다.</p>

    <p>그렇다면 <code class="language-plaintext highlighter-rouge">state</code> 를 어디에 위치시켜야 데이터 흐름에 알맞은가? 만일 <code class="language-plaintext highlighter-rouge">state</code> 가 특정 컴포넌트 안에서만 유의미하다면 그 컴포넌트 에 위치시키면 되지만, 하나의 <code class="language-plaintext highlighter-rouge">state</code> 를 기반으로 두 컴포넌트가 영향을 받는다면, 공통 소유 컴포넌트를 찾아 해당 위치에 <code class="language-plaintext highlighter-rouge">state</code> 를 위치시켜야 한다.</p>

    <p>즉, 두 개의 자식 컴포넌트가 하나의 <code class="language-plaintext highlighter-rouge">state</code> 에 접근하고자 할 때에는 하향식(top-down), 단방향 데이터 흐름을 고려하여 두 자식 컴포넌트의 공통된 부모 컴포넌트에 <code class="language-plaintext highlighter-rouge">state</code> 를 위치시켜야 한다.</p>
  </li>
</ul>

<h4 id="1-4-state-끌어올리기-lifting-state-up">1-4. State 끌어올리기 (Lifting State Up)</h4>

<h3 id="2-effect-hook">2. Effect Hook</h3>

<p><br />
<br /></p>

<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li></li>
</ul>

<p><br />
<br /></p>

<h2 id="내일-할-일">내일 할 일</h2>
<p>-</p>
:ET