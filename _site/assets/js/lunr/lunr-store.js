var store = [{
        "title": "21.07.19 TIL / 코드스테이츠 1일차",
        "excerpt":"    Today I Learned  1. 학습 툴 셋팅     리눅스 환경 (ubuntu os) 에 개발환경 구축.         오늘 느낀 점           코드스테이츠 1일차 앞으로의 강의 일정 및 학습에 대해서 설명을 들었다. 강의라기보다는 줌을 통해서 소통한 느낌.            자기주도적 학습을 강조하였다. 실제로 온라인을 통하여 수업이 진행되며 커리큘럼이 진행되기때문에.. 혼자 학습시간을 지키려 노력하고 이런 노력들 자체도 모두 자기주도적 학습이라 생각한다. 이러한 학습태도는 앞으로 수료시점까지는 당연하며 개발자로써 평생 몸에 지녀야할 기본소양이라 느껴진다. 평생 공부해야지..             내일 할 일      변수, 타입, 함수, 조건문  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.19-TIL/",
        "teaser": null
      },{
        "title": "21.07.20 TIL / 1. 변수, 2. 타입, 3. 함수, 4. 조건문",
        "excerpt":"    Today I Learnd  1. 변수     변수를 이용하면 데이터를 편리하게 저장하고 꺼내 쓸 수 있게 한다.   변수의 선언과 값의 할당에 대해서 학습하였다.            선언(declaration)을 통하여 변수를 선언할 수 있다.       할당(assignment)을 통하여 변수에 값을 저장하게 된다. 이때 사용되는 ‘=’은 같다라는 뜻이 아닌 ‘할당 연산자(Assignment operator)’이다.       var, let, const 선언방식의 차이점을 학습하였다.                                                                                   var                 let                 const                                                                         중복선언                 O                 X                 X                                               재할당                 O                 O                 X                                                                  변수명은 다음의 규칙에 따라 명명된다. reference. Camel Case     할당이 없는 변수의 경우 undefined 값을 가진다. (값이 없는게 아닌 해당 undefined값을 가진다)   2. 타입     원시 자료형, 참조 자료형 in JS 를 학습하였다.   typeof 연산자를 통하여 특정 갑의 타입을 확인할 수 있다.   3. 함수          함수는 “작은 기능의 단위”이며 키워드(keyword), 이름(name), 매개변수(parameter), 몸통(body)로 구분된다         function muntiPle(num){ // function(키워드), multiPle(이름), num(매개변수)       console.log(num*1);       console.log(num*2);       console.log(num*3);       console.log(num*4);       console.log(num*5);       console.log(num*6);       console.log(num*7);       console.log(num*8);       console.log(num*9); // body 부분   }                구체적인 입력과 출력을 가지고있으며, 호출 후에는 반드시 return 된다.       4. 조건문          조건문은 어떠한 조건을 판별한다. 그렇기에 비교 연산자(comparison operator)가 필요하다.         3 &gt; 5;\t\t// false   3 &lt; 5;\t\t// true   'hi' === 'hello'\t// false   'hi' !== 'hello'\t// true                 비교 연산자의 결과는 늘 Boolean, 즉 true 혹은 false 이다.       주의 해야 할 비교 연산자 ( == , != ) : 값 만을 비교 (data type은 논외) 하기 때문에 엄격한 비교가 불가능하다. 예외가 많기 떄문에 === 와 비교하면 오류가 많다.                두가지 조건이 한번에 적용되는 경우가 필요 할 땐, 논리 연산자(logical operator)를 사용하여 조건문을 작성한다.         isStudent &amp;&amp; isFemale;\t// 학생이면서 여성일때 통과   isStudent || isFemale;\t// 학생이거나 여성이면 통과   !isStudent &amp;&amp; isFemale;\t// 학생이 아니면서 여성일때 통과                truthy와 falsy가 조건문에서 작동하는 방식을 이해할 수 있다.             기억해야 할 6가지 falsy 값, 해당 값들은 false로 반환되므로 if문이 실행되지 않는다.                    false,  null, undefined, 0, NaN, ''                            5. HTML     하이퍼텍스트를 (링크) 가장 중요한 특징으로 하는 마크업이라는 형식을 가진 컴퓨터 프로그래밍 언어.            Markup이란? 그 파일이 프린터로 출력되거나 화면에서 어떻게 보여야할 것인지를 나타내기 위해 또는 그 문서의 논리적인 구조를 묘사하기 위해서, 텍스트나 워드프로세싱 파일의 특정위치에 삽입되는 일련의 문자들이나 기호들을 말한다. 마크업에 사용되는 표지를 흔히 ‘태그’라고 부른다.           태그 설명은 reference. HTML tag         오늘 느낀 점           코드스테이츠 2일차.. 잠을 엄청 설쳤다… 부담감 때문인가? 스트레스 컨트롤도 중요해보인다…            블로그에 학습내용 포스팅은 계속 진행할 예정.       구글은 신이다.            mdn 키워드 mdn 자체가 읽기가 어려워….. 익숙해지자       키워드를 통한 검색 생활화 하기. 영어로 검색하자       Stack Overflow 애용하기 아직은 봐도 잘 모르겠다…                처음으로 둘 이상의 인원이 모여 ZOOM을 통한 협업으로 코드 풀이를 해보았다. 생각보다 ZOOM 을 통한 협업은 불편하지 않았다, 화면쉐어링 등 기본 제공하는 툴들만으로도 의견 전달에는 문제가 없었다. pair 훈련 자체가 오늘 첫 시행이라 난이도가 낮았기에 시간은 제공된 시간 보다는 빠르게 소화할 수 있었다. 앞으로는 거부감 없이 할 수 있을 듯 하다.       생활코딩 수업 html, css, javascript 다시 듣기. 웹애플리케이션만들기 수업정도만 겉핣기식 따라하기 수업은 머릿속에 개념만 넣는 정도였다. 조금더 심화내용 수업을 들으며 개념확장 필요하다 생각된다.         내일 할 일           문자열            생활코딩 html css             html은 너무 기본적인 문법 및 코드스테이츠 커리큘럼과는 맞지 않는 방향이라 개념만 정립 후 css 수업으로 진행 예정.          ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.20-TIL/",
        "teaser": null
      },{
        "title": "21.07.21 TIL / 1. 문자열, 2. 반복문, 3. 호이스팅, 4. React",
        "excerpt":"    Today I Learnd  1. 문자열     문자열은 배열처럼 요소 하나씩 접근이 가능하다. index로 접근은 가능하지만 쓸 수는 없다는 (read-only) 특징을 가진다.   문자열은 + 연산자를 쓸 수 있다. string 타입과 다른 타입 사이에 + 연산자를 쓰면, string 형식으로 변환된다. (toString)        문자열의 표현방식중 템플릿 리터럴은 내장된 표현식을 허용하는 문자열 리터럴이다. 여러 줄로 이뤄진 문자열과 문자 보간기능을 사용할 수 있다. 이전 버전의 ES2015사양 명세에서는 “template strings” (템플릿 문자열) 라고 불려 왔다.   ES6는 템플릿 리터럴(Template literal) 이라고 불리는 새로운 문자열 표기법을 도입하였다. 템플릿 리터럴은 일반 문자열과 비슷해 보이지만, ‘ 또는 “ 같은 통상적인 따옴표 문자 대신 백틱(backtick) 문자 ` 를 사용한다.        var a = 5; var b = 10; console.log(\"Fifteen is \" + (a + b) + \" and \\n not \" + (2 * a + b) + \".\"); // \"Fifteen is 15 and // not 20.\"  var a = 5; var b = 10; console.log(`Fifteen is ${a + b} and not ${2 * a + b}.`); // \"Fifteen is 15 and // not 20.\"           2. 호이스팅     함수 안에 있는 선언들을 모두 끌어 올려서 해당 함수 유효범위(scope)의 최상단에 선언하는 것을 말한다.   자바스크립트 해석기(parser)는 함수가 실행 되기전 해당 함수를 한 번 훑는다.   함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시킨다.   이는 실제로 메모리 변화라던지, 코드가 끌어 올라가는 물리적 이동이 아닌, 자바스크립트 해석기 내부적으로 끌어올려서 처리하는것이므로 코드의 물리적 변화는 이뤄지지 않는다.   var 변수 선언과 함수 선언문 에서만 호이스팅이 일어난다.   var 변수 / 함수의 선언만 위로 끌어 올려지며, 할당은 끌어 올려지지 않는다.   코드의 가독성과 유지보수를 위해 호이스팅은 가급적 일어나지 않도록 해야 한다.            호이스팅을 잘 모르더라도 함수와 변수의 선언은 가급적 코드 상단부에서 이뤄지게끔 하자.       var 선언 방식은 불분문한 호이스팅의 주범이다. let/const 선언방식을 써서 불분문한 호이스팅이 이뤄지지 않게끔 통제가 필요하다.           3. 반복문  4. react  찍먹     생활코딩 React 수업을 진행하며 첫 챕터부터 가장 많이 들은 단어는 ‘가독성’, ‘재사용성’, ‘유지보수’ 이다. 세 단어 모두 다르지만 맥락은 비슷하다. Component를 어떻게 분리하며, 재사용 하는지가 이번 수업의 핵심이라 생각이 든다.            jsx (facebook 에서 개발된 유사 js) 를 이용한 효율적인 코딩.       component 를 통한 가독성 향상       build 를 통한 효율적인 네트워크 리소스 관리 이점.                 오늘 느낀 점           ZOOM 협업은 어제보다 익숙하다, 확실히 조건문부터는 코드풀이 난이도가 급 상승하였다. 좀더 간결하게 코드를 짜보자는 pair 와 의견을 나누고나서 코드의 재사용화, 다양한 기존 함수나 메소드를 통하여 간결한 문장 생성을 하려고 pair분과 소통하다보니 주어진시간이 짧게 느껴졌다.            pair에게 배울점이 많았다. 우선 같은 문항을 보았을때 짧은 시간내에 도출해 내는 의견들이 대게로는 비슷하였지만, 풀이과정에서 다른 방식으로 접근할 때가 있었다. 해당 부분은 전혀 생각지 못한 부분들도 있었으며, 생각은 해보았지만 어느 순간 막혀서 포기했던 접근방식들 또한 있었다. 이러한 생각을 공유할 수 있는 경험은 좋은 경험이었다.            2015년 이후 ES6에서 새롭게 추가되었다는 방식의 템플릿 리터럴을 오늘 처음 접하였다. 기존 es5 이전에서는 템플릿 문자열로 불려 왔는데, 이는 문법 정도로 해석하면 될 듯 하다. 기존 쓰는 방식인 표현식 삽입법은 직관적이지 않다는 단점과, 코드 작성 자체의 불편함이 공존하였다, 하지만 ES6 이후 템플릿 리터럴을 사용하게 되면, 이를 더욱 읽기도 쉬우며 코드 작성 또한 직관적이고 편리하게 관리 할 수 있게 되었다.       let name = \"KJH\"; let age = 32; console.log(name + 'is' + age + ' years old.');\t\t// KJH is 32 years old. console.log(`${name} is ${age} years old.`);\t\t// KJH is 32 years old.                그 외 ES6 이후 편리한 점은 호이스팅 (Hoisting) 이라는 개념이다. 자세한 개념은 위 학습한 내용에 기술해두었다. 개념만 말하자면, 변수 및 함수 선언이 작성한 코드의 상단으로 옮겨진다는 개념이다. 물론 실제로는 그렇지는 않지만, 이정도로만 해석하고 넘어가도록 하자.             내일 할 일           문자열            생활코딩 html css      ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.21-TIL/",
        "teaser": null
      },{
        "title": "21.07.22 TIL / 1. 반복문 코플릿",
        "excerpt":"    Today I Learnd  1. 반복문 코플릿          오늘 학습한 내용 중 가장 인상 깊었던 코드 풀이를 다시 한번 복습해보겠다. 수를 입력받아 홀수인지 여부를 리턴해야 한다. 반복문(while)문을 사용해야 합니다. 나눗셈(/), 나머지(%) 연산자 사용은 금지됩니다. 0은 짝수로 간주합니다.          /*---입출력 예시---*/ let output = isOdd(17); console.log(output); // --&gt; true output = isOdd(-8); console.log(output); // --&gt; false  /*---함수 작성---*/ function isOdd(num) {   let i = 0;\t\t// while 문의 조건식을 검색할 인자. 변수 i 선언 및 초기값 0 할당.   let evenOdd = 1;\t// 짝수와 홀수를 evenOdd에 담긴 양수(홀수)와 음수(짝수)의 값으로 판단 할 예정이므로 evenOdd 변수 선언 (초기 값은 1을 주어서, 0을 짝수로 간주한다. ex)num = 0일 경우 단 한번의 while문 만 실행되므로, evenOdd = -1(음수=짝수) 로 반복문을 나가게 된다. )    while(i&lt;=Math.abs(num)){\t// num값이 음수로 들어 올경우 Math.abs 메소드를 이용하여 절대값으로 연산한다.     evenOdd *= -1;\t\t// evenOdd 값에 -1을 곱하여 재 할당한다.     i++;\t\t\t// i를 1만큼 증가시킨다.   }\t\t\t\t// Math.abs(num)까지 i 가 while문 안을 수행 후 } 를 빠져나오면 evenOdd는 -1 또는 1의 값 두가지 값중 한가지 값을 내포한다.    if(evenOdd &gt; 0)\t\t// evenOdd의 값이 양수일 경우 true 값을 return 하여 홀수임을 나타낸다     return true;   else \t\t\t\t// evenOdd의 값이 그 외에 경우 false 값을 return 하여 짝수임을 나타낸다     return false; }                 오늘 느낀 점           읭?.. 반복문 개념학습은 1시간 코드풀이는 5시간.., 이중반복문 좀(좀 많이) 애먹었지만 확실히 문제를 풀어가며 pair분과 머리를 맞대며 도출해내는 과정은 희열감이 느껴지기도 했다. 확실히 개념 수업이라 일컫는 TEXT 읽는 것 보단 직접 짜본 내 코드들이 내 학습에는 더욱 도움이 되는 듯 하였다, 실제로 몇시간은 금방금방 지나가는 기적을 겪였다…            기본 수업 외에 오늘은 내 학습을 못한듯하다… 어젠 분명 리액트 수업이 재밌었는데.. 개발환경 구축하고 오늘은 터미널 켜보지도 않았다. 스트레스 컨트롤도 중요하다. 장기전이라 생각하고 임하자.             내일 할 일      다음주 수업은 새로운 pair 와 계산기, 짝수 생성기(?) 간단한 프로그래밍 코딩을 할 예정인듯 보인다. 이번주 수업 내용 복습 및 부족한 부분 check 는 내일 필수적으로 이뤄져야 할 듯 하다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.22-TIL/",
        "teaser": null
      },{
        "title": "21.07.23 TIL / 1. 소비자들과 맞닿는 영역에서의 CSS",
        "excerpt":"    Today I Learnd  1. CSS          CSS 문법        선택자(selector) 에는 태그이름이나 id 또는 클래스 등이 올수있다. 선택자로 특정 요소를 선택할수 있으며, 선택 후 중괄호 안의 선언 블럭에서 이 선택자에 적용 할 내용들을 작성한다.            id는 한 문서에 단 하나의 id 값을 가질수 있으며 # 기호를 이용하여 선택한다.       class는 동일한 기능을 하는 css를 여러 요소에 적용하기 위해 선택되며 . 기호를 이용하여 선택한다.           속성은 선택자 안에 요소로써 적용할 수 있는 내용이다. 속성과 값의 끝에는 세미콜론 ;을 붙여 속성끼리 구분한다.            다양한 속성 값은 해당링크에서 참조하자 CSS 참고서 -MDN.                박스모델은 레이아웃 설계시 가장 주의하여 구성해야 한다. (줄바꿈이 되는 박스(block), 옆으로 붙는 박스(inline, inline-block)가 있기에 설계시 미리 계획 후 설계해야한다.)                                              block           inline-block           inline                                           줄바꿈 여부           O           X           X                             기본적으로 갖는 너비(width)           100%           글자가 차지하는 만큼           글자가 차지하는 만큼                             width, height 사용 가능여부           O           O           X                                  줄바꿈이 되는 태그 : &lt;h1&gt; &lt;p&gt;, … 그 외 태그 알아보기 : Block-level elements MDN       줄바꿈이 되지 않는 태그 : &lt;span&gt;, … 그 외 태그 알아보기 : Inline elements MDN                박스를 구성하는 요소는 다음 그림안의 요소들을 기억하자.                    오늘 느낀 점           질문의 중요성, 이제껏 모르는 점들을 구글링만으로 검색을 해보았다. 하지만 구글은 너무 다양한 질문들이 존재하였다.  아고라스테이츠  를 보니 나와 비슷한 수준, 비슷한 경험을 가진 사람들이 올린 질문들이 많으니 활용하는게 좋아보인다.            이제껏 CSS는 디자이너(?) 의 영역이라 생각하며 소홀히 해왔는데, 잘못생각했다… 반응형 웹이라던지 소비자들과 맞닿는 영역에서 이뤄지는 CSS도 굉장히 중요하다 생각된다.             예를 들면, 오늘의 집과 집꾸미기 사이트를 보면 CSS의 중요성을 한 눈에 볼 수 있다 생각한다. (오늘의집과 집꾸미기는 필자와는 상관없습니다…) (21.07.23 기준 작성)                                스크롤을 내려도 구매옵션과 구매란이 따라오는 CSS 디자인은 상품상세설명을 쉽게 보면서 구매까지 소비자가 불편함없이 프로세스가 이어진다.                         반면 스크롤을 내리면 구매옵션과 구매란이 따라 오지 않는 고정적인 CSS 디자인은 소비자에게 옵션암기(!?) 라는 불편함을  강요를 한다. (구매색상이 마음에 들어 구매하려고 상단으로 올려서 모든 옵션을 다 고른뒤 구매버튼을 누르면 “아 색상이 뭐였지..?” 라는 생각이 다시 떠올라 웹페이지를 다시 내려본다는 등의 불편함이 야기될수 있음)                 내일 할 일      CSS 실습 필요. 학습보다는 다양한 id, class를 선언해가며 속성값을 주는 실습이 필요로해보인다.   구글의 기술트렌드 리포트를 보니 과거에는 jQuery 가 주요 기술 트렌드였다면 16~18년도 이후  부터는 그 자리를 React에게 내주었다는 리포트를 오늘 학습도중 알게되었다.  그렇기에 React는 꾸준히 학습이 필요로 보인다… 아직 찍먹 수준이라 본수업이 다가오기전 매주 주말 통하여 충분한 학습이 필요로 할 듯 하다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.23-TIL/",
        "teaser": null
      },{
        "title": "21.07.26 TIL / 1. 계산기 실습",
        "excerpt":"    Today I Learnd  1. 계산기 실습 : github repository            오늘 느낀 점     html, css, js 세분화 된 학습이 아닌, 세가지의 모든 기능을 더한 웹페이지 만들기는 생각보다 상호간 작용을 염두해야 원활이 구현된다.         내일 할 일     계산기 실습 level nightmare 까지 구현해보기.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.26-TIL/",
        "teaser": null
      },{
        "title": "21.07.27 TIL / 1. 계산기 실습(nightmare)",
        "excerpt":"    Today I Learnd  1. 계산기 실습 : Github 참조.            오늘 느낀 점     점점.. 수업에 내가 밀려나간다. 장기전이다, 멘탈 관리. 모르는 부분이있다면 붙잡고 끙끙 앓기보다는 조금더 학습 후 주말중 부족한 부분을 다시 학습하여 멘탈 관리 및 부족한 부분을 메꿔나가야 할 듯 하다.   CSS .. 만만히 볼 분야가 절대 아니다. JS를 통하여 CSS를 조작하거나 제어하는 분야 말고도 특정한 상태나 규칙에 따라 CSS 스스로 동작하는 선택자들 또한 존재하였다. 단순 코드 몇줄 만으로도 코드가 다이나믹해지는 효과를 볼 수 있다.   선택자에는 태그, id, class만 선택되는줄 알았다..복합선택자, 부모/자식 개념 만만하지않다…         내일 할 일     내일 일정은 리눅스 기초 수업이다. React를 맛만 보았을때 node.js 개발 환경은 이미 내 PC에 셋팅을 해두었다. 수업방향에 맞춰서 다시 세팅해보고 React 또한 다시 학습해보는 기회를 가져봐야겠다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.27-TIL/",
        "teaser": null
      },{
        "title": "21.07.28 TIL / 1. Linux CLI, 2. 패키지와 패키지 매니저, 3. Node.js, 4. React",
        "excerpt":"    Today I Learnd  1. Linux CLI     명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식을 뜻한다. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다.   2. 패키지와 패키지 매니저  2-1. 패키지     리눅스에서 빈번하게 사용하는 ‘패키지’란 커널 및 라이브러리 버전의 배포판 환경에 맞추어 빌드한 실행파일을 압축한 것이다.   우분투 환경에서는 데미안 스타일의 패키지 방식을 이용하기에 해당 방식을 학습하였으며, 해당 환경으로 환경을 구성하였다.   2-2. 패키지 매니저     APT(Advanced Packaging Tool)는 데비안과 우분투를 포함하여 데비안 계열 리눅스 배포판들의 주 패키지 관리 도구이다.   3. Node.js     쉽게 말하면 JavaScript 런타임(Runtime)이다., 여기서 런타임이란 프로그래밍 언어가 구동되는 환경을 뜻한다. Node.js 는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임이다. Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이다.   3-1. Node.js를 왜 사용하나?          Node.js 라이브러리 내의 API는 모두 비동기식이다. None-Blocking 즉, 멈추지 않는다는 의미이다. API를 실행 하고 완료되기까지 기다리지 않고 바로 다음 API를 실행한다. 그리고 예전에 실행한 API가 값을 반환하면 이벤트 루프가 이를 확인하고 값을 받아온다. 단일 쓰레드 모델을 사용하며, 이벤트 메커니즘을 통하여 서버가 멈추지 않고 반응할 수 있기에 확장성이 좋다.       위와같은 특징때문에 데이터를 실시간을 다루는 애플리케이션이나 싱글페이지 애플리케이션(SPA), 입출력이 잦은 애플리케이션을 개발할 때 뛰어난 효율성을 발휘할 수 있다. 다만, 싱글 쓰레드 모델이기 때문에 하나의 작업 자체가 시간이 많이 걸리면 전체 시스템의 성능이 아주 급격하게 나빠지므로 CPU 사용률이 높은 애플리케이션에선 권장되지 않는다.       3-2. nvm ?          NVM(Node Version Manager)은 Node.js의 버전을 관리하기 위한 도구이다. 개발툴들이 다양해 질수록 경우에 따라서 Node.js의 버전을 달리 사용해야 할 필요성이 생기게되었다.       사용목적은 협업 혹은 다양한 프로젝트를 동시에 진행 할 때 다양한 라이브러리 / 프레임워크 / 개발 툴들의 버전 호환 문제를 피할수있는 가장 편리한 방법중 하나이기 때문이다. 또한 nvm을 통하면 다양한 버전의 Node.js를 설치를 간편하게 할 수 있으며, use 커맨드를 이용하여 필요한 Node.js의 버전으로 스위칭 할수 있게된다. 디폴트 버전 설정, 설치한 버전들의 리스트 확인, 필요 없는 버전 삭제 등 소위 버전 관리가 매우 간편해 진다.       3-3. npm ?     하나의 프로그램은 다양한 모듈이 합쳐져서 만들어진다. 이때 개발자는 이 모듈을 모두 개발할 이유가 없다. 이미 만들어진 검증된 코드(모듈)을 잘 가져와서 효율적인 방법으로 쓰게끔 도와주는게 npm(Node Package Manager)이다.   3-4. package.json     프로젝트 전반에 관한 정보를 정의하고 의존하는 패키지 버전 정보를 명시해주는 파일이다.   package.json 파일과 함께 프로젝트 배포시 이점은 상당하다. 해당 프로젝트가 포함하고 있는 모든 모듈을 모두 전달하지 않아도, package.json 에 필요 모듈이 모두 명시되어 있기 때문에 사용자가 배포자가 모든 모듈을 배포하지 않아도 필요한 모듈은 npm을 통하여 직접 다운받아서 쓰면 되기때문이다.   4. ~ 코딩애플 React 기초 3강         오늘 느낀 점          아직 CLI환경에서의 작업은 익숙하지 않다. 진짜 컴퓨터와 대화하는 느낌이랄까…GUI가 확실히 편리하지만, 개발자는 컴퓨터와 가까운 직업이라 생각하므로 필히 학습하고 넘어가자.            Node.js 에서 npm 을 통하여 사용하는 패키지들은 프로젝트의 배포와 설치의 유연함이 강력했다. package.json 에 명시된 정보만으로 빠르게 프로젝트에 필요한 모듈들을 파악할 수 있었으며, npm install 명령어 한줄로 필요한 모듈들의 모음인 패키지를 받을수 있었다.            React 에서의 변수는 일반적인 변수 선언보다는 state를 쓰는게 웹앱 사이트 제작에 도움이 된다. 갓 state             내일 할 일     생활코딩 리액트 강의는 구 버전임을 깨닫고 유튜브 채널 중 코딩애플 님 클론 코딩을 우선 따라하기 방식으로 학습하기로 결정.            4강 수업전, 블로그 글 리스트 UI 3개 완성하기 (제목 내용은 state 이용)           React 와 DOM 은 필히 선행학습이 수반되어야 할듯하다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.28-TIL/",
        "teaser": null
      },{
        "title": "21.07.29 TIL / 1. Git",
        "excerpt":"    Today I Learnd  1. Git     Git이란 분산형 버전 관리 시스템(Version Control System) 의 한 종류이며, 빠른 수행 속도에 중점을 둔다.            “버전 관리 시스템” 이란 파일 변화를 시간에 따라 기록했다가 이후에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템이다. 동일한 정보에 대한 여러 버전을 관리하게 되며, 버전을 통해 시간적으로 변경 사항과 변경 사항을 작성한 작업자를 추적할 수 있다.           1-1. GitHub     Git을 통하여 버전관리를 한다 이미 언급을하였다. 그렇다면 Github는 무엇일까? Github는 Git Repository를 관리할 수 있는 클라우드 기반 서비스이다. 즉 Git으로 버전을 관리하는 폴더에 대해서 Github을 통해 여러 사람들이 공유하고 접근할 수 있게되기때문에 Git이 분산형 버전 관리 시스템으로 불리울 수 있게된다.   1-2. Git Repository     내가 작업하는 소스 코드 폴더가 버전 관리를 받게 하기 위해서는 내 폴더를 Git의 관리 아래에 두어야 한다. 이때 Git으로 관리되는 폴더를 Git repository 라고 부른다. Git repository 는 Remote Repository와 Local Repository 두 종류의 저장소를 제공한다.            Remote Repository : 원격 온라인 서버 상의 저장소이다. 여러 사람이 함께 공유가 가능하다.       Local Repository : 내 컴퓨터의 저장소이다. 개인 전용 저장소이며 내 컴퓨터 안의 저장소이기 때문에 오프라인 작업또한 가능하다.                  1-3. Git을 통한 작업시 WorkFlow        Remote에 있는 다른 Repository에서 Fork를 해서 Remote에 있는 내 Repository에 가지고 온다.   이 코드를 수정하기 위해서는 내 컴퓨터로 가져오는 작업이 또 필요하다. 내 컴퓨터에서 작업을 하기 위해서 git clone을 한다.   이제 내 컴퓨터의 작업 공간 (work space) 에서 작업에 들어간 파일들을 git의 관리 하에 있는 상태로 변경할 수 있다. 이 영역을 staging area라고 말한다. 즉, staging area에 들어오지 않은 파일은 unstaged 혹은 untracked file이라고 말하며, staging area에 있는 파일들은 staged 된 파일이라고 말할 수 있다. git commit 을 하기 위해서 현재 Local Repository에 변경된 파일들이 어떤것인지 확인하려면 git status를 통하여 staging area와 untracked files 목록에 어떤 것들이 있는지 확인할 수 있다.   staging area에 들어온 파일들은 git commit이 가능하다. commit을 하고 나면 내 remote repository에 git push 해서 commit 기록을 remote 에도 남겨줄 수 있다. 남긴 commit들이 잘 기록되어있는지 확인하려면 git log를 통하여 로그들을 터미널 창에서 확인할 수 있다.   git push를 완료한 후 이제 remote의 원래 레파지토리에 pull request를 보내면 Remote Repository로 내가 수정한 코드를 업로드할 수 있다.   2. 코딩애플 React         오늘 느낀 점     깃깃깃깃깃. 말로만 들었지 왜 협업에 유리하며, 분산관리에 유리하며.. 버전관리에 유리하며.. 많은 기업들이 해당 툴을 모두 사용하는지 짧은 시간이지만 크게 와닿았다. 협업 과정 중 commit을 들여다보면 누가..언제..몇분전에.. 무슨작업을..무슨코드를 뻘짓(?)거리 하였는지 적나라하게 나오는걸 보니 정말 투명하고 실시간으로 코드유지가 된다는 느낌을 받았다.         내일 할 일     이번주 마무리. 배열,객체 수업 후 배열은 코플릿 페어 진행이 예정되어있다. 저번주 반복문 코플릿이후 오랫만의 코플릿이기때문에 걱정된다. 배열은 오늘 자기 전 개념정도만 한번 훑고 자야겠다. 아직도 소수 찾는 이중반복문이 머릿속에 그려진다.   리액트 선행학습 위한 코딩애플…유료다. 유튜브 코딩앙마 님의 수업이 유익해보이며 무료로 시청이 가능해보인다. 이번주~다음주 중 리액트 클론 코딩 및 따라하기는 우선 코딩앙마님의 해당 수업으로 진행해볼 예정이다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.29-TIL/",
        "teaser": null
      },{
        "title": "21.07.30 TIL / 1. 배열, 2. 객체",
        "excerpt":"    Today I Learnd  1. 배열     배열은 순서가 있는 값이다. 순서는 인덱스(index)라고 부르며, 1이 아닌 0부터 매긴다.            배열의 값 접근은 인덱스를 이용하여 값에 접근한다.           [] 대괄호를 이용해서 배열을 만드며, 각각의 원소(element)는 쉼표(comma)로 구분해준다.   let myNumber = [ 73, 98, 86, 61, 96]; myNumber[3]; // 61 myNumber[4] = 200; // 배열의 4번째 인덱스의 값을 200으로 변경 myNumber; // [73, 98, 86, 61, 200];      배열의 속성에 접근하거나 메소드를 추가할때는 .(온점)을 이용하여 접근한다.            myNumber.length;  // 4  : 온점(dot)을 이용해서 변수가 가지고 있는 속성(property)에 접근할 수 있다.       myNumber.push(98);  // myNumber 배열 끝에 96이라는 값을 추가한다 : 온점(dot)을 이용해서 관련된 명령(method)도 실행할 수 있다. 명령을 실행할 때는, 함수를 실행하듯 괄호를 열고 닫는 형태로 실행한다.           1-1. 배열의 기초 메소드          Array.isArray : 배열의 기본 type은 “object”이다. 그래서 특정 값이 배열인지 아닌지 typeof()로 판별할 수 없다. Array.isArray()는 배열인지 아닌지 판별할 수 있는 메소드이다. 반환값은 boolean 이다.       let num = 10; let words = ['피', '땀', '눈물']; typeof num;  // \"number\" typeof words;  // \"object\" Array.isArray(num)  // false Array.isArray(words)  // true                push, pop :  배열의 뒤에서 요소를 추가 및 삭제할 수 있다. (mutable)       let words = ['피', '땀', '눈물']; words.push('BTS');  // 4 (기본 리턴 값은 '.length')   words;  // (4) , ['피', '땀', '눈물', 'BTS') , 원본 값이 바뀐다(mutable). words.pop();  // 'BTS' (기본 리턴 값은 삭제된 값이 리턴된다.)   words;  // (3) [\"피\", \"땀\", \"눈물\"]                 shift, unshift : 배열의 앞에서 요소를 추가 및 삭제할 수 있다. (mutable)       2. 객체     객체란 키(key)와 값(value)으로 구성된 프로퍼티(property)의 정렬되지 않은 집합이다.            중괄호를 이용하여 객체를 만드며 그 내부에 키와 값은 쌍으로 구성되며 (key-value paor), 키-값 쌍은 쉼표(comma)로 구분해준다.              2-1. 객체의 사용     객체의 값을 사용하는 방법은 두 가지가 있다.     let user = { firstName : 'JeongHyun', lastName : 'Kim', email : 'kk_ong2233@naver.com', city : 'Seoul' };                Dot notation : 객체명 뒤에 .을 통하여 key값에 접근한다.       user.firstName;  // 'JeongHyun' user.city;  // 'Seoul'                Bracket notation : 객체명 뒤에 [] 대괄호 안 값이 문자열처럼 '' 안에 들어가야한다.       user['firstName'];  // 'JeongHyun' user['city'];  // 'Seoul'                키 값이 동적일 경우에는 브라켓 노테이션을 반드시 사용한다.         let person = {     name : 'Kim',       age : 20   } \t   function getProperty(obj, propertyName){     return obj[propertyName];   } \t   let output = getProperty(person, 'name');  // 'Kim'   let output = getProperty(person, 'age');  // '20'           2-2 객체의 추가/삭제 및 확인          dot/bracket notation을 이용해 값을 추가할 수 있다.         user.age = '20';  // user 객체에 age = '20' 의 키값쌍 추가   user.['city'] = 'Seoul';                delete 키워드를 이용해 삭제가 가능하다.         delete user.age;  // user 객체에 있는 age 키 제거                in 연산자를 이용해 해당하는 키가 있는지 확인할 수 있다.         'age' in user; // false   'city' in user; // true                 오늘 느낀 점     배열은 문자열과 유사하다. 문자열은 원본을 수정하지 않았기에 문자열을 복사해서 가져온뒤 작업을 많이하였다. 하지만 배열에서는 원본을 바꾸는지 여부가 중요하다 (mutable 여부). 무분별한 원본값을 바꾸는 행위는 예상치 못한 버그(?)를 야기시킬수 있기에 잘 생각한 뒤 사용해야 할것같다.         내일 할 일     주말이며 다음주 부터는 8월이다. 이번달 7월간의 회고 기록도 포스팅으로 남겨봐야겠다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.07.30-TIL/",
        "teaser": null
      },{
        "title": "21.08.02 TIL / 1. 객체 코플릿",
        "excerpt":"    Today I Learnd  1. 객체 코플릿     객체는 배열과 다르게 순서성을 가지지 않으며, 묶음으로 된 데이터에 이름을 붙혀, 의미를 부여할 수 있다. 배열또한 각 값이 하나의 변수로 묶인 데이터이지만, 각 index가 어떤 정보를 갖고 있는지 알아야지 해당 값에 접근이 용이하다.            객체는 키쌍값(key-value pair)으로 이루어져 있다.            객체의 값을 사용하거나 추가할 땐 Dot notation, Bracket notation 방식을 사용한다   할당된 키와 값을 지울 땐 delete 키워드를 이용해 삭제가 가능하다.        객체 안에 특정한 키가 있는지 확인이 필요할 땐, in 연산자를 이용하여 확인한다.            for ... in : 상속된 열거 가능한 속성들을 포함하여 객체에서 문자열로 키가 지정된 모든 열거 가능한 속성에 대해 반복합니다.           for (variable in object) { ... }                 variable : 매번 반복마다 다른 속성이름(Value name)이 변수(variable)로 지정됩니다.       object :  반복작업을 수행할 객체로 열거형 속성을 가지고 있는 객체.              Note: for…in은 인덱스의 순서가 중요한 Array에서 반복을 위해 사용할 수 없습니다.    2. Github 블로그 이사         블로그를 velog에서 git에서 jekyll 환경으로 세팅하는 블로그로 변경해보았다.     https://honbabzone.com/ 해당 블로그를 통해서 minimal-mistakes 테마를 이용하여 세팅을 해보았다. 우선 불필요한 포스팅을 줄이고 오늘 배운 내용 및 시간을 어떻게 보냈는지, 어떤점을 느끼고 발전했는지에 대한 부분만 짚고 넘어갈 예정이다.            오늘 느낀 점      어렵다… git blog .. 8.1 ~ 8.2, 이틀동안 지금 챕터진행 말고 블로그 셋팅 씨름한 덕에 포스트 commit 하고 푸쉬할 수 있게되었다. 물론 지금 테마 및 셋팅이 맘에 드는건 아니지만, 일단 나중으로 미루고 포스팅이 우선인듯하여 우선 급하게 셋팅을 마무리 지었다.   추후 상단 nav에 위치한 메뉴버튼들을 좌측 사이드바로 옮기고 싶다.  스크롤에 반응하는 author_ profile 목록은 그렇게 유용하진 않는듯하다..   사소한거지만.. html 구조파악에 시간이 너무 오래걸렸다. 셋팅 위한 한글 포스팅도 많이 없는 상황이다 (상단에 올려둔 7271kim 님의 블로그 세팅이 거의 대중화(?)되었다고 보면 될 듯하다. 우선은 천천히 코드및 구조를 뜯어보며 변경해보는거로 미뤄둬야겠다.         내일 할 일     CSS 챕터 학습   남은 기존 posts 이동하기 &amp;&amp; 7월 19일 부터 달려온, 보름정도의 기간 self-check 회고 posting 하기 (blog setting 은 현재 상태로 만족하고 학습에 몰두해야겠다.)   DOM 개념 잡기  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.02-TIL/",
        "teaser": null
      },{
        "title": "21.08.03 TIL / 1. 다양한 CSS 셀렉터, 2 . CSS layout, 3. HTML/CSS 목업 와이어프레임 실습",
        "excerpt":"    Today I Learnd  1. 다양한 CSS 셀렉터  h1 {  }  // 셀렉터 div {  }    * {  }  // 전체 셀렉터  section, h1 {  }  // 태그 셀렉터  #only {  }  // ID 셀렉터  .center {  }  // class 셀렉터  a[href] { }  // attribute 셀렉터 p[id=\"only\"] { }  header h1 {}  // 후손 셀렉터  header &gt; p { }  // 자식 셀렉터  section + p { }  // 인접 형제 셀렉터  section ~ p { }  // 형제 셀렉터  a:hover { }  // 가상 셀렉터 a:active { }  input:checked + span { }  // 요소 상태 셀렉터 input:enabled + span { }  p:first-child { }  // 구조 가상 클래스 셀렉터 ul &gt; li:last-child { }  input:not([type=\"password\"]) { } // 부정 셀렉터 div:not(:nth-of-type(2)) { }  input[type=\"text\"]:valid { }  // 정합성 확인 셀렉터 input[type=\"text\"]:invalid { }      새로 학습한 셀렉터          attribute 셀렉터  ,  부정 셀렉터         2-1 . CSS layout     &lt;div id=\"container\"&gt;   &lt;div class=\"col w10\"&gt;      &lt;div class=\"icon\"&gt;아이콘 1&lt;/div&gt;     &lt;div class=\"icon\"&gt;아이콘 2&lt;/div&gt;     &lt;div class=\"icon\"&gt;아이콘 3&lt;/div&gt;   &lt;/div&gt;   &lt;div class=\"col w20\"&gt;     &lt;div class=\"row h40\"&gt;영역1&lt;/div&gt;     &lt;div class=\"row h40\"&gt;영역2&lt;/div&gt;     &lt;div class=\"row h20\"&gt;영역3&lt;/div&gt;   &lt;/div&gt;   &lt;div class=\"col w70\"&gt;     &lt;div class=\"row h80\"&gt;영역4&lt;/div&gt;     &lt;div class=\"row h20\"&gt;영역5&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;   .w70 { width: 70%; } .h40 { height: 40%; }  * {  // 기본 스타일 제거 (box-sizing)   box-sizing: border-box; }  body {  // 기본 스타일 제거 (여백 제거)   margin: 0;   padding: 0; }     박스의 시작을 정확히 (0,0)의 위치에서 시작하고 싶은데, &lt;body&gt; 태그가 가진 기본 스타일에 약간의 여백을 포함하지 않아 계산에 어려움이 있다. 위에 언급한 문제를 해결할 몇 줄의 코드를 적용시키면, 기본 스타일링을 제거하여 디자인한 대로 레이아웃을 구현할 수 있습니다.   이렇게 클래스 이름과 구현을 1:1로 일치시켜 아주 작은 단위로 CSS를 작성 기법을 Atomic CSS 방법론이라고 한다.     2-2. CSS layout (flexbox)     flexbox로 레이아웃을 구성한다는 것은, 박스를 유연하게 늘리거나 줄여 레이아웃을 잡는 방법이다.   &lt;div id=\"outer\"&gt;   &lt;div class=\"box\"&gt;box1&lt;/div&gt;   &lt;div class=\"box\"&gt;box2&lt;/div&gt;   &lt;div class=\"box\"&gt;box3&lt;/div&gt; &lt;/div&gt;   #outer {   display: flex;   border: 1px dotted red;   padding: 10px; }  .box {   border: 1px solid green;   padding: 10px; }              부모 박스요소에 display: flex를 적용해, 자식 박스의 방향과 크기를 결정한다. 기본값으로, display: flex가 적용된 부모 박스의 자식 요소는 왼쪽부터 차례대로 이어 배치된다.       반드시 알아두기: grow(팽창 지수), shrink(수축 지수), basis(기본 크기)            자식 박스에 어떠한 속성도 주지 않으면, flex: 0 1 auto; 기본값이 적용됩니다.           grow, shrink 속성은 단위가 없고, 비율에 따라 결과가 달라진다. 부모 박스 안에 n개의 자식 박스가 있다고 가정하고 각 자식 박스가 갖는 grow값의 총 합이 n이라면,  grow 속성의 값을 1로 설정하는 것은 1/n 가로 또는 세로길이를 적용한다는 의미이다.    &lt;div id=\"outer\"&gt;   &lt;div class=\"box target\"&gt;.box.target&lt;/div&gt;   &lt;div class=\"box\"&gt;.box&lt;/div&gt;   &lt;div class=\"box\"&gt;.box&lt;/div&gt; &lt;/div&gt;   .target {   flex: 1 1 auto; }        flex-grow  : 1 이다. box.target은 부모 박스의 가로 길이 중에서 남은 빈 영역만큼 늘어나게 된다. 위 설명대로라면 전체 자식요소가 가진 grow 값의 합은 1+0+0 = 1이므로, box.target의 가로 크기는 1/1 = 100% 이다. 그러나 다른 자식 박스 안에 이미 콘텐츠가 존재하므로, 다른 자식 박스안의 콘텐츠가 담긴 길이를 제외한 나머지 가로 길이가 box.target의 가로 길이가 된다.   .target {   flex: 1 1 auto; }   .box {   flex: 1 1 auto; }     만약 .box의 flex-grow : 1로 설정하면, 모든 박스가 늘어나려고(grow) 합니다. 결과적으로 모든 박스가 동일한 비율로 가로 길이가 늘어납니다. (총 grow 값 1+1+1, 각 박스는 1/3씩 크기를 가짐)              shrink는 grow와 반대로, 설정한 비율만큼 박스 크기가 작아진다. 그러나 flex-grow 속성과 flex-shrink 속성을 함께 사용시 flex-shrink 속성은 width나 이후 설명할 flex-basis 속성에 따른 비율이므로 실제 크기를 예측하기가 어렵게 된다. flex-grow 속성으로 비율을 변경하는 경우, flex-shrink 속성은 기본값인 1로 두어도 무방하다.            basis는 자식박스가 flex-grow나 flex-shrink에 의해 늘어나거나 줄어들기 전에 가지는 기본 크기이다.       2-3. CSS layout (flexbox 콘텐츠 정렬 방법)     Flexbox를 원하는대로 제어하기 위해서는 axis(축)의 개념에 대한 이해가 필요하다.  axis는 main axis 와 cross axis로 구분된다.            main axis는 flex-direction 속성에 의해서 결정된다. flex-direction의 기본 값인 row 인 상태일 때 main axis 는 가로축(가로축이 default)이 된다.       cross axis는 여러 개의 main axis와 수직을 이루는 방향입니다. main axis가 가로일 때 cross axis는 세로가 됩니다.                  그렇다면 위의 layout을 flexbox 방식으로 CSS를 구성해보자   * {     margin: 0;     padding: 0;     font-size: large;     box-sizing: border-box; }  #container {     display: flex;     margin: 0.4rem;     padding: 0.4rem;     min-height: 100vh; }  .col {     display:flex;     flex-direction: column;     margin: 0.4rem;     padding: 0.4rem;     border: 1px solid red; }  .icon {     margin: 0.4rem;     padding: 0.4rem;     border: 1px dashed orange; }  .row {     margin: 0.4rem;     padding: 0.4rem;     border: 1px dashed purple; }  .w10 {     flex: 1 0 0; }  .w20 {     flex: 2 0 0; }  .w70 {     flex: 7 0 0; }  .h20 {     flex: 2 0 0; }  .h40 {     flex: 4 0 0 ; }  .h80 {     flex: 8 0 0; }   3. HTML/CSS 목업 와이어프레임 실습     실습결과 코드는 GitHub 참조.         오늘 느낀 점          ` CSS 진짜로 개어렵다.` 우선 오늘  실습을 해보며 HTML을 이용하여 프레임을짜고, 그 각각의 프레임을 선택자로 구분하여 CSS를 입혀보았다. 우선 답이 없는 영역이다.  HTML로 해당 구성의 프레임을 짜는거까지는 어렵지않았지만 각 선택자에 들어가는 CSS 요소들을 우선 너무 모른다.. 몰라도 너무 몰라서 검색조차 못하는 단계랄까..?? 나아지겠지.. 우선 틀을 짜고 선택자로 해당 요소를 컨택한다는 점에서 만족하고 나중에 다시 CSS는 꾸준히..손에 익혀봐야겠다. (나중엔 라이브러리 쓰겠지…)            git repository와 내 local directory 를 오늘 동기화(?) 시켜보았다. 수업을 들으며 진행하는 예제가 늘어나면서 잡다한(?) repository 및.. 불필요한 fork 된 repository 가 너무 늘었다.  git repository를 뜯어고쳐서 내 작업공간과 유사하게 셋팅을 해놓았다.              내 작업환경과 유사한 git repository 유지가 필요할 듯 하다. 앞으로 점차 늘어갈 프로젝트 및 실습 데이터들을 관리 유지하는것도 자기관리라 생각해야겠다.             내일 할 일     오늘은 생각보다 HTML/CSS 실습에 쫓기고, gitHub 환경셋팅에 쫓겨서 개별학습은 못하였다. 핑계는..   내일 커리큘럼에는 스코프/클로저 개념학습뿐이다. 어려운 개념이라 생각되지만, 오전~오후 시간 중에는 집중해서 빠르게 습득하고, 저녁에는 부족할거라 예상되는 React/DOM 및 blog 이전글 이사도 모두 마쳐볼 예정이다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.03-TIL/",
        "teaser": null
      },{
        "title": "21.08.04 TIL / 1. 원시 자료형&참조 자료형, 2. 스코프, 3. 클로저",
        "excerpt":"    Today I Learnd  1. 원시 자료형과 참조 자료형.    1-1. 원시 자료형.     자바스크립트에서 원시 타입의 데이터(primitive data types; 원시 자료형)는 객체가 아니면서 method를 가지지 않는 6 가지의 타입            string, number,bigint, boolean, undefined, symbol, (null)                 null은 원시 타입과 거의 같게 사용된다고 볼 수 있다. 작동 방식 또한 다른 원시 타입과 같으나, 다만 엄밀하게 따지자면 원시 타입이라고 볼 수 없는 자료형이다.                        원시 자료형은 모두 “하나”의 정보, 즉, 데이터를 담고 있다.  원시 자료형은 값 자체에 대한 변경이 불가능(immutable)하지만, 변수에 다른 데이터를 할당할 수는 있다.       \"hello world!\" \"Hi!\" // \"hello world!\" 와 \"Hi!\"는 모두 변경할 수 없는 고정된 값입니다.  let word = \"hello world!\"  word = \"Hi!\"  // 하지만, word라는 변수에 재할당을 하여 변수에 담긴 내용을 변경은 가능합니다.            1-2. 참조 자료형.          자바스크립트에서 원시 자료형이 아닌 모든 것은 참조 자료형이다. 이런 자료형을 자바스크립트에서는 참조 자료형(reference data type; 참조 타입)이라고도 부른다. 대표적인 참조 자료형으로는 배열([])과 객체({}), 함수(function(){})가 있다.       참조 자료형에는 하나의 데이터가 아닌 여러 데이터가 담기게 된다. 그래서 참조 자료형의 데이터 “값” 자체는 지금까지 배웠던 원시 자료형처럼 1:1로 할당되는 것이 아닌 특별한 데이터 보관함(heap)에 저장됩며, 변수에는 데이터 “값이 위치한곳(메모리 상 주소)”을 가리키는 주소가  저장되게 된다.                     heap은 별도로 관리되며 사이즈 또한 참조 자료형 값에 따라 동적으로 변할수 있다. (고정값은 비효율적인 설계)                                                                  데이터 값               주소                                                               저장위치               heap(동적으로 저장됨)               변수에 할당됨(heap을 가르키는 address)                                                        참조 자료형은 변수에는 주소가 담겨져있기떄문에, 각 변수간에 값을 복사할 경우에 주소가 복사되게 되므로 원본값이 바뀌는 경우가 발생할 수 있다.       let a = [10,20];   let b = a;  // b에 a의 값을 복사한게 아닌, a의 주소가 b에 할당됨. \t \t   b[0]=50;   a; // (2) [50,20] 의 값이 나오게된다.            2. 스코프          예제로 우선 스코프에 대해 알아보자.       let greeting = 'Hello'; function greetSomeone() {   let firstName = 'Josh';   return greeting + ' ' + firstName; } console.log(greetSomeone()); // 'Hello Josh' console.log(firstName); // Reference Error                 greeting 변수는 바깥 스코프에 정의되어 있으므로, 함수 안쪽에서 사용할 수 있다. 반면에, firstName 변수는 함수의 안쪽 스코프에 정의되어 있으므로 함수의 바깥쪽에서는 접근이 불가능하다. 따라서 ReferenceError가 출력된다.                이처럼 변수에 접근할 수 있는 범위가 존재한다. 중괄호(블록) 안쪽에 변수가 선언되었는가, 바깥쪽에 변수가 선언되었는가가 중요한 조건이다. 이 범위를 우리는 스코프라고 부른다.        2-1. 스코프 주요 규칙          첫번째 규칙은, “바깥쪽 스코프에서 선언한 변수는 안쪽 스코프에서 사용 가능한 반면에, 안쪽에서 선언한 변수는 바깥쪽 스코프에서는 사용할 수 없다”라는 점이다.  위의 예제를 통하여 확인해보았다.            두번째 규칙은, “스코프는 중첩이 가능하다”는 것이다, 스코프는 마치 중첩된 울타리와 같다.                     특별히 가장 바깥쪽의 스코프는 전역 스코프(Global Scope)라고 부른다. 그 외의 스코프들은 지역(local) 스코프로 부르며, 전역이 아닌 다른 스코프는 전부 지역 스코프(local scope)이다.                세번째 규칙은, “지역 변수는 전역 변수보다 더 높은 우선순위를 가진다” 이다.        2-2. 스코프의 종류          블록 스코프(block scope) : 중괄호를 기준으로 범위가 구분된다.            함수 스코프(function scope) : function 키워드가 등장하는 함수 선언식 및 함수 표현식은 함수 스코프를 만든다.             화살표 함수는 블록 스코프로 취급된다. 함수 스코프 ( X)            2-3. let, const, var 변수 선언에서 주의할 점     var 키워드로 정의한 변수는 블록 스코프를 무시하고, 함수 스코프만 따른다.            그러나, 모든 블록 스코프를 무시하는 건 아니며, 화살표 함수의 블록 스코프는 무시하지 않는다.                var 키워드로 선언된 전역 변수 및 전역 함수는 window 객체에 속하게 된다.             var myName = 'KJH'; \t     console.log(window.myName);  // KJH                           보통 코드를 작성할 때 블록은 들여쓰기가 적용되고, 그 구분이 시각적으로 분명해서 많은 사람들은 블록 스코프를 기준으로 코드를 작성하고, 생각하기 마련이다. 그러나 var는 이 규칙을 무시하므로, 사용이 권장되지 않는다.                          let       const       var                       유효 스코프 범위       블록 스코프 및 함수 스코프       블록 스코프 및 함수 스코프       함수 스코프                 값 재할당       가능       불가능       가능                 재선언       불가능       불가능       가능               전역 변수는 가장 바깥 스코프에 정의한 변수이다. 따라서, 어디서든 접근이 가능하므로 편리하지만, 다른 함수 혹은 로직에 의해 의도되지 않은 변경이 발생할 수 있다. 이를 부수 효과(side effect) 라 부르며 이를 최소화 하는것이 좋은 프로그래밍 설계 방법이다.                     실수를 방지하기 위해 strict mode를 적용하여 사용할 수 있다 . 브라우저가 보다 엄격하게 작동하도록 만들어주도록 도와준다             'use strict';  // js 파일 상단에 선언, 문법적으로 실수할 수 있는 부분들을 에러로 판단해준다. \t     function showAge() {     age = 90;  // 키워드 없이 변수가 선언되었기 때문에 엄격한 판단에 의해 Error가 발생된다.       console.log(age);   }   showAge();                           유효 범위를 나타내는 스코프는 스코프들간의 유효 범위가 연결리스트 형식으로 관리되는데, 이 스코프간의 상하관계를 스코프 체인 이라 일컫는다.   3. 클로저     MDN에서의 클로저 정의에 따르면, 다음과 같다.      “함수와 함수가 선언된 어휘적(lexical) 환경의 조합을 말한다. 이 환경은 클로저가 생성된 시점의 유효 범위 내에 있는 모든 지역 변수로 구성된다.”       “함수를 리턴하는 함수중, 내부 함수의 리턴값이 외부 함수의 변수에 영향을 미친다면 이를 클로저 함수라 일컫는다.”   3-1. 클로저 함수의 특징  // const adder = x =&gt; y =&gt; x + y; \t // 위의 코드와 동일하게 작동하는 코드. const adder = function(x) {   let result = 0; \treturn function(y) {  // 익명의 클로저 함수(내부 함수의 리턴값이 외부 함수의 변수에 영향을 미친다) \t  result = x + y; \t  return result; \t} }  adder(5)(7);  // 12 typeof adder(5)  // 'function', 리턴값이 함수의 형태이다.\t              위 사진과 같이 클로저 함수는 “내부 함수는 외부 함수에 선언된 변수에 접근 가능하다” 라는 특징을 갖는다            일반적인 함수는, 함수 실행이 끝나고 나면 함수 내부의 변수를 사용할 수 없다. 이와 다르게, 클로저는 외부 함수의 실행이 끝나더라도, 외부 함수 내 변수가 메모리 상에 저장되기에 데이터를 보존할 수 있다. (어휘적 환경을 메모리에 저장하기 때문에 가능하다)       const adder = function(x) {     let result = 0;   return funtion(y) {         result = x + y;         return result;   } }  const add5 = adder(5);   add5(7);  // 12 add5(10);  // 15 \t   const add7 = adder(7); // 여러개의 add를 만드는 것이 가능하다. 재활용이 가능한 adder 함수   add7(8);  / 15                  클로저 함수 내부의 선언된 변수들은 외부에서 접근할 수 없으므로 정보의 접근이 제한이 된다. 이를 캡슐화라 한다. 해당 캡슐화를 통해서 불필요한 전역 변수 사용을 줄일수 있게되며, 스코프를 이용해서 값을 보다 안전하게 다룰 수 있는 강점이 생긴다.            위와 같이 재활용 또한 가능하게 된다. (add5, add7 등 adder() 함수를 재활용하여 여러개의 add 변수를 만드는것이 가능하다.) 이와 같이 함수 재사용성을 극대화하여, 함수 하나를 완전히 독립적인 부품 형태로 분리하는 것을 모듈화라고 한다.       3-2. 클로저 함수의 활용 예시  // const tagMaker = tag =&gt; content =&gt; `&lt;${tag}&gt;%{content}&lt;/${tag}&gt;`  // 위의 코드와 동일하게 작동되는 코드. const tagMaker = function(tag) { \treturn function(content){  // 내부 함수값의 리턴값이 외부 함수의 tag를 활용하는 익명의 클로저 함수 \t\treturn `&lt;${tag}&gt;%{content}&lt;/${tag}&gt;`; \t} }  const divMaker = tagMaker('div'); divMaker('hello'); // tagMaker('div')('hello') 와 같은 구조이다.  // 'div'는 위 함수 `tag 매개변수`의 전달인자가 되며, `hello'는 위 함수 `content 매개변수`의 전달인자가 된다.  const anchorMaker = tagMaker('a'); // 모듈화 되어 재사용에 용이하다. anchorMaker('world');   // &lt;div&gt;hello&lt;/div&gt; // &lt;a&gt;world&lt;/a&gt;      클로저 함수는 내부 함수의 리턴값이 외부 함수의 지역변수를 참조하여 값을 바꾸거나 활용 하는 함수이다.  이렇게 사용시 전달인자로 전달된 tag값이나 content의 값이 새로운 할당이나 선언없이 전달인자로만 전달되어도 함수의 기능을 모두 활용하며 재사용에 용이한 구조로 코드를 구성할 수 있다.         오늘 느낀 점          스코프까지는 그럭저럭 쉽게 개념에 대해 학습하고 이해가되었으나 클로저 함수는 난관이다.   우선 어떻게 활용되는지 감이 안잡힌다. 모듈화를 함으로써 얻어지는 편리함등은 머릿속으로는 이해가 가는데,  이걸 기존의 코드에 활용하여 클로저 함수를 정의하며 해당 코드를 재활용하는 영역까진 오늘 모두 이뤄긴 당연히 힘들거라 생각된다.  와이어프레임을 짠 뒤, 중복되는 분야를 모듈화를 통하여 최대한 걷어낼 수 있게끔 처음부터 설계가 진행되야 깔끔한 코딩이 이뤄진다 예상된다.            클로저 함수 복습하니 9~10시… 후..  기존 블로그 포스트  이사 완료하니 자정이다^^…. ㅃ2 velog   그나저나 어제 git repository 정리를 마치니, github 초기화면도 뭔가 바꿔보고 싶다는 생각이 든다… 우선 이런 잡다한거는 나중에 주말에 몰아서 한번 진행해보도록 해야겠다.             내일 할 일          내일 커리큘럼은 이번주 학습한 내용을 pair와 함께 다양한 실습 코딩 test를 pass해야한다. 좋은 기회라 생각되므로 오늘중 다시한번 이번주 학습 내용을 다잡아야겠다.            DOM에 대한 유튜브 강의는 적은듯하다.. 생활코딩님 게시글도 8년전 흠… 드림코딩님은 우선 DOM키워드 글은 없는듯 하고.. 개념에 대한 글들을 우선 정독해보는정도로 마무리하고 React 클론 코딩등은 게시글들이 많으니 그쪽을 먼저 학습하도록 해야겠다.      ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.04-TIL/",
        "teaser": null
      },{
        "title": "21.08.05 TIL / 1. Spread&Rest 문법, 2. 구조분해 3. JavaScript 핵심문법(스코프, 클로저..) 문제풀이",
        "excerpt":"    Today I Learnd  1. Spread / Reset 문법   1-1. Spread 문법          주로 배열을 풀어서 인자로 전달하거나, 배열을 풀어서 각각의 요소로 넣을 때에 사용한다.       function sum(x,y,z) {   return x+y+z; }    const numbers = [1, 2, 3];    sum(...numbers); // typeof(sum) = 'number'          1-2. Rest 문법            파라미터(함수의 매개변수)를 배열의 형태로 받아서 사용할 수 있습니다. 파라미터 개수가 가변적일 때 유용합니다.       function sum(...theArgs) {   return theArgs.reduce((previous, current) =&gt; {       return previous + current;     }); }    sum(1,2,3);  // 6 sum(1,2,3,4);  // 10           1-3. 배열에서의 Spread 문법          Spread 문법은 배열에서 강력한 힘을 발휘한다.            배열 합치기         let parts = ['shoulders', 'knees'];   let lyrics = ['head', ...parts, 'and', 'toes'];             let arr1 = [0, 1, 2];   let arr2 = [3, 4, 5];   arr1 = [...arr1, ...arr2]; // spread 문법은 기존 배열을 변경하지 않으므로(immutable), arr1의 값을 바꾸려면 새롭게 할당해야 한다.                배열 복사         let arr = [1, 2, 3];   let arr2 = [...arr]; // arr.slice() 와 유사           1-4. 객체에서 사용하기     let obj1 = { foo: 'bar', x: 42 };   let obj2 = { foo: 'baz', y: 13 };      let clonedObj = { ...obj1 };   let mergedObj = { ...obj1, ...obj2 };  // {foo: \"baz\", x: 42, y: 13}      객체의 key의 이름이 중복될 경우 후속 spread 문법을 따르는듯하다.   1-5. 함수에서 나머지 파라미터 받아오기   function myFun(a,b, ...manyMoreArgs) {   console.log(\"a\", a); \tconsole.log(\"b\", b); \tconsole.log(\"manyMoreArgs\", manyMoreArgs); }  myFun(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");   2. 구조 분해 (Destructing)     구조 분해 할당은 Spread 문법을 이용하여 값을 해체한 후, 개별 값을 변수에 새로 할당하는 과정을 말한다.   2-1. 분해 후 새 변수에 할당          배열         const [a, b, ...rest] = [10, 20, 30, 40, 50]; \t   a; // 10 | typeof(a)=\"number\"   b; // 20   rest; // (3), [30, 40, 50] | Array.isArray(rest)=true                객체         const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}; \t   a; // 10   b; // 20   rest; // {c: 30, d: 40}                함수         function whois({displayName: displayName, fullName: {firstName: name}}){     console.log(displayName + \" is \" + name);   } \t   let user = {     id: 32,     displayName: \"KJH\",     fullName: {       firstName: \"JeongHyun\",       lastName: \"KIM\"     }   }; \t   whois(user);  // KJH is JeongHyun           3. JavaScript 문제풀이     풀이 코드는 Github 참조  자바스크립트 핵심문법(클로저,스코프..등등) 문제풀이         오늘 느낀 점          JavaScript 문제풀이중 얕은 복사, 깊은 복사 개념이 머릿속에 들어오지않았다. 우선 해당 개념파악을 하려면 조금더 JS에서 필요한 학습내용이 뒤 따랐다. (Iterable, 재귀함수..등) 이 문제를 가지고 씨름하기보다는 check 해두기 위해 따로 포스팅 카테고리를 만들어두었다. 다음주 중으로 다시한번 필요한 선행 내용 학습후 다시 되짚어보겠다.            Github Repository를 깔끔히 정리하기 위해 CodeStates에서 학습한 내용들은 한 폴더에 묶어 관리하고싶어서 정리를 해두었다. Github 구성이 내 local 영역과 일치하게끔 구성을 한줄 알았다..  그런데 fork 한 repository가 컨트롤이 안되는 문제를 겪었다.       우선 큰 문제점은 fork한 저장소는 원본(원래 Repository 주인)과 연결되어 있다. 라는 전제가 깔려있기 때문인듯 한데, 아직 정확한 내용을 찾지 못하여서 난항중이다.. 폴더를 한폴더에 묶어서 관리하려는건 아직 능숙하지 않기때문에 개별 repository로 다시 fork 하여 구성하였으며, local 영역또한 clone 하여 동일한 환경으로 구성해두었다.  정확히 브런치 부분이 문제인지는 모르겠지만, 브런치 부분을 조금 더 학습 후 다시한번 도전해봐야겠다.            fork 해온 저장소는 나의 작업환경과는 다르기에,  fork -&gt; clone -&gt; npm install 을 거쳐야 동일한 환경에서 결과물을 볼수있다. 이미 학습한 내용인데, 막상 오늘도 fork 하여 clone 하여 local영역에서 작업할 때 package.json 을 활용하지 않는 나의 모습을 보았다. 아직 외부 저장소 파일을 가져와서 작업하는 경우가 적어서 그런듯하니 점차 습관하 하는게 중요할 듯 하다.             내일 할 일     내일의 정규일정은 DOM이다.. 많은 선행학습을 하지 못하여 걱정이다. 우선 한주의 마지막 정규 학습일정이기에, 부족한 부분은 주말통해서 보완할 수 있게끔 노력해야겠다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.05-TIL/",
        "teaser": null
      },{
        "title": "[걸림돌] JavaScript 깊은 복사, 얕은 복사",
        "excerpt":"   [걸림돌] JavaScript 깊은 복사, 얕은 복사  1. 구체적인 문제     객체를 함수의 전달인자로 넘겨줄 경우, 레퍼런스가 전달되는 예제 코드 실습중. 이해가 안간 부분을 우선 포스팅두었다.        참조 자료형은 원시자료형과 다르게 변수명에는 주소값이 할당되며, 변수 내부의 값들은 heap 공간에 저장된다 학습하였다.  아래 코드가 문제가 발생된 요인이다.         const obj = {       mastermind: 'Joker',       henchwoman: 'Harley',       relations: ['Anarky', 'Duela Dent', 'Lucy'],       twins: {        'Jared Leto': 'Suicide Squad',        'Joaquin Phoenix': 'Joker',        'Heath Ledger': 'The Dark Knight',        'Jack Nicholson': 'Tim Burton Batman',       },   };                해당 내용으로 정의된 객체에       const copiedObj = Object.assign({}, obj); \t delete obj.twins['Jared Leto'];           copiedObj 변수를 새로 선언하여, Object.assign() 메소드를 이용하여 obj 객체 값을 복사하였다.        그 후 obj 객체의 twins 키 중 'Jared Leto' 값을 삭제하였다.            내가 예상한 각각 변수의 그림은 아래와 같다.         obj = {  // obj 변수는 copiedObj 변수와 다른 주소를 갖고있다.       mastermind: 'Joker',       henchwoman: 'Harley',       relations: ['Anarky', 'Duela Dent', 'Lucy'],       twins: {         // 'Jared Leto' 키 삭제됨.        'Joaquin Phoenix': 'Joker',        'Heath Ledger': 'The Dark Knight',        'Jack Nicholson': 'Tim Burton Batman',       },   };    copiedObj = {       mastermind: 'Joker',       henchwoman: 'Harley',       relations: ['Anarky', 'Duela Dent', 'Lucy'],       twins: {        'Jared Leto': 'Suicide Squad', // 'Jared Leto' 키 존재함.        'Joaquin Phoenix': 'Joker',        'Heath Ledger': 'The Dark Knight',        'Jack Nicholson': 'Tim Burton Batman',       },   };                하지만 예상과는 다른 결과가 나왔다.       'Jared Leto' in copiedObj.twins  // false           2. 해결방안          참고할 사이트들은 많았으며, 겉핧기식 개념은 머릿속으로는 알았다만 개념에 대해 파고 들수록 재귀함수.. Iterable 까지 알아야 완벽한 학습이 되는 구조인걸 알았다. 우선 다음주 정도에 고차함수 일정에서 재귀함수까지 학습 후 다시 한번 깊은복사와 얕은복사에 대해서 짚고 넘어가야겠다.              참고사이트 1  참고사이트 2             3. Solution      21.08.10 ~ 08.15 사이 고차함수 학습 후 해결예정  ","categories": ["problem"],
        "tags": [],
        "url": "/problem/copy/",
        "teaser": null
      },{
        "title": "21.08.06 TIL / 1. DOM 2. 유효성 검사 실습",
        "excerpt":"    Today I Learnd  1. DOM     DOM( Document Object Model) 은 HTML 요소를 Object(JavaScript Object)처럼 조작(Manipulation)할 수 있는 Model이다. 즉, 자바스크립트를 사용할 수 있으면, DOM으로 HTML을 조작할 수 있다.   1-1. HTML에 JavaScript 적용하기     HTML에 JavaScript를 적용하기 위해서는 &lt;script&gt; 태그를 이용한다. 웹 브라우저가 작성된 코드를 해석하는 과정에서 &lt;script&gt; 요소를 만나면, 웹 브라우저는 HTML 해석을 잠시 추고 &lt;script&gt; 요소를 먼저 실행한다. 즉, &lt;script&gt; 요소는 등장과 함께 실행된다.            &lt;script&gt;요소는 발견즉시 해석되므로 HTML 구문이 모두 해석되기 전 실행될 수도 있다.  정의되지 않은 값이 호출되는 경우 null 이 발생되므로 되도록 HTML 구문이 모두 해석되는 시점인&lt;/body&gt; 앞에 쓰는걸 습관하 하자.           1-2. 부모&amp;자식 엘리먼트 찾기  &lt;html&gt;   &lt;body&gt;     &lt;div id=\"nav\"&gt;       &lt;div class=\"logo\"&gt;&lt;/div&gt;       &lt;div class=\"menu-wrapper\"&gt;         &lt;div class=\"menu\"&gt;&lt;/div&gt;         &lt;div class=\"menu\"&gt;&lt;/div&gt;         &lt;div class=\"menu\"&gt;&lt;/div&gt;         &lt;div class=\"profile-photo\"&gt;&lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;     &lt;div id=\"news-contents\"&gt;       &lt;div class=\"news-content-wrapper\"&gt;         &lt;div class=\"news-picture\"&gt;&lt;/div&gt;         &lt;div class=\"news-title\"&gt;&lt;/div&gt;         &lt;div class=\"news-description\"&gt;&lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;     &lt;div id=\"footer\"&gt;&lt;/div&gt;   &lt;/body&gt; &lt;/html&gt;           위의 HTML 코드를 보고 부모 자식간의 관계를 눈으로 찾는건 그리 어렵지 않은 일이다. 그렇다면 컴퓨터에게 이 사실을 어떻게 전달할까? 자바스크립트에서 DOM은 document 객체에 구현되어 있으므로 브라우저에서 작동되는 자바스크립트 코드에서는, 어디에서나 document 객체를 조회할 수 있다.            DOM 구조를 조회할 때에는 console.dir 이 유용하다.              console.dir 은 console.log 와 달리 DOM을 객체의 모습으로 출력합니다.              객체의 키값쌍 형태로 document.body의 children 키를 확인 가능하다. console.dir(document.body.child)를 이용하여 바로 children 키로 접근 또한 가능하다.            매번 document.body를 통하여 찾아가는 일은 번거로운 일이다. 따로 변수를 선언해서 이 정보를 저장해두는게 편리하다.       let newsContents = document.body.children[1]  // div#news=contents           부모 엘리먼트 또한 변수에 담을수 있다.       let newscontentsParent = newsContents.parentElement;  // body                이렇듯 DOM은 회사의 조직도와 같은 유사한 구조로 구성된다. 이런 자료 구조를 트리구조 라고 하며, 가장 큰 특징은 부모가 자식을 여러개 가질수 있으며, 부모는 하나인 구조가 반복되는 점이다.       2. 유효성 검사 실습.  Github 참조          변수에 querySelector 로 담아온 선택자의 요소를 변경 및 제어하여 동적인 HTML 작성   DOM 구조를 이해하며 javascript로 제어하는 실습. CSS에 시간을 더 할애하였다..         오늘 느낀 점          DOM 을 우선 찍먹정도 하였다. JavaScript &amp; CSS &amp; HTML 이 유기적으로 상호간에 기능/디자인/뼈대 를 담당하여 웹앱(?)을 구성해보았다. 음.. 일단 생각보다 재미있다. 눈으로 보이기때문인가?       아직 부족한 문법(특히 이벤트 핸들러..)은 점차 학습 해나가야겠다.             내일 할 일     주말중 리액트 클론 코딩 완료하기. 이번주 부족했던 클로저, 얕은복사/깊은복사 추가 학습.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.06-TIL/",
        "teaser": null
      },{
        "title": "21.08.10 TIL / 1. 고차함수",
        "excerpt":"  Today I Learnd  1. 고차함수  1-1. 일급 객체          자바스크립트에는 특별한 대우를 받는 일급 객체가 있다. 대표적인 일급 객체 중 하나가 함수이다.                       변수에 할당(assignment) 할 수 있다.         다른 함수의 인자(argument)로 전달될 수 있다.         다른 함수의 결과로서 리턴될 수 있다.                       함수를 변수에 할당할 수 있기 때문에, 함수를 배열의 요소나 객체의 속성값으로 저장할 수 있다. 이는 함수를 데이터(string, number, boolean, array, object)를 다루듯이 다룰 수 있다는 걸 의미한다.               변수에 할당(assignment) 할 수 있다.              이미 함수를 변수에 저장하는 방법(함수 표현식)은 학습하였다.         /*   * 자바스크립트에서 함수는 일급 객체이기 때문에 변수에 저장할 수 있다.   * 함수 표현식은 할당 전에 사용할 수 없다.   */ \t   const square = function (num) {     return num * num;   };      // square에는 함수가 저장되어 있으므로 (일급 객체), 함수 호출 연산자 '()'를 사용할 수 있다.   output = square(7);   console.log(output); // --&gt; 49                위의 함수 표현식(function expression)은 함수 선언식(function declaration)과 다르게 호이스팅(Hoisting)이 적용되지 않습니다.            함수 선언식의 호이스팅에 지나치게 의존하면, 코드의 유지 보수가 쉽지 않다. 코드 리뷰나 디버깅을 할 때, 코드를 위아래로 왔다 갔다 하게 될 수 있게되기 때문이다.       반면에 함수 표현식은 함수의 할당과 실행의 위치에 따라 결과가 달라지기 때문에, 코드의 위치를 어느 정도 예측할 수 있기때문에 직관적이다. 호이스팅을 제외하면, 함수 선언식과 함수 표현식은 크게 차이가 없지만, 함수 표현식의 경우는 함수가 변수에 저장될 수 있다는 사실을 보다 분명하게 보여 준다.       1-2. 고차 함수란?          고차 함수(higher order function)는 함수를 인자(argument)로 받을 수 있고, 함수의 형태로 리턴할 수 있는 함수이다       위에서 보았듯이 함수는 변수에 담길 수 있으며 함수는, 함수를 담은 변수를 인자로 또한 전달받을 수 있다. 마찬가지로, 함수 내부에서 변수에 함수를 할당할 수 있으며 이 변수를 리턴함으로써 함수는 함수 자체를 리턴할수 있게 된다.       이때 다른 함수(caller)의 인자(argument)로 전달되는 함수를 콜백 함수(callback function) 라고 한다.              다른 함수를 인자로 받는 경우            function double(num) {     return num * 2;   } \t   function doubleNum(func, num){     return func(num);   } \t   /*   * 함수 doubleNum은 다른 함수를 인자로 받는 고차 함수이다.   * 위 함수 func는 함수 doubleNum의 콜백 함수이다.   * 아래와 같은 경우, 함수 double은 함수 doubleNum의 콜백 함수이다.   */    let output = doubleNum(double, 4);   console.log(output); // 8                  함수를 리턴하는 경우            function adder(added) {     return function (num) {         return num + added;       };   } \t   /*   * 함수 dder는 다른 함수를 리턴하는 고차 함수이다.   * adder는 인자 한 개를 입력받아서 함수(익명 함수)를 리턴한다.   * 리턴되는 익명 함수는 인자 한 개를 받아서 added와 더한 값을 리턴한다.   */    let output = adder(5)(3);   console.log(output); // 8 \t   // adder가 리턴하는 함수를 변수에 저장할 수 있습니다.   const add3 = adder(3);   output = add3(2);   console.log(output); // -&gt; 5                  함수를 인자로 받고, 함수를 리턴하는 경우            function double(num) {     return num * 2;   } \t   function doubleAdder(added, func) {     const doubled = func(added);       return function (num) {         return num + doubled;       };   } \t   /*   * 함수 doubleAdder의 인자 func는 함수 doubleAdder의 콜백 함수이다.   * 함수 double은 함수 doubleAdder의 콜백으로 전달되었다.   */ \t   doubleAdder(5, double)(3); \t   // doubleAdder가 리턴하는 함수를 변수에 저장할 수 있습니다. (일급 객체)   const addTwice3 = doubleAdder(3, double);   addTwice3(2); // 8           1-3. 내장 고차함수     filter : 배열의 filter 메소드는, 모든 배열의 요소 중에서 특정 조건을 만족하는 요소를 걸러내는 메소드이다. 예를 들어 number 타입을 요소로 갖는 배열에서 짝수만을 걸러내거나, 18 보다 작은 수만을 걸러낼 수 있다. string 타입을 요소로 갖는 배열에서, 길이가 10 이하인 문자열만 걸러내거나, ‘korea’만 걸러낼 수도 있다.       여기서 걸러내는 기준이 되는 특정 조건은 filter 메소드의 인자로 전달된다. 이때 전달되는 조건은 함수의 형태 이므로, filter 메소드는, 걸러내기 위한 조건을 명시한 함수를 인자 로 받기 때문에 고차함수이다.      map : 맵은 배열의 각 요소가 특정 논리(함수)에 의해 다른 요소로 지정(map) 되는 내장 함수이다.     let arr = [1,2,3];  let result = arr.map(function(ele) {    return ele * 2; });  result; // [2,4,6]      하나의 데이터를 다른 데이터로 맵핑(mapping) 할 때 사용된다.      reduce : 배열의 각 요소를 특정 방법(함수)에 따라 원하는 형태로 응축하는 메소드이다.    function joinName(resultStr, user){   resultStr = resultStr + user.name + ', ';   return resultStr; }  let users = [   { name : 'Tim', age : 40 },   { name : 'Satya', age : 30 },   { name : 'Sundar', age : 50 } ];  users.reduce(joinName, '');   2. 고차함수 코플릿     함수들을 입력받아 함수들이 입력된 차례대로 결합된 새로운 함수를 리턴해야 한다.    function square(num) {   return num * num; }  function add5(num) {   return num + 5; }  function mul3(num) {   return num * 3; }  output = pipe(square, add5, mul3); console.log(output(4)); // --&gt; 63       수도코드      num을 매개변수로 가지는 함수로 return 해야 한다.   전달 받는 인자(함수)는 ...spread 문법을 통하여 배열 형태로 전달받는다.   각 함수에는 같은 최초 전달된 num값이 필요하다.  (But, 내부 함수에서 num을 그대로 return 한다면 num값이 변질될 수 있다)   그러므로 내부 함수에 let 키워드로 변수를 선언하여, 함수 스코프 내에서 num을 할당 후 값을 보존한다.   for문으로 ...spread 문법을 통하여 전달받은 배열 안의 함수 인자들을 해석하여 return 해준다.   function pipe(...funcs) {  // spread로 인자(함수)들을 배열 형태로 전달받는다.   return function(num){ // 함수를 리턴한다.     let innerNum = num;  // 최초 num 값으로 첫 함수계산을 시작한다.     for(let i=0; i&lt;funcs.length; i++){  // 외부함수의 매개변수(함수 인자) 탐색       innerNum = funcs[i](innerNum) // 내부 함수의 계산 결과 값을 innerNum에 쌓아 나아감     }     return innerNum;          /* i 인덱스마다 innerNum 값 변화       * i = 0 =&gt; innerNum = 16       * i = 1 =&gt; innerNum = 21       * i = 2 =&gt; innerNum = 63     */   } }         오늘 느낀 점     고차함수 ㅎㅎ;;;;  개념은 알겠다. 우선 오늘 풀어본 문제들로 감은 잡았다..  그게 전부이다. 활용할 수 있을까? 란 생각이 든다. 어서 내꺼로 만드는 노력을 해야겠다.   아침에 풀다 막힌 코플릿을 저녁에도 풀어보았는데 또 막힌다(?). 다시 한번 포스팅까지 해서 복기를 하였다. 머리로 수도코드 등 바로바로 그려지는 단계까지 가질 않는다. 광복절 연휴까지 있어서 주말이 길기때문에, 주말까지 반복 학습이 필요할 듯 하다.         내일 할 일     React 실습이다.. 하 클론코딩 등 준비를 못했다. 부딫혀봐야겠다.  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.10-TIL/",
        "teaser": null
      },{
        "title": "21.08.11 TIL / 1. React",
        "excerpt":"  Today I Learnd  1. React     프론트앤드 개발을 위한 JavaScript 오픈소스 라이브러리.   1-1. 리액트의 3가지 특징     선언형 (Declarative)            코드를 면밀히 뜯어보지 않아도, 코드를 유추할 수 있게 된다.                한 페이지를 보여주기 위해 HTML, CSS, JS로 나눠서 적기보다는, 하나의 파일에 명시적으로 작성할 수 있게 JSX 를 활용한 선언형 프로그래밍을 지향한다.                              컴포넌트 기반 (Component-Based)            컴포넌트(Component) 란 독립적인 단위모듈이다.                리액트는 하나의 기능 구현을 위해 여러 종류의 코드를 묶어둔 컴포넌트를 기반으로 개발한다. 컴포넌트로 분리하면 서로 독립적이고 재사용에 용이하기 때문에, 기능 자체에 집중하여 개발이 가능하게 된다.                              범용성            리액트는 JavaScript 프로젝트 어디든 유연하게 적용될 수 있다.       Facebook 에서 관리되어 안정적이고, 가장 유명하며 리액트의 형제격인 리액트 네이티브 로 모바일 플랫폼까지 지원 가능하다.           1-2. JSX          JSX는 JS와는 유사하며 JS를 확장한 문법이지만, 브라우저가 바로 실행할 수 있는 JavaScript 코드는 아니다. “Babel” 을 이용하여 JSX를 브라우저가 이해할 수 있는 JS로 컴파일하게 되며, 컴파일 된 JS를 통하여 브라우저가 읽고 화면에 렌더링 할 수 있다.       React 에서는 DOM 과 다르게 CSS, jsx 문법만 가지고 웹 애플리케이션을 개발할 수 있게된다. 즉, 컴포넌트 하나를 구현하기 위해서 필요한 파일이 줄어들었고, 한눈에 컴포넌트를 확인하기에 더욱 용이하다.              2. React 기본 문법 실습 : Github 참조            오늘 느낀 점     우선 컴포넌트로 구성된 모듈이 모여져서 만들어진 React 의 기본 문법만 학습하였다. 아직 state, props 의 개념까지 확장이 안되어서 웹사이트라 말하긴 아쉽다. 조금 더 다듬어서 이번주 내로는 리액트에 대한 학습내용을 채워갈 예정이다.         내일 할 일     ~08.17 까진 리액트, 돔, 고차함수 집중  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.11TIL/",
        "teaser": null
      },{
        "title": "21.08.12 TIL / 1. React SPA 2. React Router",
        "excerpt":"  Today I Learnd  1. React SPA (Single Page Application)          과거의 브라우저는 웹사이트 페이지 전체를 로딩하였기 때문에 발생하는 리소스 손실이 컸다 . 하지만 SPA는 페이지 전환 전후에 중복되는 부분은 새로 불러오지 않으며 필요한 부분만 갱신하여 웹페이지를 새로 로딩한다.       SPA 란 즉, 서버로부터 완전한 새로운 페이지를 불러오지 않고 페이지 갱신에 필요한 데이터만 받아 그 정보를 기준으로 현재의 페이지를 업데이트함으로써 사용자와 소통하는 웹 어플리케이션이나 웹 사이트를 일컫는다              1-1. SPA 의 장단점  1. 장점     전체 페이지가 아닌 필요한 부분의 데이터만 받아서 화면을 업데이트 하면 되기 때문에 사용자와의 Interaction에 빠르게 반응한다.   서버에서는 요청 받은 데이터만 넘겨주면 되기 때문에 과부화가 적다.   전체 페이지를 렌더링 할 필요가 없기 때문에 더 나은 유저경험을 제공한다.   대표적인 서비스로는 Youtube, facebook, airbnb, Netflix 등이 있다.   2. 단점     SPA 경우 JavaScript 파일의 크기가 크다(HTML 파일은 거의 비어있고 대부분의 코드는 JavaScript 내부에서 작동한다.), 때문에 첫 화면 로딩 시간이 길어질수 밖에 없다.   검색 엔진 최적화(SEO)가 좋지 않다. 구글이나 네이버 같은 검색 엔진들은 HTML 파일에 있는 자료를 분석하는 방식으로 검색 기능이 구동된다. 하지만 SPA 같은 경우 앞서 말했듯이 HTML 파일은 별다른 자료가 없기 때문에 검색 엔진이 적절히 동작하지 못한다.   1-2. React SPA 실습.  참조 : Github    2. React Router          SPA는 하나의 페이지를 가지고 있지만, 한 종류의 화면만 사용하지는 않는다.              위 사진과 같이 하나의 페이지 이지만 화면전환은 계속 이루어진다. 또한 이 화면에 따라 주소 도 달라지게된다.  이렇게 다른 주소에 따라 다른 뷰를 보여주는 과장을 “경로에 따라 변경한다” 라는 의미로 라우팅(Routing)  이라고 한다. React 자체에는 이 기능이 내장되어 있지 않기떄문에 외부 라이브러리를 이용한다.       2. React Router.     React Router의 주요 컴포넌트는 크게 3가지 이다.            router : &lt;BrowserRouter&gt;       route matchers : &lt;Switch&gt;, &lt;Route&gt; 경로를 매칭해준다.       route changers : &lt;Link&gt; 경로를 변경해준다.                  2-1. React Router 실습.  참조 : Github          오늘 느낀 점     라우터를 이용한 부분 페이지 전환 그로인한 SPA 설계 가능화.   내일 리액트의 꽃인 state, props 학습이다.  내일까지 리액트 주요 문법 학습 후 주말중 리액트는 다시 한번 정리해야겠다.         내일 할 일     ~08.17 까진 리액트, 돔, 고차함수 집중  ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.12-TIL/",
        "teaser": null
      },{
        "title": "21.08.13 TIL / 1.React Props & State",
        "excerpt":"  Today I Learnd  1. React Props &amp; State  1-1. Props vs State     간단하게 언급하고 가자면, props는 외부로 부터 전달받은 값이며, state는 컴포넌트 내부에서 변화하는 값이다.   1-2. Props          컴포넌트의 속성(property)을 뜻한다. props는 변하지 않는 외부로부터 전달받은 값으로, 웹 어플리케이션에서 해당 컴포넌트가 가진 속성에 해당된다.            이 해당 컴포넌트의 속성은 부모 컴포넌트(상위 컴포넌트)로부터 전달받은 값이다.       React 컴포넌트는 JavaScript 함수와 클래스로, props를 함수의 전달인자(arguments)처럼 전달받아 이를 기반으로 화면에 어떻게 표시되는지를 기술하는 React 엘리먼트를 반환한다. 따라서, 컴포넌트가 최초 렌더링될 때에 화면에 출력하고자 하는 데이터를 담은 초기값으로 사용할 수 있다.            props의 자료형은 객체 형태이다. props로 어떤 타입의 값도 넣어 전달할 수 있도록 props는 객체의 형태를 가진다.       또한, props는 외부로부터 전달받아 변하지 않는 값입니다. 그래서 props는 함부로 변경될 수 없는 읽기 전용(read-only) 객체이다. 함부로 변경되지 않아야 하기 때문이다.              읽기 전용 객체가 아니라면 props를 전달받은 하위 컴포넌트 내에서 props 를 직접 수정 시 props를 전달한 상위 컴포넌트의 값에 영향을 미칠 수 있게 된다. 즉, 개발자가 의도하지 않은 side effect 가 생기게 되고 이는 React의 단방향, 하향식 데이터 흐름 원칙(React is all about one-way data flow down the component hierarchy) 에 위배된다.                 props를 사용하는 방법은 아래와 같이 3단계로 구분할 수 있다.              하위 컴포넌트에 전달하고자 하는 값(data)과 속성을 정의한다.       props를 이용하여 정의된 값과 속성을 전달한다.       전달받은 props를 렌더링한다.           function Parent() { {/* 부모 컴퍼넌트 */}   return (     &lt;div className=\"parent\"&gt;       &lt;h1&gt;I'm the parent&lt;/h1&gt;       &lt;Child text={\"I'm the child\"} /&gt;        {/* 1-1. text라는 속성을 선언하고, 이 속성에 문자열 값을 할당하여 Child 하위 컴포넌트에 전달 */}       &lt;Child&gt;I'm the child&lt;/Child&gt;        {/* 1-2. 태그사이에 value 를 넣어 전달할 수도 있다. */}     &lt;/div&gt;   ); }  function Child(props)    {/* 2. 함수에 인자를 전달하듯 props를 자식 컴퍼넌트에게 전달 */}   return (     &lt;div className=\"child\"&gt;       &lt;p&gt;{props.text}&lt;/p&gt;       {/* 3-1. 전달 받은 props를 렌더링. (props는 객체므로 key값 \"text\"를 닷노테이션(dot notation) 방식으로 접근하여 렌더링해준다.) */}       &lt;p&gt;{props.childeren}&lt;/p&gt;       {/* 3-2. 전달 받은 props를 렌더링. (props.children을 이용하면 해당 value에 접근하여 사용할 수 있다.) */}     &lt;/div&gt;   ); }           1-3. State          컴포넌트 내부에서 변할 수 있는 값, 즉 상태는 React State로 다뤄야 한다.            React에서는 state 를 다루는 방법 중 하나로 React에서 제공하는 useState 라는 특별한 함수를 불러와서 사용해야 한다.       import { useState } from \"react\";                체크박스로 컴포넌트 내부에서 상태의 변화를 담아보자.       import React, { useState } from \"react\"; {/* import useState */}  function CheckboxExample() {   const [isChecked, setIsChecked] = useState(false); {/* 새로운 state 변수(isChecked)를 선언 */}   {/* 문법적으로 보면 useState의 리턴값(배열)을 구조 분해 할당한 [isChecked, setIsChecked] 변수 */}    const handleChecked = (event) =&gt; {     setIsChecked(event.target.checked);   };   {/* 핸들러 함수 */}    return (     &lt;div className=\"App\"&gt;       &lt;input type=\"checkbox\" checked={isChecked} onChange={handleChecked} /&gt;         &lt;span&gt;{isChecked ? \"Checked!!\" : \"Unchecked\"}&lt;/span&gt;         {/* isChecked 가 boolean 값을 반환하는 함수기 때문에 삼항연산자를 사용하여 true/false 값을 매칭해준다 */}     &lt;/div&gt;   ); }  export default CheckboxExample;                           위 코드중 useState 함수는 호출시 리턴값은 배열이다. 반환되는 배열의 요소를 살펴보자면, 배열의 0번째 요소는 현재 state 변수이고, 1번째 요소는 이 변수를 갱신할 수 있는 함수이다.             const [state 저장 변수, state 갱신 함수] = useState(상태 초기 값);                                위 코드의 예시대로 React 컴포넌트는 state가 변경되면 새롭게 호출되고, 리렌더링 된다.       이때 React state는 상태 변경 함수(위 예시는 useState함수) 호출로 변경해야 한다. 강제로 변경을 시도하면 , 리렌더링이 되지 않는다거나, state가 제대로 변경되지 않는 side effect 가 발생할 수 있다.       2. React 데이터 흐름          React의 개발 방식의 가장 큰 특징은 페이지 단위가 아닌, 컴포넌트 단위로 시작한다는 점이 가장 큰 특징이다.            데이터의 흐름을 파악할 때에는 부모 컴포넌트에서 props를 이용하여 데이터를 함수의 인자(arguments) 혹은 속성(attributes)처럼 전달 받는 구조로 설계해야한다. 전달하는 주체는 부모이기 때문에 데이터 흐름 방식은 하향식 (top-down)임을 의미한다.       이러한 단방향 데이터 흐름 (One-way data flow) 이라는 키워드가 React를 대표하는 설명 중 하나일 정도이다.            React 에서 데이터를 다룰 때는 컴포넌트들간의 상호 관계와 데이터의 역할, 데이터의 흐름을 고려하여 위치를 설정해야 한다.       3. React Props &amp; States 실습. 참조 : Github         오늘 느낀 점     React props 전달시 부모에서 자식으로 객체로 전달됨.. 조금더 다양한 실습을 해봐야 할듯하다.         내일 할 일          ~08.17 까진 리액트, 돔, 고차함수 집중            HA 이후 포스팅 예정, 부족한 학습에 집중      ","categories": ["TIL"],
        "tags": [],
        "url": "/til/21.08.13-TIL/",
        "teaser": null
      }]
