<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JHLog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 18 Apr 2022 00:03:36 +0900</pubDate>
    <lastBuildDate>Mon, 18 Apr 2022 00:03:36 +0900</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>따라하며 배우는 Nest JS #4</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;p&gt;인프런의 &lt;a href=&quot;https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%8A%94-%EB%84%A4%EC%8A%A4%ED%8A%B8-%EC%A0%9C%EC%9D%B4%EC%97%90%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;따라하며 배우는 NestJS&lt;/a&gt;를 들으며 배운점을 남기고 있다.&lt;/p&gt;

&lt;p&gt;일전의 &lt;a href=&quot;https://jh8459.github.io/til/22.04.13.til/&quot; target=&quot;_blank&quot;&gt;#1&lt;/a&gt; &lt;a href=&quot;https://jh8459.github.io/til/22.04.14.til/&quot; target=&quot;_blank&quot;&gt;#2&lt;/a&gt; &lt;a href=&quot;https://jh8459.github.io/til/22.04.15.til/&quot; target=&quot;_blank&quot;&gt;#3&lt;/a&gt;에서 기초 개념을 학습을 진행했으며 그를 토대로 기본적인 CRUD를 위한 실습또한 함께 진행중이다.&lt;/p&gt;

&lt;p&gt;오늘은 기존 실습한 내용을 주석을 달아가며 복습하였다.&lt;br /&gt; 
해당 코드 내용은 아래에 첨부한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/JH8459/NestJS-BoardApp/blob/c6390d62e699cdecc62ad125ab580db33fdfd31e/src/boards/board.model.ts&quot; target=&quot;_blank&quot;&gt;Board Model 정의하기&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/JH8459/NestJS-BoardApp/blob/3761bb7f6794f7a896142cbf656b8d95f07665b9/src/boards/boards.controller.ts&quot; target=&quot;_blank&quot;&gt;게시물 생성하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 DTO에 대한 내용을 학습한 내용을 간단히 정리하였다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-dtodata-transfer-object란&quot;&gt;1. DTO(Data Transfer Object)란?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;계층간 데이터 교환을 위한 객체이다.&lt;br /&gt;
DB에서 데이터를 얻어 Service나 Controller 등으로 보낼 때 사용하는 객체를 일컫는다.&lt;/p&gt;

&lt;p&gt;또한 DTO는 데이터가 네트워크를 통해 전송되는 방법을 정의하는 객체이다.&lt;/p&gt;

&lt;p&gt;이러한 DTO는 interface나 &lt;strong&gt;class&lt;/strong&gt;를 이용하여 정의 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NestJS 공식문서에서는 클래스를 이용하는 것을 권장하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-dto를-쓰는-이유는-무엇인가&quot;&gt;2. DTO를 쓰는 이유는 무엇인가?&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 유효성을 효율적으로 검사한다.&lt;/li&gt;
  &lt;li&gt;코드를 보다 더 안정적으로 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;TypeScript의 타입으로도 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예로들면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; 요청 메소드로 간단한 게시글을 생성하는 웹 브라우저의 요청이 있다고 가정해보자.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Body&lt;/code&gt;로 전달받은 “게시글 제목”, “게시글 내용” 정도의 Property를 몇군데에서만 사용하겠지만, 실무에서 규모가 큰 프로젝트일 경우 정말 많은 프로퍼티를 여러군데에서 이용할 수도 있다.&lt;/p&gt;

&lt;p&gt;만약 그렇게 많은 곳에서 쓰이는 프로퍼티의 이름을 일괄적으로 바꿔줘야 한다면 해당 프로퍼티를 쓰는 모든 곳의 프로퍼티를 일일히 바꿔줘야하는 불편함이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 경우에 DTO를 사용해서 이러한 불편함을 해소할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;우선 오늘은 DTO에 대해서 알아만 보았다.&lt;/p&gt;

&lt;p&gt;“왜 쓰이는가?”에 대해서는 어느정도 수긍할 수 있다.&lt;br /&gt;
하지만 실제로 눈으로 보며 이해하는 과정을 거쳐야 확실해 질 듯 하다.&lt;/p&gt;

&lt;p&gt;내일은 실제로 게시물 생성을 위한 DTO를 사용해보며 직접 코드로 구현해보는 시간을 가져야 할 듯하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.04.16.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.04.16.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>따라하며 배우는 Nest JS #3</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;p&gt;인프런의 &lt;a href=&quot;https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%8A%94-%EB%84%A4%EC%8A%A4%ED%8A%B8-%EC%A0%9C%EC%9D%B4%EC%97%90%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;따라하며 배우는 NestJS&lt;/a&gt;를 들으며 배운점을 남기고 기록해보려고 한다.&lt;/p&gt;

&lt;p&gt;Node.js의 프레임워크인 Nest JS를 학습하며 이해한점을 기록하며 더 나아가 궁금한 부분에 대해서는 찾아보며 스스로 학습한 점에 대해서도 기록으로 남겨보기 위해 포스팅을 남긴다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-nestjs-모듈&quot;&gt;1. NestJS 모듈&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;모듈은 @Module () 데코레이터(@)로 주석이 달린 클래스이다.&lt;br /&gt;
@Module () 데코레이터는 Nest가 애플리케이션 구조를 구성하는데 사용하는 메타 데이터를 제공한다.&lt;/p&gt;

&lt;p&gt;각 응용 프로그램에는 하나 이상의 모듈(최소 루트 모듈)이 있으며, 그 중 루트 모듈은 Nest가 사용하는 시작점이다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163526133-269d66b5-2893-4ce3-b791-bb0248f1d930.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모듈은 밀접하게 관련된 기능 집합으로써 한 요소를 구성하기 위한 효과적인 방법이다. (기능별로 만든다.  ⇒ ex. 유저 모듈, 주문 모듈, 채팅 모듈 등등)&lt;/p&gt;

&lt;p&gt;같은 기능에 해당하는 것들은 하나의 모듈 폴더안에 넣어서 사용한다. (ex. userController, userService, userEntity ⇒ 모두 같은 기능이기 때문에 userModule 안에 넣어 관리한다.)&lt;/p&gt;

&lt;p&gt;모듈은 기본적으로 &lt;strong&gt;싱글 톤&lt;/strong&gt; 패턴 이므로 여러 모듈간에 쉽게 공급자의 동일한 인스턴스를 공유 할 수 있다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163527022-95b7fd3f-4b56-46f8-8363-ba5926a47677.png&quot; /&gt;&lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;싱글 톤&lt;/strong&gt; 패턴?&lt;/p&gt;

  &lt;p&gt;객체의 인스턴스가 오직 1개만 생성되는 패턴을 의미한다.&lt;br /&gt;
인스턴스가 오직 한 개로만 가져가므로 메모리 측면에서 유리하며 다른 클래스 간에 데이터 공유가 쉽다는 장점이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-nestjs-컨트롤러&quot;&gt;2. NestJS 컨트롤러&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;컨트롤러는 클라이언트에서 서버로 들어오는 요청을 처리하고 클라이언트로 응답을 반환한다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163531253-9608853a-8be1-41c8-a515-e9139974e523.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컨트롤러는 @Controller 데코레이터로 클래스를 데코레이션하여 정의된다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/boards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoardsController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데코레이터는 인자를 Controller에 의해서 처리되는 “경로”로 받는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-핸들러란&quot;&gt;2-1. 핸들러란?&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;핸들러는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Get&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Post&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Delete&lt;/code&gt; 등 데코레이터로 장식 된 컨트롤러 클래스 내의 단순한 메서드이다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/boards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoardsController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;getBoards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This action returns all boards&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;즉, 브라우저에서 들어온 요청은 컨트롤러에서 알맞은 요청 경로(엔드포인트)로 분기해주며 해당 분기로 들어온 요청에 알맞은 할 일(요청 메소드)은 핸들러에서 처리가 되는 구조이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-nestjs-프로바이더란&quot;&gt;3. NestJS 프로바이더란?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;프로바이더는 NestJS의 기본 개념이다.&lt;br /&gt;
대부분의 기본 NestJS 클래스는 서비스, 리포지토리, 팩토리, 헬퍼등 프로바이더로 취급될 수 있다.&lt;/p&gt;

&lt;p&gt;프로바이더의 주요 아이디어는 종속성으로 주입할 수 있다는 것이다. 즉, 객체는 서로 다양한 관계를 만들수 있으며 객체의 인스턴스를 “연결”하는 기능은 대부분 Nest 런타임 시스템에 위임될 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들면 컨트롤러는 웹 브라우저에서 요청이 들어오면 무수히 많은 기능을 수행하며 그를 수행하기 위해 많은 것들을 필요로 한다.&lt;br /&gt;
하지만 필요한 모든 것들을 컨트롤러에서 처리하기엔 너무 방대하다.&lt;/p&gt;

&lt;p&gt;따라서 기능별로 서비스, 리포지토리 등을 통해서 컨트롤러에 해당하는 기능을 넣어(종속성을 주입한다)주는 개념을 통틀어 프로바이더라 일컫는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-nestjs-서비스란&quot;&gt;4. NestJS 서비스란?&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;서비스는 소프트웨어 개발내의 공통 개념이며, NestJS나 JavaScript에서만 쓰이는 개념은 아니다.&lt;/p&gt;

&lt;p&gt;서비스는 @Injectable 데코레이터로 감싸져서 모듈에 제공되며, 이 서비스 인스턴스는 애플리케이션 전체에서 사용될 수 있다.&lt;br /&gt;
서비스는 컨트롤러에서 데이터의 유효성 체크를 하거나 데이터베이스 CRUD가 이뤄지는 부분들을 처리한다.&lt;/p&gt;

&lt;p&gt;NestJS CLI로 생성한 기본 프로젝트를 예로 들면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;Hello World!&apos;&lt;/code&gt; 문자열을 리턴해주는 아래의 부분이 대표적인 서비스라 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello World!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/til/22.04.14.til/&quot; target=&quot;_blank&quot;&gt;따라하며 배우는 Nest JS #2&lt;/a&gt;에서는 NestJS 로직 흐름에 대해서 학습했다면 오늘은 전반적인 부분마다 어떠한 기능을 수행하며 각 부분들이 어떻게 상호 연결되어 동작되는지에 대한 디테일한 부분을 우선 알아보았다.&lt;/p&gt;

&lt;p&gt;각종 예제를 통해서 실제로 코드를 짜봐야 사실 조금 더 와닿을 듯 하다.&lt;/p&gt;

&lt;p&gt;주말을 통해서 CRUD 관련해서 실제로 코드로 구현해보는 시간을 가져야 할 듯하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.04.15.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.04.15.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>따라하며 배우는 Nest JS #2</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;p&gt;인프런의 &lt;a href=&quot;https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%8A%94-%EB%84%A4%EC%8A%A4%ED%8A%B8-%EC%A0%9C%EC%9D%B4%EC%97%90%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;따라하며 배우는 NestJS&lt;/a&gt;를 들으며 배운점을 남기고 기록해보려고 한다.&lt;/p&gt;

&lt;p&gt;Node.js의 프레임워크인 Nest JS를 학습하며 이해한점을 기록하며 더 나아가 궁금한 부분에 대해서는 찾아보며 스스로 학습한 점에 대해서도 기록으로 남겨보기 위해 포스팅을 남긴다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-nestcli로-생성한-프로젝트-기본구조&quot;&gt;1. NestCLI로 생성한 프로젝트 기본구조&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nest new ./&lt;/code&gt; 명령어를 이용하여 폴더 내부에 기본 NestJS 프레임워크 기본 설정을 NestCLI를 통하여 만들었다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163496350-819bacb8-f9c5-4af4-a4a7-19847eb427a3.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본으로 구성된 프로젝트 기본구조를 하나씩 알아보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-1-eslintrcjs&quot;&gt;1-1. .eslintrc.js&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;개발자들이 특정한 규칙을 가지고 코드를 깔끔하게 짤 수있게 도와주는 라이브러리이다.&lt;/p&gt;

&lt;p&gt;타입스크립트를 쓰는 가이드 라인을 제시하며 문법에 오류가 나면 알려주는 역할 등 &lt;strong&gt;코딩 컨벤션&lt;/strong&gt;에 일조하는 역할을 하는 라이브러리이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;코딩 컨벤션?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;읽고 관리하기 쉬운 코드를 작성하기 위한 일종의 코딩 스타일 규약이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-prettierrc&quot;&gt;1-2. .prettierrc&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;eslint와 마찬가지로 코딩 컨벤션에 일조하는 라이브러리이다.&lt;br /&gt;
주로 코드의 형식을 맞추는데 사용한다.&lt;/p&gt;

&lt;p&gt;예를 들어 문자열을 표현할 때 작은 따옴표(‘)를 사용할지 큰 따옴표(“)를 사용할지, indent 값을 2줄 혹은 4줄로 사용할지 등 문법 에러를 찾는 것이 아닌 코드 포맷터의 역할을 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-3-nest-clijson&quot;&gt;1-3. nest-cli.json&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;nest 프로젝트를 위해 특정한 설정을 할 수 있는 json 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-4-tsconfigjson&quot;&gt;1-4. tsconfig.json&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;타입스크립트 컴파일을 어떻게 할 지 설정하는 json 설정 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-5-tsconfigbuildjson&quot;&gt;1-5. tsconfig.build.json&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;tsconfig.json 파일의 연장선 상에 있는 파일이며, build를 할 때 필요한 설정들을 담고있다.&lt;/p&gt;

&lt;p&gt;“exclude”에는 빌드할 때 필요 없는 파일들이 명시되어 있다. (ex. node_modules 등)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-6-packagejson&quot;&gt;1-6. package.json&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;프로젝트의 정보를 정의하고, 의존하는 패키지 버전 정보를 명시하는 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt; 영역에서는 프로젝트의 정보를 정의하고 있으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; 영역에서는 패키지 버전 정보를 담고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-7-src-디렉토리&quot;&gt;1-7. src 디렉토리&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;주요한 기능(API 관련)들이 담겨있는 폴더이다.&lt;/p&gt;

&lt;p&gt;공식문서에서는 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163498889-ac3edc31-2bb3-46de-984a-840984c80bf1.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;app.controller.ts&lt;/strong&gt;: 기본 컨트롤러&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app.controller.spec.ts&lt;/strong&gt;: 컨트롤러에 대한 단위 테스트&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app.module.ts&lt;/strong&gt;: 애플리케이션의 루트 모듈&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;app.service.ts&lt;/strong&gt;: 하나의 방법으로 기본 서비스를 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;main.ts&lt;/strong&gt;: 핵심 방법, NestFactory를 활용해 Nest 애플리케이션 인스턴스를 생성하는 애플리케이션 항목 파일&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-기본-구조에서-살펴보는-nest-로직-흐름&quot;&gt;2. 기본 구조에서 살펴보는 Nest 로직 흐름&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;위와 같이 NestJS CLI로 만든 기본 프로젝트를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run start&lt;/code&gt;로 로컬환경으로 실행 시킨 뒤 확인해보면 다음과 같은 메시지 출력을 확인 할 수 있다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163503262-8e96a8ca-def8-45e8-946e-b44f67344aff.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 메시지가 출력되는 과정을 알아보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NestFactory.create(AppModule);&lt;/code&gt; 구문을 볼 수 있다.&lt;/p&gt;

&lt;center&gt;&lt;img width=&quot;483&quot; alt=&quot;스크린샷 2022-04-15 오전 10 31 03&quot; src=&quot;https://user-images.githubusercontent.com/83164003/163503675-ba87b17f-6859-4b44-9877-b3391d4324c1.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt;로 이동해보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt; 파일로 이동하게 된다.&lt;/p&gt;

&lt;center&gt;&lt;img width=&quot;470&quot; alt=&quot;스크린샷 2022-04-15 오전 10 35 29&quot; src=&quot;https://user-images.githubusercontent.com/83164003/163503932-62d6da09-e491-4e45-a628-07ee085eb46a.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt; 파일에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Module&lt;/code&gt; 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.controller.ts&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.service.ts&lt;/code&gt; 부분을 모두 모듈로 등록하여야 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppModule&lt;/code&gt;로써 사용이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Module&lt;/code&gt;이 등록이 되어야 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;에서 아래와 같이 사용가능하다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controller&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;로 묶여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;에서 사용된다고 이해하고 다음으로 넘어갔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-요청이-들어올-경우-응답을-반환하기까지의-절차&quot;&gt;2-1. 요청이 들어올 경우 응답을 반환하기까지의 절차&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;의 구조만 잠시 파악을 해보았다.&lt;/p&gt;

&lt;p&gt;하지만 서버는 기본적으로 클라이언트의 요청이 들어올 경우 올바른 응답을 반환해주는 구조로 설계가 된다.&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt; 이 어떤 요청을 보냈는지 확인해 네트워크 탭을 통해 확인해 보면 아래와 같다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163505599-800357ee-06a0-4058-9313-e1c53829c33d.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt;은 기본 서버 URL이기 때문에 결국 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 엔드포인트로 &lt;strong&gt;GET&lt;/strong&gt; 메소드 요청을 보냄을 확인하였다.&lt;/p&gt;

&lt;p&gt;그렇다면 서버는 적절한 엔드포인트로 요청 메소드와 함께 요청이 전달받았으니 올바른 응답을 반환해 주어야 한다.&lt;/p&gt;

&lt;p&gt;응답을 반환하는 과정은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.controller.ts&lt;/code&gt;를 들여다 보면&lt;/p&gt;

&lt;center&gt;&lt;img width=&quot;529&quot; alt=&quot;스크린샷 2022-04-15 오전 10 58 59&quot; src=&quot;https://user-images.githubusercontent.com/83164003/163506744-2cd96916-eb88-443a-a340-b6b1a5394dec.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위 파일에서는 엔드포인트 &apos;/&apos;은 생략되어 있다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 엔드포인트로 들어온 &lt;strong&gt;GET&lt;/strong&gt; 메소드가 요청으로 들어올 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getHello&lt;/code&gt; 함수의 리턴값을 응답값으로 넘겨주는 구조로 작성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;값으로 명시된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appService&lt;/code&gt; 를 들여다보면 다음과 같다.&lt;/p&gt;

&lt;center&gt;&lt;img width=&quot;588&quot; alt=&quot;스크린샷 2022-04-15 오전 11 16 08&quot; src=&quot;https://user-images.githubusercontent.com/83164003/163508010-5c3ad81b-fb03-41ea-9fef-9fb3c06f2fff.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결국 이곳에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getHello()&lt;/code&gt; 함수의 리턴값인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;Hello World!&apos;&lt;/code&gt;가 브라우저에 출력이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-2-절차-요약&quot;&gt;2-2. 절차 요약&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;결국 클라이언트의 요청이 들어오는 경우 라우터가 분기되기전 최초 진입점 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;로 진입하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;에서는 루트 모듈인 appModule을 호출하며 이 appModule &lt;strong&gt;Controller&lt;/strong&gt;와 &lt;strong&gt;Service&lt;/strong&gt;가 묶여있다.&lt;/p&gt;

&lt;p&gt;그 후 요청 엔드포인트와 요청 메소드와 일치하는 &lt;strong&gt;Controller&lt;/strong&gt;로 분기되며 알맞은 메소드를 통하여 분기된 API 요청은 올바른 응답값을 반환하기 위해 &lt;strong&gt;Service&lt;/strong&gt;에서 필요한 작업들을 수행해준뒤 클라이언트로 응답을 리턴해주게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;

&lt;p&gt;사실 나는 node.js의 프레임워크로 express.js만 사용해왔기 때문에 구조가 다른부분은 아직 조금 더 학습해 나가며 이해해보려한다.&lt;/p&gt;

&lt;p&gt;하지만 절차적인 구조는 유사함을 많이 느꼈다.&lt;/p&gt;

&lt;p&gt;디테일한 구조적인 차이점은 앞으로 조금 더 학습해가며 이해가 필요한 부분이라 판단된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.04.14.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.04.14.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>따라하며 배우는 Nest JS #1</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;p&gt;인프런의 &lt;a href=&quot;https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%8A%94-%EB%84%A4%EC%8A%A4%ED%8A%B8-%EC%A0%9C%EC%9D%B4%EC%97%90%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;따라하며 배우는 NestJS&lt;/a&gt;를 들으며 배운점을 남기고 기록해보려고 한다.&lt;/p&gt;

&lt;p&gt;Node.js의 프레임워크인 Nest JS를 학습하며 이해한점을 기록하며 더 나아가 궁금한 부분에 대해서는 찾아보며 스스로 학습한 점에 대해서도 기록으로 남겨보기 위해 포스팅을 남긴다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-nest-js란&quot;&gt;1. Nest JS란?&lt;/h3&gt;
&lt;hr /&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/163203015-0fde777a-fc4d-40df-ac0a-074da15439c1.jpeg&quot; width=&quot;50%&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Nest(Nest JS)는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임 워크이다.&lt;/p&gt;

&lt;p&gt;프로그레시브 JavaScript를 사용하고 TypeScript로 빌드되고 완벽하게 지원하며 (개발자가 순수 JavaScript로 코딩 할 수 있음) OOP(Object Oriented Programming), FP(Functional Programming) 및 FRP(Funtional Reactive Programming) 요소를 사용할 수 있게 해준다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-nest-js는-내부적으로-어떻게-구성되어-있나&quot;&gt;2. Nest JS는 내부적으로 어떻게 구성되어 있나?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;내부적으로 Nest는 Express와 같은 강력한 HTTP 서버 프레임 워크를 기본적으로 사용하며 선택적으로 Fastify 프레임 워크를 사용하도록 구성 할 수도 있다. (즉, Nest는 Express를 토대로 만들어졌다 이해 할 수 있다.)&lt;/p&gt;

&lt;p&gt;Nest는 이러한 공통 Node.js 프레임 워크(Express / Fastify) 위에 추상화 수준을 제공하지만 API를 개발자에게 직접 노출한다.&lt;br /&gt;
이를 통해 개발자는 기본 플랫폼에서 사용할 수 있는 수많은 타사 모듈을 자유롭게 사용할 수 있다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-nest-js의-철학&quot;&gt;3. Nest JS의 철학&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Node(및 서버 측 JavaScript)를 위한 훌륭한 라이브러리, 도우미 및 도구가 많이 존재하지만 이들 중 어느것도 아키텍쳐의 주요 문제를 효과적으로 해결하지 못한다.&lt;/p&gt;

&lt;p&gt;Nest는 개발자와 팀이 고도로 테스트 가능하고 확장 가능하며 느슨하게 결합되고 유지 관리가 쉬운 애플리케이션을 만들 수 있는 즉시 사용 가능한 애플리케이션 아키텍쳐를 제공해준다.&lt;/p&gt;

&lt;p&gt;이 아키텍쳐는 Angular에서 크게 영감을 받았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;우선 오늘은 Nest JS의 탄생 배경과 개념에 대해서만 학습하였다.&lt;/p&gt;

&lt;p&gt;또한 앞으로 Nest JS를 사용하기 위해 Nest JS CLI를 설치 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nest new nestjs-test&lt;/code&gt; 명령어로 프로젝트 시작을 위한 기본 구성을 생성 후 구조 파악을 하였다.&lt;/p&gt;

&lt;p&gt;혼자 공부할때와 다르게 이제 회사에 소속되며 앞으로 업무에 쓰일 기술스택 관련한 강의 수강에 드는 비용은 회사 복지 처리가 가능하게 되었다. 👍&lt;/p&gt;

&lt;p&gt;시간을 할애하여 강의를 들은 뒤 간략히 포스팅하며 내것으로 만드는 시간을 가질 수 있도록 노력해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.04.13.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.04.13.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>백엔드 개발자 첫 출근 후기</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/161065431-242199bf-b586-4748-9d3a-eb07b427f34e.png&quot; alt=&quot;Retrospect&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;백엔드-개발자-첫-출근-후기&quot;&gt;백엔드 개발자 첫 출근 후기&lt;/h2&gt;
&lt;p&gt;1월 말 부트캠프 수료 후 2월 한달 간 개인공부 후 3월2일 부터 달려온 구직활동을 이제 마침표를 찍고 오늘 첫 출근을 마쳤다.&lt;/p&gt;

&lt;p&gt;새로운 커리어로 첫 발을 내딘 기분을 짧게나마 줄여 후기로 남겨보려 한다.&lt;br /&gt;
작년 6월부터 시작한 개발 공부의 마침표이기 때문에 사실 짧게 남기기엔 너무 긴 뒷 이야기가 있지만 개발자로써 첫 출근 후 가진 내 마음가짐에 대해서만 짧게 줄여보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;직군은-회사는&quot;&gt;직군은? 회사는?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;우선 직군을 나누자면 백엔드 개발자로 채용이 되었다.&lt;br /&gt;
인재채용 자사 솔루션 업체이며, IT 전문기업은 아니지만 코로나 시국에 맞춰 오프라인 채용 ⇒ 온라인 채용으로 전환점에 서있는 상황으로 보인다 &lt;del&gt;(지극히 주관적인 의견입니다)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;크지 않지만 개발 부서에 대한 조직도와 체계가 있는듯 보였으며 직원 복지나 처우에 대해서는 크게 노력중인 회사로 보였기 때문에 입사를 결정하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;첫-출근-느낀-점&quot;&gt;첫 출근 느낀 점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;개인 랩탑 + 외부 모니터 등 개인 장비를 지급 받고 웰컴 키트를 받았다.&lt;br /&gt; 
사진은 못찍었지만 사원증, 텀블러, 달력, 우산 등이 들어있었다.&lt;/p&gt;

&lt;p&gt;오전에는 개인 맥북 환경 설정만하다 점심시간이 되어버렸다… &lt;del&gt;(맥북 처음 써본다…)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;점심 식사 후 사규 및 사내 복지 시스템(온라인 강의 등 개발서적에 대한 지원은 아낌없이 지원을 한다!)에 대한 안내 교육이 진행되었으며 보안 규약등 내부적으로 지켜야 할 내용에 대하여 간단히 교육 받았다.&lt;/p&gt;

&lt;p&gt;자리로 돌아간 뒤로는 정신없이 내부 연락망 및 메신저 초대 등 사내 인프라 형성을 위한 내용들을 전달받았다.&lt;/p&gt;

&lt;p&gt;그리고 나서 오후 느즈막히 모든 직원들 앞에서 간단한 자기소개 후 시계를 보니 벌써 4시가까이 되었던 것 같다…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 개발업무를 진행하기 전, 자사 솔루션을 운용하는 업체이기 때문에 해당 프로세스를 직접 겪어보며 몸으로 체득하는 시간을 갖는다 안내를 받았다.&lt;/p&gt;

&lt;p&gt;그 후 개발 방향등을 알 수 있는 간단한 스토리보드 및 데이터 스키마에 대한 내용은 다음주 부터 진행된다 생각하면 된다 안내 받으니 벌써 퇴근시간에 가까워졌다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;업무시간을 할애하여 나의 공부를 할 수 있다는 점과 개인의 성장을 위해 회사측에서도 지원을 아끼지 않는다는 점은 정말 좋은 복지라 생각이 들었다.&lt;/p&gt;

&lt;p&gt;앞으로 듣고 싶었던 강의들을 수강하며 개인적인 블로그나 깃헙등에 정리하며 내것으로 만들 수 있도록 노력해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;
&lt;p&gt;아직은 전문적인 업무 지식을 쌓기보다는 조직 문화에 대한 이해와 직원들간의 소통 방법 및 분위기를 파악하는데 많은 시간을 할애 할 듯 하다.&lt;br /&gt;
또한 원하는 강의가 있다면 모든 지원(강의 비용 및 기술 서적 구입 등)을 받을 수 있는 환경에서 💵 💵 을 받으며 공부를 할 수 있는 여건이 구성된다는 점은 우선 양팔 벌려 환영이다.&lt;/p&gt;

&lt;p&gt;일단은 즐겁게 출근 할 수 있는 환경 구성은 보장 받는듯 하여 앞으로 기대가 많이 된다. &lt;br /&gt;
앞으로도 회사에서의 개발자로써 커리어와 개인 기술 블로그 활동또한 꾸준히 같이 진행할 수 있도록 더욱더 노력해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/22.04.01.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/22.04.01.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>&quot;2022 코드스테이츠 3월 커뮤니티 데이&quot; 후기</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/161065431-242199bf-b586-4748-9d3a-eb07b427f34e.png&quot; alt=&quot;Retrospect&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2022-코드스테이츠-3월-커뮤니티-데이&quot;&gt;2022 코드스테이츠 3월 커뮤니티 데이&lt;/h2&gt;
&lt;p&gt;저번 2월에 열린 오프라인 모임에 이어서 3월 커뮤니티 데이 또한 참석하였다.&lt;br /&gt;
이번에는 온라인 화상회의 플랫폼인 게더타운에서 진행이되었는데 행사 후기를 간단히 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2022 코드스테이츠 3월 커뮤니티 데이&lt;/strong&gt;는 3월 31일 20:00시 ~ 22:00시까지(안내문서에서는 22:30까지 였는데…) 게더타운에서 진행되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;주요-프로그램&quot;&gt;주요 프로그램&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/161065732-50e5a406-f98d-49a5-a1e2-28f933153b8d.png&quot; alt=&quot;스크린샷, 2022-03-31 22-25-03&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 네트워킹 그룹을 부여받은 뒤 (지정 장소에서 벗어나면 안된다!) 참여한 코드스테이츠 크루, 진행자, 참석자들과 함께 자유로운 주제로 네트워킹이 진행되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;커뮤니티-소개&quot;&gt;커뮤니티 소개&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;커뮤니티 소개&lt;/strong&gt;는 코드스테이츠 커뮤니티팀 운영진이 커뮤니티 팀이 수강생 &amp;amp; 수료생을 위해 무슨일을 하고 있는지 간략한 소개이후 커뮤니티팀 소개 영상 시청을 하였다.&lt;/p&gt;

&lt;p&gt;(저번 2월 오프라인 알럼나이 커뮤니티 행사 이후 커뮤니티팀에 대한 신뢰도가 많이 높아졌다 😀)&lt;/p&gt;

&lt;p&gt;간단 한 커뮤니티팀 소개 및 행사일정 소개 이후 게더타운 튜토리얼이 진행되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;튜토리얼&quot;&gt;튜토리얼&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;코드스테이츠 커뮤니티에서 하는 일들의 간단한 퀴즈(?)를 풀고 게더타운 간단 조작법을 익혔다.&lt;/p&gt;

&lt;p&gt;(게더타운 처음이라.. 가상 배경도 초라하지 않게 세팅하고 데스크탑 앱도 깔아서 쾌적한 환경에서 실행할 수 있게 준비해두었다 😙!)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://codestates-community.oopy.io/9475683e-3639-4668-b5dc-c17ae45ca030&quot;&gt;게더타운에서 가상 배경 적용하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;네트워킹&quot;&gt;네트워킹&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;본 행사는 &lt;strong&gt;네트워킹&lt;/strong&gt; 부터였다.&lt;br /&gt;
SEB 수강생이 나뿐!? 이였다 AIB, PMB 포지션분들은 각각 두분씩 계셨는데, SEB 포지션분은 나말고는 결석하신듯 하다 🤣&lt;/p&gt;

&lt;p&gt;하지만 각기 다른 직군으로 취업을 희망하시는 분들과 이미 현업에 계신분들의 여러 이야기, 그리고 창업을 결정하신 분들의 고충들을 들을 수 있는 귀중한 시간이었다.&lt;/p&gt;

&lt;p&gt;토론했던 주제 중 인상 깊은 주제를 꼽자면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;b&gt;&quot;창업을 준비하고 있고 실력있는 개발자를 빨리 뽑고 싶습니다. 구직자 입장에서 어떤 채용공고를 눈여겨 보는지 궁금합니다?&quot;&lt;/b&gt;&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 나도 여러군데의 회사를 지원했지만 주니어 개발자로써 &lt;strong&gt;이런 공고만은 피하자&lt;/strong&gt;라는 공고는 있었다.&lt;/p&gt;

&lt;p&gt;첫번째로는 직무 설명이 뚜렷하지 않은 (Ex. 풀스택 개발자 ➡ 웹 서비스 개발) 공고를 보면, 내가 이 회사를 가면 무슨 일을 할지 불명확했기에 되도록 피했던 채용공고였다.&lt;br /&gt;
(여기서 불명확하다는 뜻은 &lt;strong&gt;풀스택&lt;/strong&gt; 개발자가 아니다, &lt;strong&gt;웹 서비스 개발&lt;/strong&gt; 이라는 너무나도 포괄적인 직무 언급을 뜻한다.)&lt;/p&gt;

&lt;p&gt;두번째로는 여러 채용정보 사이트들을 들어가서 봤을 때 현저히 &lt;strong&gt;퇴사율&lt;/strong&gt;이 높다면 해당 채용공고는 피해서 지원하였다.&lt;br /&gt;
이건 따로 언급하지 않아도 될 듯 하다.&lt;/p&gt;

&lt;p&gt;마지막으로는 처우 및 연봉등이다.&lt;br /&gt;
사실 3월 초부터 중순까지 많은 회사를 지원했고 합격 통보 받은 곳도 부족한 나였지만 운이 좋게도 2군데 이상이었다. 😀&lt;/p&gt;

&lt;p&gt;마지막으로 합격이 결정된 곳들 모두 개발자로써 성장하기 좋은 요건들을 갖춘 회사라 생각을 하였고 처우들을 비교하여 입사를 결정하였다.&lt;br /&gt;
채용공고에서 부터 너무 낮은 급여나.. 근무조건이 열악한 곳은 저절로 피했던거 같다.&lt;/p&gt;

&lt;p&gt;해당 경험들을 토대로한 답변을 열심히 드렸던거 같다.&lt;br /&gt;
또한 나 스스로도 다시 앞으로 커리어를 위해서도 생각이 정리되었던 좋은 시간이었다.&lt;/p&gt;

&lt;p&gt;이 질문 외에도 AI 부트캠프 출신으로써 취업을 목표로 어떤 공부를 하고 계신지 (정보처리기사 자격증 취득을 위해 공부하는 분도 계셨다! 👍) 등등 여러 경험담들을 진솔하게 나눌 수 있던 좋은 기회였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;시간이 부족했다.. (22:30까지 였는데 22:00에 종료되었다 😭…)&lt;br /&gt;
준비된 주제들을 모두 얘기를 나누지 못한건 사실 많이 아쉬웠다. (그만큼 열띈 얘기가 오고간거라고 생각한다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;수료 후 취업이 결정되고 (첫 출근 후기는 블로그로 간략히 남길 예정이다 😀) 사실 이렇다 할 목적의식 없이 그냥 기계처럼 알고리즘 1~2문제 풀고 유튜브로 개발동향 영상 보는게 전부였었다.&lt;/p&gt;

&lt;p&gt;이런 고민들이 많던 와중 나와 같은 수료생들은 무슨일을 하고 지낼지 궁금해서 지원하게 되었는데 얻어가는게 많은 하루였다.&lt;/p&gt;

&lt;p&gt;솔직히 코드스테이츠 수료 이후 진짜 나에게 남는건 이런 여러 수료생들과의 소통의 장인것 같다. (마치 동문들이 다시 만나는 소통의 장과 같은…)&lt;br /&gt;
국비지원 교육이라던지 조금 규모가 작은 교육기관을 통해 소프트웨어 개발 교육을 접했다면 이런 소통의 장은 겪어 볼 수 없는 경험이라고 생각한다. &lt;del&gt;(게다가 무료이다 👍)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;저번 오프라인 행사때도 좋은 기억뿐이었는데 앞으로 이런 기회가 있다면 또 참석할 의사는 200%이다.&lt;/p&gt;

&lt;p&gt;저번에도 언급하였지만 &lt;strong&gt;“코드스테이츠 커뮤니티”&lt;/strong&gt; 5기는 꼭 참석해보고 싶다 (2022년 6월 이후 진행할 수 있을거 같다).&lt;/p&gt;

&lt;p&gt;특별한 일이 없다면 온라인 커뮤니티 데이들도 꾸준히 참석해 볼 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/22.03.31.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/22.03.31.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>자주쓰이는 HTTP 메소드 &amp; HTTP 상태 코드</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;p&gt;자주 쓰이는 HTTP 요청 메소드와 요청에 대한 처리 결과값을 나타내는 HTTP 상태 코드를  알아보고 학습한 내용을 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-http-메소드&quot;&gt;1. HTTP 메소드&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/158408637-b2ae60a9-8074-435b-bbe6-4aa4e409c142.png&quot; alt=&quot;logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTP 메소드는 클라이언트가 서버에게 사용자 요청의 목적/종류를 알리는 수단이다.&lt;/p&gt;

&lt;p&gt;최초의 HTTP에서 메소드의 종류는 GET 메소드 하나뿐이었고 그마저도 HTML 문서만 응답해주었지만, 이후 다양한 사용자 요청의 목적과 종류를 알리는 메소드들이 생겨났다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-1-http-메소드-종류&quot;&gt;1-1. HTTP 메소드 종류&lt;/h4&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; : 리소스를 조회하는 용도이다.
    &lt;ul&gt;
      &lt;li&gt;URL(URI) 형식으로 서버 측 리소스를 요청한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HEAD&lt;/strong&gt;: GET과 비슷하지만 메시지 부분(본문)을 제외하고, 상태 줄과 헤더만 반환한다.
    &lt;ul&gt;
      &lt;li&gt;실제 리소스(문서)를 요청하는 것이 아니라, 리소스 정보를 요청한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; : 요청 데이터 처리, 주로 데이터 등록에 사용한다.
    &lt;ul&gt;
      &lt;li&gt;요청 데이터를 HTTP 바디에 담아 웹서버로 전송한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt; : POST와 비슷하지만 리소스를 대체 혹은 갱신 위주로 사용한다.
    &lt;ul&gt;
      &lt;li&gt;통상적으로 보다 세밀한 POST를 더 많이 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt; : 리소스를 일부만 변경하는 용도이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt; : 리소스 삭제하는 용도이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OPTIONS&lt;/strong&gt;: 대상 리소스에 대한 통신 가능 옵션을 설명하는 용도이다. (주로 CORS에서 사용)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CONNECT&lt;/strong&gt;: 대상 자원으로 식별되는 서버에 대한 터널을 설정한다. (주로 사용하지 않는다)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TRACE&lt;/strong&gt;: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행한다. (주로 사용하지 않는다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-http-상태-코드&quot;&gt;2. HTTP 상태 코드&lt;/h3&gt;
&lt;hr /&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/158411952-9a9aa7c9-04b3-461a-97a1-a3b663531867.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;HTTP 상태코드는 클라이언트가 서버에게 요청을 보냈을때 서버는 응답을 보낸다. 그에 대한 응답의 결과를 크게 5개의 범주의 상태코드와 함께 반환하여 보내준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1xx(Informational response) : 서버가 요청을 받았으며 프로세스를 계속하라는 의미&lt;/li&gt;
  &lt;li&gt;2xx(Success) : 서버가 요청을 성공적으로 받았으며 인식하고 수용했다는 의미&lt;/li&gt;
  &lt;li&gt;3xx(Redirection message) : 요청 완료를 위해 추가 작업 조치가 필요하다는 의미&lt;/li&gt;
  &lt;li&gt;4xx(Client error response) : 요청의 문법이 잘못되었거나 요청을 처리할 수 없다는 의미&lt;/li&gt;
  &lt;li&gt;5xx(Server errors) : 서버의 이유로 인해 유효한 요청에 대한 응답을 실패했다는 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-자주-쓰이는-http-상태-코드-종류&quot;&gt;2-1. 자주 쓰이는 HTTP 상태 코드 종류&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;이중 자주 쓰이는 상태코드를 꼽으라면 2xx 성공 코드와 4xx 클라이언트 에러 코드, 그리고 5xx 서버 에러 코드를 자주 볼 수 있는 상태코드라 꼽을 수 있다.&lt;/p&gt;

&lt;p&gt;각 자리수 중에서 대표하는 상태 코드를 꼽아서 정리해보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-2-2xxsuccess-코드&quot;&gt;2-2. 2xx(Success) 코드&lt;/h4&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;200(OK): 서버가 요청을 성공적으로 처리했을 시&lt;/li&gt;
  &lt;li&gt;201(Created):	요청을 성공적으로 처리하였으며 새로운 리소스가 생성되었을때, 일반적으로 POST나 PUT 요청 메소드 이후에 받게 된다.&lt;/li&gt;
  &lt;li&gt;202(Accepted):	서버가 요청을 접수했지만 아직 처리하지는 못했을 때&lt;/li&gt;
  &lt;li&gt;203(Non-Authoritative Information):	요청을 성공적으로 처리했지만 다른 소스에서 수신된 정보를 제공, 검증이 되지 않은 상태&lt;/li&gt;
  &lt;li&gt;204(No Content):	서버가 요청을 성공적으로 처리했지만 콘텐츠가 없을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-2-4xxclient-error-response-코드&quot;&gt;2-2. 4xx(Client error response) 코드&lt;/h4&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;400(Bad Request):	잘못된 문법으로 요청을 보냄&lt;/li&gt;
  &lt;li&gt;401(Unauthorized):	유효하지 않은 권한으로 요청을 보냄(ex. 토큰이 만료 된 이후 로그인이 필요한 API 요청이 들어옴)&lt;/li&gt;
  &lt;li&gt;402(Payment Required):	서버가 요청을 접수했지만 아직 처리하지는 못했을 때&lt;/li&gt;
  &lt;li&gt;403(Forbidden):	서버가 요청을 거부할 때, 클라이언트가 요청한 컨텐츠에 대해 접근할 권한이 없음 (ex. 특정 IP가 차단되었는데 해당 IP로 요청이 들어옴)&lt;/li&gt;
  &lt;li&gt;404(Not Found):	서버가 요청한 URI를 찾을 수 없음, 서버에 존재하지 않는 페이지에 대한 요구를 할 때&lt;/li&gt;
  &lt;li&gt;405(Method Not Allowed):	클라이언트가 보낸 메소드가 해당 URI에서 지원하지 않음 (ex. POST 메소드로만 요청이 가능한데 이를 지키지 않고 GET으로 요청이 들어옴)&lt;/li&gt;
  &lt;li&gt;409(Conflict):	서버가 요청을 수행하는 중에 충돌이 발생했을 때 (ex. 이미 서버에 존재하는 ID값으로 회원가입 요청이 들어옴)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-3-5xxserver-errors-코드&quot;&gt;2-3. 5xx(Server errors) 코드&lt;/h4&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;500(Internal Server Error):	서버에 오류가 발생하여 요청을 수행할 수 없을 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;

&lt;p&gt;사실 HTTP 메소드도 이렇게 많은 종류가 있는 줄 몰랐다. &lt;del&gt;(GET, POST, PATCH, DELETE만 써봄..)&lt;/del&gt;&lt;br /&gt;
조금 규모가 큰 서버를 개발하는 경우에는 다양한 HTTP 메소드를 염두하고 개발을 진행해야 할 듯하다.&lt;/p&gt;

&lt;p&gt;그리고 상태 코드 또한 의미하는 바를 정확히 모르고 그냥 관행처럼 썼다. 
상태 코드를 때에 따라 명확히 사용한다면, 에러 메시지를 적을 이유도 없이 그 의미 전달이 충분히 전달 될 듯 하다라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;자주 사용하는 상태 코드들은 기억해 두는 것이 좋을 듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Mar 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.03.15.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.03.15.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>JWT (JSON WEB TOKEN)</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;JWT&lt;/strong&gt; (JSON Web Token)을 알아보고 학습한 내용을 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-쿠키-vs-세션&quot;&gt;1. 쿠키 vs 세션?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;기본적으로 서버와 클라이언트가 데이터를 주고 받는과정은 웹 상에서 HTTP 프로토콜로 처리된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다만 HTTP 프로토콜 특성에는 &lt;strong&gt;“상태를 유지 않는다. (Stateless)”&lt;/strong&gt;, &lt;strong&gt;“연결을 유지 않는다. (Connectionless)”&lt;/strong&gt; 라는 특성이 존재한다.&lt;/p&gt;

&lt;p&gt;위 두가지 특성때문에 “로그인” 상태를 유지한다는 것은 기본적인 HTTP 환경에서는 많은 어려움이 발생할 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;상태를 유지하지 않고 연결이 유지되지 않는 웹 환경상 로그인 검증이 필요한 API 요청 마다 매번 인증을 해주어야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;따라서 위 불편함을 해소하고자 쿠키와 세션이 등장하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-1-쿠키&quot;&gt;1-1. 쿠키&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;간단하게 말하자면 클라이언트가 웹사이트에 접속 할 때 그 사이트가 사용하게 되는 작은 기록 파일이다.&lt;/p&gt;

&lt;center&gt;&lt;img width=&quot;175&quot; src=&quot;https://user-images.githubusercontent.com/83164003/157880051-3bf9cd6e-c1e7-43cb-bbec-9b51143414e9.png&quot; /&gt;&lt;/center&gt;

&lt;blockquote&gt;
  &lt;p&gt;쿠키 표준안인 RFC 2109에 따르면 쿠키는 300개까지 만들 수 있으며, 최대 크기는 4,096바이트이고, 하나의 호스트나 도메인에서 최대 20개까지 만들 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위에서 언급한 상태를 유지하지 않고 연결을 유지하지 않는 HTTP 특성상 로그인 상태를 유지하려면 로그인 정보를 어딘가에 저장해서 계속 활용해야 할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;그러므로 서버는 최초 로그인시 클라이언트에 로그인정보를 응답할 때 로그인 유저의 인증 정보를 응답 헤더(Cookie)에 저장하여 전달하는 방식으로 로그인 상태를 유지할 수 있게되었다.&lt;/p&gt;

&lt;p&gt;다만, 쿠키에 온전히 아이디와 비밀번호를 그대로 담아 전달하는 방식은 보안 이슈가 발생할 수 있으며, 쿠키는 브라우저마다 쿠키에 대한 지원 형태가 다르므로 브라우저간 공유또한 어렵다는 단점이 명확히 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-세션&quot;&gt;1-2. 세션&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;사실 이 방식또한 쿠키라는 작은 기록 파일에 로그인한 유저의 인증 정보를 담은 뒤 주고 받아 로그인 정보를 계속 유지하는 것까지는 동일하다.&lt;br /&gt;
다만, 쿠키가 탈취되더라도 민감정보를 보호하기 위해 등장한게 세션이다.&lt;/p&gt;

&lt;p&gt;아이디나 비밀번호등 민감정보들은 세션 ID를 달아 특정 서버 내 세션 저장소에 저장하고, 이 세션 ID값을 쿠키에 담아 클라이언트가 쿠키를 요청할 때마다 서버는 세션 저장소에 해당 세션 ID가 있는지 확인 후 있다면 정보와 동일한지 확인 후 반환해주는 과정으로 로그인 검증이 진행이 된다.&lt;/p&gt;

&lt;p&gt;다만 이 세션방식 또한 세션 저장소가 필수적으로 존재해야 하므로 이를 사용하기 위한 비용 증가가 불가피하다. 또한 “매번” 로그인 정보를 담고 있는 세션 저장소를 왔다 갔다하며 세션 ID를 조회하여 로그인 검증이 이뤄저야 하므로 DB 접근 횟수가 자연스레 증가할 수 밖에 없다. 그러므로 당연히 이에 따라 서버의 응답속도 저하는 이뤄질 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;때문에 서버의 메모리나 저장 공간이라는 서버의 자원을 소모한다라는 명확한 단점이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-토큰&quot;&gt;2. 토큰&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;위에서 쿠키를 그대로 활용하는 것과 세션을 사용할 때의 단점을 보완하고자 등장하였다.&lt;/p&gt;

&lt;p&gt;토큰 방식은 사용자가 로그인을 하면 서버에서 토큰을 발행하여 클라이언트로 보내어 브라우저의 저장소(로컬 스토리지, 쿠키 등)에 토큰을 유지시키는 방법이다.&lt;/p&gt;

&lt;p&gt;쿠키를 그대로 활용하는 방법과는 다르게 암호화하여 정보를 저장할 수 있으며, 세션과 다르게 서버에 저장하지 않기 때문에 서버의 비용절감 및 서버의 확장성 또한 향상이 가능하다.&lt;/p&gt;

&lt;p&gt;다만, 이 토큰 방식 또한 요청 헤더에 토큰이 담겨 전달되므로 토큰의 크기가 커질수록 트래픽 크기에 영향을 미칠수 있다. 또한 토큰은 클라이언트에서 관리되므로 브라우저에 스크립트를 삽입해 공격하는 XSS(Cross-Site Scripting)에 취약하다는 단점이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-jwt-란&quot;&gt;2-1. JWT 란?&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157876319-279921b6-3613-4502-bc35-97134d95baf5.png&quot; alt=&quot;스크린샷, 2022-03-11 22-24-35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;SON &lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;T&lt;/strong&gt;oken의 줄임말로 전자 서명 된 URL-safe (URL로 이용할 수있는 문자 만 구성된)의 JSON이다.&lt;/p&gt;

&lt;p&gt;전자 서명은 JSON 의 변조를 체크 할 수 있게되어 있으며, JWT는 속성 정보 (Claim)를 JSON 데이터 구조로 표현한 토큰으로 RFC7519 표준이다.&lt;/p&gt;

&lt;p&gt;JWT는 서버와 클라이언트 간 정보를 주고 받을 때 HTTP 요청 헤더에 JSON 토큰을 넣은 후 서버는 별도의 인증 과정없이 헤더에 포함되어 있는 JWT 정보가 유효한지 검증하여 인증하는 형태로 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157891513-6b9a5e94-7a39-4cf6-ab3d-dabf468b9e9d.png&quot; alt=&quot;99DB103A5A50BD9732FA29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JWT는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;을 기준으로 세 파트로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; : 헤더에는 JWT를 어떻게 검증하는지에 대한 내용이 들어가 있다. (어떤 알고리즘인지, 토큰의 타입 등)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PayLoad&lt;/strong&gt;: 페이로드에는 토큰에 담아서 우리가 보내고자 하는 데이터가 담겨있다.
    &lt;blockquote&gt;
      &lt;p&gt;PayLoad에 담긴 정보의 조각은 &lt;strong&gt;클레임(Claim)&lt;/strong&gt;이라 부르며 키-값쌍으로 이루어져 있다. 또한 PayLoad에는 여러개의 클레임을 담을 수 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt;: 시그니처에는 위 헤더와 페이로드를 합친 문자열을 서명한 값이다. 서명은 헤더의 담긴 알고리즘과 부여된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secret Key&lt;/code&gt;로 생성되어 암호화 되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;HTTP의 비상태성, 비연결성 두가지 특성으로 인해 로그인 정보를 유지시키기 위해 고안된 방법들이 굉장히 많구나라는걸 느꼈다.&lt;/p&gt;

&lt;p&gt;사실 잘 모르고 JWT를 사용하였다. 적절한 유지 방법을 서버 설계시 항상 염두해 두고 개발에 임해야 할 듯하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.03.10.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.03.10.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>Node.js와 웹 브라우저의 차이점</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;

&lt;p&gt;Node.js와 웹 브라우저 모두 자바스크립트를 실행해주는 역할을 한다.&lt;/p&gt;

&lt;p&gt;모두 자바스크립트를 실행해주는 환경이지만 Node.js와 웹 브라우저의 다른점을 알아보고 학습한 내용을 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-nodejs와-웹-브라우저&quot;&gt;1. Node.js와 웹 브라우저&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157400661-66decf60-0422-4320-a80e-80d4bf5194db.png&quot; alt=&quot;스크린샷, 2022-03-09 17-18-05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Node.js와 브라우저 둘 다 자바스크립트 엔진을 내장하고 있기 때문에, 자바스크립트라는 프로그래밍 언어를 기반으로 실행된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;자바스크립트 엔진(JavaScript engine)&lt;/strong&gt; 은 자바스크립트 코드를 실행하는 프로그램 또는 인터프리터이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 두 가지 모두 자바스크립트를 실행하는 환경이라는 사실은 동일하지만 존재 목적이 매우 다르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-nodejs와-웹-브라우저의-차이점&quot;&gt;2. Node.js와 웹 브라우저의 차이점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;존재목적만 두고 보자면 브라우저는 HTML, CSS, JS를 이용하여 웹 페이지를 화면에 띄우는 것이 목적이며 Node.js는 JS를 이용하여 서버 개발 환경을 제공하는 것이 목적이다.&lt;/p&gt;

&lt;p&gt;둘의 차이점을 조금더 자세히 알아보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-1-지원하는-api가-다르다&quot;&gt;2-1. 지원하는 API가 다르다&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157400874-eaade652-dab7-4625-bc32-16c8b14b90e8.png&quot; alt=&quot;API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 API (Application Programming Interface)란 어떤 플랫폼이나 실행 환경 등에서 제공하는 인터페이스이다.&lt;br /&gt;
즉, Node.js 개발자나 웹 브라우저 개발자가 자유롭게 가져다 쓸 수 있는 함수나 객체 등을 일컫는게 API이다.&lt;/p&gt;

&lt;p&gt;우선 웹 브라우저는 위에서 언급하였듯이 웹 페이지에 정보들을 화면에 띄울수 있게 렌더링하는게 목적이므로 UI 관련 API를 브라우저는 지원받는다.&lt;/p&gt;

&lt;p&gt;그리고 Node.js에서는 서버 개발 환경을 구성하기 위해 파일 시스템 접근 혹은 보안에 관련된 API를 지원받아 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API&quot;&gt;웹 브라우저 API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot; https://nodejs.org/docs/latest/api/&quot;&gt;Node.js API&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-2-자바스크립트-엔진이-다르다&quot;&gt;2-2. 자바스크립트 엔진이 다르다&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;위에서 잠깐 언급하였기에 짧게 말하자면 자바스크립트 코드를 실행하는 자바스크립트 엔진이 웹 브라우저와 Node.js는 다르다. (크롬은 예외적으로 Node.js와 동일한 V8 엔진 사용)&lt;/p&gt;

&lt;p&gt;우선 대표적인 웹 브라우저들의 자바스크립트 엔진은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스파이더몽키: 최초의 자바스크립트 엔진. 넷스케이프 내비게이터에서 지원되며 오늘날은 모질라 파이어폭스를 지원&lt;/li&gt;
  &lt;li&gt;V8: 오픈 소스. 덴마크에서 구글이 개발. 구글 크롬의 일부&lt;/li&gt;
  &lt;li&gt;웹킷: 오픈 소스. Nitro가 홍보하고 사파리용으로 애플이 개발&lt;/li&gt;
  &lt;li&gt;차크라: 마이크로소프트 엣지, 익스플로러&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-3-환경-제어-가능-여부가-다르다&quot;&gt;2-3. 환경 제어 가능 여부가 다르다&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Node.js에서는 NVM을 이용하여 사용자가 어떤 버전의 Node.js 버전을 사용할 것인지 쉽게 선택이 가능하다. &lt;br /&gt;
그러나, 웹 브라우저에서는 방문자가 브라우저 환경 제어를 능동적으로 선택할 수 없다.&lt;/p&gt;

&lt;p&gt;크롬을 예로 들자면, 버전을 바꾸기 위해서는 크롬을 업데이트하거나, 재설치를 통해서 버전 변경을해야만 한다.&lt;/p&gt;

&lt;p&gt;그렇기에 자바스크립트는 빠르게 발전하는데 비해, 브라우저 업그레이드는 뒤쳐질 때가 있어 종종 문제가 발생하기도 한다.&lt;/p&gt;

&lt;p&gt;반면 Node.js는 버전 선택이 가능하여 이런 문제에서 자유롭다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-4-사용하는-모듈-표준이-다르다&quot;&gt;2-4. 사용하는 모듈 표준이 다르다&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Node.js에서는 &lt;strong&gt;CommonJS&lt;/strong&gt; 모듈 시스템을 사용하기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require()&lt;/code&gt; 키워드로 모듈을 불러 사용한다.&lt;/p&gt;

&lt;p&gt;반면 웹 브라우저 환경은 ES 모듈 표준을 사용하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; 키워드로 모듈을 불러 사용하는 차이점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;

&lt;p&gt;간단하게 웹 브라우저와 Node.js의 차이점을 살펴보았다.&lt;/p&gt;

&lt;p&gt;둘 다 JS를 사용하지만 둘의 존재목적의 차이로 인하여 완전 다른 서비스임을 알게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Mar 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.03.09.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.03.09.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>Node.js 트래픽이 많아지는 경우 서버 과부화 대응 방법</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157039191-32141e02-51fe-4d34-abeb-02bb8f897dde.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;

&lt;p&gt;프로젝트들을 진행하며 대용량 서비스를 염두하고 서버를 개발해본 경험이 아직없다.&lt;/p&gt;

&lt;p&gt;Node.js 기반의 웹 서버 사용시 트래픽이 많아지는 경우 서버에 걸리는 과부하에 대응 하는 방법들을 학습해 보고 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
우선 Node.js 환경 뿐 아니라 대개의 서버는 중앙 집중형태로 다수의 클라이언트를 위해 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157154569-5c971607-3357-424a-a2d4-e4511c353ecf.png&quot; alt=&quot;server&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;때문에 클라이언트로부터 수많은 요청을 동시에 받으므로 병목현상이 발생하기 쉬우며 이를 대비해 처리 성능에 항상 주목해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-nodejs의-비동기-처리&quot;&gt;1. Node.js의 비동기 처리&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Node.js는 비동기 IO를 지원하며 싱글 쓰레드 기반으로 동작하는 서버이다. &lt;del&gt;(여기서 비동기 처리란? 어떤 코드의 출력이 끝날 때까지 기다려주지 않고 다른 코드를 먼저 실행하는 방식이다.)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157156519-26f217ba-ac29-4128-b318-552f94239f73.png&quot; alt=&quot;eventloop&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-size: 0.75em;&quot;&gt;출처 : &lt;a href=&quot;https://www.nextree.co.kr/p7292/&quot; target=&quot;_blank&quot;&gt;넥스트리&lt;/a&gt;&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;비동기 처리방식은 이벤트 방식으로 풀어낸다.&lt;br /&gt;
클라이언트에서 발생된 요청을 처리하기 위해 이벤트가 발생하며, 서버 내부에 메시지 형태로 전달된다. 이 메시지는 Event Loop에서 처리가 되며 서버는 다음 클라이언트 요청을 다시 받아들인다.&lt;/p&gt;

&lt;p&gt;Event Loop에서 요청 처리가 완료되면 CallBack을 호출하여 처리완료를 서버에 알려준다. 이러한 이벤트 처리는 싱글 쓰레드 기반으로 Event Loop에서 처리되므로 Node.js는 싱글 쓰레드 기반으로 동작한다 일컫는다. 즉, 클라이언트 요청은 하나의 쓰레드 안에서 처리된다.&lt;/p&gt;

&lt;p&gt;그래서 이벤트 호출 측면으로 본다면 비동기로 처리되지만 요청의 작업 단위가 프로세스를 크게 요구하는 요청일 경우에는 쓰레드 하나에서 해당 처리작업이 오래걸리므로 전체 서버 처리에 영향을 미치게된다. (이는 Node.js의 치명적인 약점이다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 Node.js의 Event Loop 처리 과정은 싱글 쓰레드 기반으로 작업이 처리가 되며, 클라이언트의 요청은 비동기 메시지로 처리된다.&lt;/p&gt;

&lt;p&gt;따라서 사용자는 반드시 처리 로직을 비동기로 구현해야 Node.js를 올바르게 활용하는 방법이며, 클라이언트가 요청하는 처리 작업 단위가 CPU를 많이 소모하지 않는 작업이라면 고효율 고성능을 보장해주지만 CPU를 많이 소모하는 작업이라면 Node.js는 알맞지 않은 서버일 수 있다.&lt;/p&gt;

&lt;p&gt;서비스에 알맞는 서버 환경을 구축하는게 바람직한 방향이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PayPal, Netflix, LinkedIn, Groupon 등 전 세계적인 서비스에서 이미 Node.js를 사용하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-트래픽이-많아지는-경우-분산처리&quot;&gt;2. 트래픽이 많아지는 경우 분산처리&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;위에서 언급했듯이 Node.js는 결국 싱글 쓰레드 기반으로 작업이 처리된다.&lt;br /&gt;
아무리 클라이언트에서 많은 요청이 와도, Node.js는 싱글스레드를 통해서 이를 하나씩 처리한다. 때문에, 분산처리가 중요 할 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-클라우드-서비스-환경에서-로드-밸런서-사용&quot;&gt;2-1. 클라우드 서비스 환경에서 로드 밸런서 사용&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;AWS를 예로 들면, &lt;em&gt;로드밸런서&lt;/em&gt; 는 분산 환경을 제공하여 단일 대역으로의 대용량 트래픽이 집중 라우팅되는 것을 방지할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;로드 밸런서가 하는 일?&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;클라이언트의 요청을 여러 대의 서버로 분산시킨다.&lt;/li&gt;
    &lt;li&gt;온라인 상태인 서버에만 요청을 전송하여 신뢰성과 고가용성을 준다.&lt;/li&gt;
    &lt;li&gt;수요에 따라(요청의 양에 따라) 서버를 추가하거나 제거할 수 있는 유연성을 제공해준다.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;대게 로드 밸런서는 Round Robin 알고리즘을 이용하기 때문에 특별한 우선순위 없이 유저/클라이언트의 요청을 들어오는 순서대로 처리한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;클라우드 서비스를 이용할 경우 서버에 부하되는 환경을 고려하여 가상이미지로 서버환경을 만든다.&lt;br /&gt;이때 Auto Scaling을 통해 각각의 적절한 용량의 서버를 생성해주므로 트래픽이 많아져도 대응이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-2-캐싱&quot;&gt;2-2. 캐싱&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;클라이언트에서 자주 요청이되는 내용이 매번 서버를 거쳐 DB에 쿼리를 하는 것은 비효율적이다.&lt;br /&gt;
DB에 있는 데이터에 접근할 때 발생하는 디스크 I/O 작업은 CPU를 상당히 많이 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;때문에 대용량 서비스를 고려한다면 캐싱은 반드시 이뤄져야 한다.&lt;/p&gt;

&lt;p&gt;Node.js에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redis&lt;/code&gt;라던지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lru-cache&lt;/code&gt;같은 모듈을 이용하여 자주쓰이는 요청 결과값들을 메모리에 캐쉬해두고 사용할 수 있다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/157170159-0af5c3a9-2077-4703-8b28-aeb9220a154f.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자주 요청이 들어오는 내용은 쿼리문을 거쳐 DB를 거쳐 답을 가져오지않고 응답속도가 빠른 곳에 캐싱해 두고 DB에 검색하기 전 해당 요청 내용이 캐시에 존재하는지 부터 검색해주기 때문에 서버의 CPU 사용량을 낮추는 결과를 가져온다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;기본적인 내용만 우선 다루어보았다.&lt;br /&gt;
실제 서비스되고 있는 여러 매체들은 더욱 더 다양한 방법으로 트래픽 처리를 시행하고 있다.&lt;/p&gt;

&lt;p&gt;앞으로 배워 나가야 할 부분들이 너무 많다는 점 만 새삼스레 느꼈다.&lt;/p&gt;

&lt;p&gt;국내 웹사이트중 트래픽이 많아 보이는 네이버 메인페이지 트래픽 처리를 어떻게 하는지 &lt;del&gt;(2018년도 글이긴하다..)&lt;/del&gt; [참조 : &lt;a href=&quot;https://d2.naver.com/helloworld/6070967&quot; target=&quot;_blank&quot;&gt;네이버 D2&lt;/a&gt;] 좋은 글이 있어 링크를 남겨둔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Mar 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/03.07.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/03.07.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>&quot;2022 코드스테이츠 알럼나이 네트워킹 데이&quot; 후기</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156393231-44fdf7f5-cb39-4409-b2eb-400efe1fb196.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2022-코드스테이츠-알럼나이-네트워킹-데이&quot;&gt;2022 코드스테이츠 알럼나이 네트워킹 데이&lt;/h2&gt;
&lt;p&gt;코드스테이츠 수료 후 처음으로 오프라인 모임을 가졌다.&lt;br /&gt;
생각보다 너무 좋은 경험이어서 후기로 남겨보려 한다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2022 코드스테이츠 알럼나이 네트워킹 데이&lt;/strong&gt;는 2월 28일 15:00시 ~ 22:00시 &lt;del&gt;(안내문서에서는 16시 부터였는데 ㅠㅠ…)&lt;/del&gt; 까지 서울 조선팰리스 호텔에서 진행되었다.&lt;/p&gt;

&lt;p&gt;백신패스와 더불어 코로나 음성확인서(PCR검사 확인서는 48시간 이내, 신속항원검사 확인서는 24시간 이내 분)를 지참 후 참석이 가능했다.&lt;/p&gt;

&lt;center&gt;&lt;del&gt;덕분에 22년 첫 코로나 검사!.. 😅&lt;/del&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156392075-acb2396a-4be8-4194-830a-39322bc2c074.jpg&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;수료 기간동안 친해진 34기 기수 몇분과 33기 몇몇 분들도 참석한다는 소식을 메신저를 통해 연락하였고, 무조건 참석하기로 결정하였다.&lt;/p&gt;

&lt;p&gt;도착하니 여러가지 코드스테이츠 쇼핑백에 굿즈 패키지(?)들을 웰컴 기프트 처럼 &lt;del&gt;(후드 집엎 👍)&lt;/del&gt;주셨다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156402899-9e230e24-e8ea-4c76-b9cd-9829920275fa.jpg&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;주요-프로그램&quot;&gt;주요 프로그램&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156393571-3ebde042-e295-434d-8e7b-beb5735e9380.png&quot; alt=&quot;image&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 명찰을 부여받은 뒤 지정 테이블을 부여받았다.&lt;/p&gt;

&lt;p&gt;코드스테이츠를 수료하였지만 오프라인으로 같은 수강생들과 팀프로젝트를한 팀원들은 실물로 만나는건 처음이라.. 설레는 마음으로 착석하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;session-1&quot;&gt;Session 1&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Session 1&lt;/strong&gt;은 대부분 아이스 브레이킹 시간으로 테이블에 앉은 초면인 수료생들과 어색함을 풀어가는 시간이었다. 🧑‍🤝‍🧑&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156394838-d9191eba-85ce-4d15-a8c8-9be79778ff92.jpg&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대부분 수료 이후 근황들을 서로 여쭈어 보며 차츰 친해져가는 시간이었다.&lt;/p&gt;

&lt;p&gt;또한, 자신이 가진 고민들을 털어놓으며 테이블에 착석한 인원들과 함께 얘기를 나누는 시간이 있었는데 17기~34기까지 다양한 기수들이 우리 테이블에 있었기에 취업 후 겪는 현실적인 고민들과 취업을 아직 못한 수료생들의 고충들을 서로 대화를 나눌수 있었다.&lt;/p&gt;

&lt;p&gt;수료 이후 취업에 관한 같은 고민을 겪은 선배기수들은 본인들의 경험담을 얘기해주었으며 취업 후 각자 고민을 가진 분들 또한 고민을 공유하면 모두 두손두발 걷어올려 솔루션을 서로 열심히 얘기하는 과정을 통해 테이블이 한결 분위기가 부드러워졌다. 😀&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;저녁-식사-&quot;&gt;저녁 식사 🍴&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;사실 밥 얘기는 그다지 중요하지 않아서 뺄까말까 고민하였지만…&lt;/p&gt;

&lt;center&gt;&lt;span style=&quot;font-size: 2em;&quot;&gt;👍&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;del&gt;정신없이 먹었던 탓에 음식사진은 없..&lt;br /&gt;코스요리 구성만 갤러리에 있다.. 😅&lt;/del&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156397592-2f0126bd-e0f1-47e7-a1bf-8c82b20bb3e8.jpg&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;너무 맛있었다. 재참석의사 200%이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;session-2&quot;&gt;Session 2&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;본 행사는 &lt;strong&gt;Session 2&lt;/strong&gt; 부터였다.&lt;/p&gt;

&lt;p&gt;후원사 소개 이후 네트워킹 시간을 가졌는데 개인적으로 너무 좋았다.&lt;br /&gt;
&lt;del&gt;(100분은 솔직히 너무 짧았다…😂)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;다른 테이블에 계신 수료하며 한번도 얼굴은 못보았지만 메신져로 연락을 주고받았던 같은 수강생분들과 오프라인으로 만나뵐수 있어서 너무너무 좋았다.&lt;/p&gt;

&lt;p&gt;또한, 코드스테이츠 후원 기업의 대표님들과 인사담당자분들 그리고 리드 개발자로 계신 분들까지 참석해주셨으며 자유롭게 질의응답을 할 수 있었다.&lt;/p&gt;

&lt;p&gt;각 업계의 분위기를 엿 볼수 있는 기회가 있었으며 &lt;strong&gt;“업계에서 바라보는 부트캠프 수강생”&lt;/strong&gt;들을 어떻게 생각하시는지 솔직한 질문과 답변을 주고 받을 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;사탕발림이 아닌 솔직하게 답변해주셨던 OO기업의 리드 개발자분에게 다시한번 감사의 인사를 드린다!.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156400137-e9e06664-0bf6-4143-a7e6-1bff5a7e72d7.jpg&quot; alt=&quot;사진_2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;솔직히 학사 이상의 전공자들 또한 수년간 열심히 노력 후 나와 같은 구직을 위한 포지션을 갖는다.&lt;/p&gt;

&lt;p&gt;짧고 굵은 22주간의 경험이 도움은 물론 되었지만, 냉정하게 내 자신을 되돌아 볼 수 있었던 기회를 받은 것 같다.&lt;/p&gt;

&lt;p&gt;내 자신 스스로 부족한 부분이 무엇인지 알고있다.&lt;br /&gt;
이제 3월 한달간은 그 부족한 부분을 최대한 메꿔가며 여러 기업에 입사지원을 해보려 한다.&lt;/p&gt;

&lt;p&gt;그 과정에서 열심히 서류조차 통과못해 괴로울 수도 있고, 면접에서 말문이 막혀 자괴감이 들겠지만 열심히 부딫혀 보려한다.&lt;/p&gt;

&lt;p&gt;열정을 심어준 이번 오프라인 행사가 너무 감사했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;번외-사은품-추첨&quot;&gt;(번외) 사은품 추첨&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;이건 사실 알럼나이 네트워킹 데이와 그다지 연관이없어서 쓸까말까 고민을 많이 했는데 혹시 이 글을 내년이나 추후에 보고 네트워크 데이를 참석을 고민하시는 분이 보면 참석을 독려하고자 글을 쓰기로 결정하였다.&lt;/p&gt;

&lt;p&gt;테이블 번호 추첨을 통해 단체 상품을 후원 기업 측에서 준비해주셨으며, 개인 추첨을 통해 &lt;del&gt;(고가의)&lt;/del&gt; 상품을 코드스테이츠에서 준비해주셨다! 👍&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결론만 말씀드리면 테이블 상품도 받고.. 개인상품도 받았다…!!!&lt;/p&gt;

&lt;center&gt;&lt;del&gt;테이블 단체 상품!&lt;br /&gt; 후원사 &quot;달램&quot; 감사합니다  🙏&lt;/del&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156403456-f70ce587-8f3b-4fc2-b2e0-be763d0b9359.jpg&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;del&gt;개인 상품!&lt;br /&gt;코드스테이츠 감사합니다ㅠㅠ  🙏&lt;/del&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156403454-b8a8bb27-156e-4bea-9884-49f61aedc7b7.jpg&quot; width=&quot;400&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;알럼나이 네트워킹 데이에서 이런 사은품 말고도 이미 충분히 좋았고 감사했는데 덤으로 사은품도 받아가니 너무 기분이 좋았다.&lt;/p&gt;

&lt;p&gt;혹시 이 글을 내년이나 추후에 보고 네트워크 데이를 참석을 고민하신다면 꼭 가보시길 추천드립니다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;한마디로 &lt;strong&gt;“너무 좋았다.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메신저로만 연락하며 얼굴 보기 힘들었던 동료 수강생들&lt;del&gt;(두달간 프로젝트를 했지만 이번 모임에서 처음 보았다..)&lt;/del&gt;을 직접 만나 허심탄회하게 대화를 나눠 볼 수 있어 좋았으며, 여러 후원 기업에서 부트캠프 출신 수강생들을 바라보는 시선을 솔직 담백히 얘기를 나눠 볼 수 있어서 좋았다.&lt;/p&gt;

&lt;p&gt;또한 취업할 기업을 고려할 때 고심해봐야 할 포인트들을 여러 다른 수료생들과 대화를 통해 나 스스로도 정리를 어느정도 할 수 있었던 너무나도 좋은 기회였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;솔직히 이러한 기회가 자주 없다.&lt;br /&gt;
코로나도 코로나지만, 대학교 정규과정과 다르게 호흡이 짧은 부트캠프 특성상 수료생들끼리 쉽게 친해지기가 어렵기 때문이라 생각이 든다.&lt;/p&gt;

&lt;p&gt;앞으로 이런 기회가 있다면 또 참석할 의사는 200%이다.&lt;/p&gt;

&lt;p&gt;또한 &lt;strong&gt;“코드스테이츠 커뮤니티”&lt;/strong&gt; 4기가 지금은 모집이 끝났다던데, 5기는 꼭 참석해보고 싶다.&lt;/p&gt;

&lt;p&gt;만약 취업을 하여 더이상 수강생이 아닌 한 기업의 직원 신분을 얻더라도 이러한 정기적인 모임, 혹은 내 시야를 넓힐 수 있는 이런 활동들은 앞으로도 계속 가져가야겠다는 생각이 든 하루였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/22.03.01.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/22.03.01.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>&quot;2월 스페셜 레처 - 나를 점검하는 이력서 작성법&quot; 강연 후기</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155151814-74ea081a-f38e-45ac-84f3-86995f4eee89.png&quot; alt=&quot;Retrospect&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2월-스페셜-레처---나를-점검하는-이력서-작성법&quot;&gt;2월 스페셜 레처 - 나를 점검하는 이력서 작성법&lt;/h2&gt;
&lt;p&gt;코드스테이츠 수료 후 2월 스페셜 레처 이력서 작성법 강연을 듣고 난 뒤 후기를 간략히 적어보려 한다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스페셜 레처는 “우아한 형제들 X 코드스테이츠” 협력으로 진행되었고 강연자로는 &lt;strong&gt;우아한 형제들 기술이사 신희송&lt;/strong&gt;님께서 진행해주셨다.&lt;/p&gt;

&lt;p&gt;신희송님은 놀랍게도 비전공자 출신이셨다!! &lt;a href=&quot;https://www.jobplanet.co.kr/contents/news-818&quot; target=&quot;_blank&quot;&gt;(2020.08.27 잡플래닛 인터뷰)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;요즘 수료이후 이력서를 매번 다시 쓰고 있다..&lt;br /&gt;
나에겐 꼭 필요한 강연이기도하여서 이번 강연은 꼭 듣기로 마음먹었다. &lt;del&gt;강연일정이 한번 취소된건 비밀..&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;이력서-작성-목적&quot;&gt;이력서 작성 목적&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;간단하다.&lt;br /&gt;
“이력서를 본 뒤, 면접을 보고 싶게끔 해야한다.”&lt;/p&gt;

&lt;p&gt;지원하려는 직군 별 핵심역량이 무엇인지 &lt;strong&gt;키워드&lt;/strong&gt;를 선정 후, 내가 할 수 있는 역량을 이력서에 키워드와 함께 담아내는 것이 중요하다.&lt;/p&gt;

&lt;h3 id=&quot;이력서-레이아웃&quot;&gt;이력서 레이아웃&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;이력서는 보통 아래와 같은 레이아웃으로 작성되는데&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155155488-95292104-bb23-4155-8309-184cad516f83.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
이 중, &lt;strong&gt;(경력사항)&lt;/strong&gt; 부분은 보다 더 상세하게 적기를 권유해주셨다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155155765-5a906464-a820-48bb-b942-5fcac4fa02e0.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;이력서-핵심-포인트&quot;&gt;이력서 핵심 포인트&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;권장하는 레이아웃, 그 중 강조해야할 부분을 조금 더 말씀해주으며 아래와 같다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155154738-c27b035e-277e-416d-94cd-11cc023db4a0.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;깃헙 / 블로그&lt;/li&gt;
  &lt;li&gt;경력사항(신입제외) / 포트폴리오&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;주니어 개발자일수록 &lt;strong&gt;깃헙 / 블로그&lt;/strong&gt;를 굉장히 강조해주셨다.&lt;/p&gt;

&lt;p&gt;강연자님께서 본 블로그중 보기 좋았던 주제들도 언급해주셨다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;스터디 등 회고, 읽은 책 정리, 최신 릴리즈 정리하기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;(압도적 감사…)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;그리고 깃헙을 언급하시면서 리눅스의 아버지인 &lt;strong&gt;리누스 토발즈&lt;/strong&gt;의 깃헙을 언급해주셨다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155158006-45e712d8-e08b-475c-ab08-6f8b50c1381e.png&quot; alt=&quot;스크린샷, 2022-02-22 23-53-00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;직급과 사회적 위치를 고려하지 않고 보아도 1년간 2,488 contributions.. 코딩에 진심인 사람이다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;물론, 저 commit 기록으로만으로 전부를 판단할 수 없다. &lt;br /&gt;
하지만 신입 주니어 개발자라면 퍼포먼스로는 내세울것은 당연히 없다.&lt;/p&gt;

&lt;p&gt;그렇기에 이러한 스스로 &lt;strong&gt;배움에 대한 열의&lt;/strong&gt;가 있는지는 “깃헙 / 블로그”를 통하여 많이 판단한다 말씀해주셨다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그리고 자신이 직무역량을 나타낼 수 있게끔 &lt;strong&gt;경력사항 / 포트폴리오&lt;/strong&gt;를 잘 작성하라 말씀해주셨다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155164373-9034c845-6e97-4a34-aa44-27aca98e775e.png&quot; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155164524-bbe681d0-a0ab-409c-8904-a5852544d29d.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
이 부분은 해당기업에 어울리는 인재상인지 아닌지 알수있는 굉장히 중요한 포인트이므로 보다 더 자세히 서술하여 작성하기를 추천해주셨다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그리고 마지막으로 자기소개서는 담백하게 과장없이 작성하라 말씀해주셨다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155159543-be5dec2f-1ac5-4d2a-848b-82c6a1f8f768.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;“커뮤니케이션으로 성장하는 개발자 OOO 입니다.”&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;만약 커뮤니케이션을 통한 성장한 내용(해커톤 혹은 개발자 커뮤니케이션 활동에 참가하여 성장한 기록 .. 등등)을 증명하지 못한다면, 안쓰느니 못한다!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;이력서-작성시-피해야할-점&quot;&gt;이력서 작성시 피해야할 점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;보유기술, 즉 기술스택을 함부로 쓰거나 남발하지 말라고 &lt;strong&gt;강조 강조 강조&lt;/strong&gt; 해주셨다. &lt;del&gt;(뜨끔..)&lt;/del&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155161805-b5fb51e8-cdb1-41f5-921e-b5b6ce132838.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
사용한 기술스택들은 경력사항에서 프로젝트이던지, 실무경험을 설명할 때 언급하면 자연스럽게 써지니 덕지덕지 뱃지달듯이 보유기술에 업체 로고를 써가며 쓰지 말아달라고 해주셨다.&lt;/p&gt;

&lt;p&gt;나포함 많은 사람들이 실수하는 부분같기도 하다.. 작성한 이력서를 꼭 수정해야겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그 이외에는 절대 &lt;strong&gt;과대포장&lt;/strong&gt;하지 않게끔 조심하라 해주셨다.&lt;/p&gt;

&lt;p&gt;조금의 경험으로 화려하게 포장한 이력들은 면접관들에게 좋은 먹잇감이 될 수 있다.. 명심해야겠다.&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;한마디로 &lt;strong&gt;“너무 좋았다.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;오늘 강연 내용을 정리하시며 이렇게 말씀해주셨다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155165600-381bf8cd-6024-4ebd-b1b7-4c1de15494a9.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
이력서를 작성하고도 6개월 정도라던지 긴 프로젝트가 종료되면 이력서를 갱신하기를 권유해주셨다.&lt;/p&gt;

&lt;p&gt;갑작스러운 이직제안이라던지, 이력서를 갱신하며 내가했던 프로젝트라던지 직무내용을 리마인드하며 정리할 수 있는 좋은 기회라고 말씀해주셨는데 너무 꿀팁🍯  같았다.&lt;/p&gt;

&lt;p&gt;위에서 언급한 내용 이외에도 사전에 작성된 &lt;a href=&quot;https://app.sli.do/event/aipkQYpEZ9SXR8ctVRkAmS/live/questions&quot; target=&quot;_blank&quot;&gt;사전질문&lt;/a&gt;에도 모두 친절히 답해주셨으며 ZOOM에서 채팅으로 무심코 올라온 질문에도 모두 친절히 답을 해주셨다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이번주 내로 다시 이력서를 수정해봐야겠다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/22.02.22.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/22.02.22.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 8일차 - Timezone 수정</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;현재 ALL-CON 프로젝트의 DB 서버는 &lt;strong&gt;AWS RDS&lt;/strong&gt;를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;DB의 서버시간이 맞지 않는 문제가 계속 발생하고 있다.&lt;br /&gt;
DB 서버에 저장되는 &lt;strong&gt;포르테 디 콰트로 콘서트 메타포닉-부산&lt;/strong&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_date&lt;/code&gt;(티켓오픈일) 값은 다음과 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;open_date&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2022-02-22 23:00:00&lt;/td&gt;
      &lt;td&gt;포르테 디 콰트로 콘서트 &lt;메타포닉&gt; - 부산&lt;/메타포닉&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;하지만 인터파크 티켓에서 기재된 티켓오픈일 정보는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154224099-785d11be-21dc-4b9f-b240-77bf0ee109f6.png&quot; alt=&quot;스크린샷, 2022-02-16 17-21-00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;안맞는 시간을 클라이언트에서 강제로 조정해주어서 우선 도메인에서는 정상적으로 보이지만, 근본적인 해결책은 아니였기 때문에 DB 시간문제를 해결하기로 결정하였다.&lt;/p&gt;

&lt;h3 id=&quot;1-보완이-필요한-사항&quot;&gt;1. 보완이 필요한 사항&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;1-1-db-server-시간-안맞음&quot;&gt;1-1. DB Server 시간 안맞음&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;위에서 언급한 대로 DB의 시간 설정이 9시간 맞지 않는다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154257426-7ad705ef-b155-454d-9d1a-97a160f118a7.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;mysql에서 현재 서버의 시간을 가져오는 함수인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select now()&lt;/code&gt; 를 사용시 다음 아래와 같은 서버시간이 출력된다. (현재 시간은 2월 16일 17시 5분경)&lt;/p&gt;

&lt;p&gt;우선 서버 시간 자체가 맞지 않았다.&lt;br /&gt;
현재 서버의 &lt;strong&gt;time_zone&lt;/strong&gt;을 확인해보니 UTC(협정 세계시)인 점을 확인하였다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154258039-72e3fb49-c5c9-4508-8b28-e7ab0b3041f0.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고로 한국의 표준 시간대는 &lt;strong&gt;UTC+9&lt;/strong&gt;이다. &lt;del&gt;(UTC+9의 “+9” 의미가 PLUS 9 였다!)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;정확히 9시간이 협정 세계시와의 차이점으로 발생하고 있었다.&lt;/p&gt;

&lt;h4 id=&quot;1-2-sequelize-orm-db-저장시-시간-안맞음&quot;&gt;1-2. Sequelize ORM DB 저장시 시간 안맞음&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;DB server 외에 Node.js Express 서버 환경에서도 Sequelize ORM을 통하여 DB에 저장할 때 Timezone 설정이 맞지 않는 문제 또한 발생중이다.&lt;/p&gt;

&lt;p&gt;서버의 TimeZone이 맞지 않는 문제 같다.&lt;br /&gt;
해당 부분도 수정이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;2-문제-해결&quot;&gt;2. 문제 해결&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;2-1-aws-rds-mysql-시간-설정&quot;&gt;2-1. AWS RDS mysql 시간 설정&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/premiumsupport/knowledge-center/rds-change-time-zone/&quot;&gt;공식문서&lt;/a&gt;를 통해서 해당 내용이 문제점인지 파악하였다.&lt;/p&gt;

&lt;p&gt;나는 클라이언트 배포를 담당하였기 때문에 RDS와 EC2는 다른 팀원분께서 담당해주셨다. 피드백을 전달하였고 팀원 분께서 RDS 설정을 수정해주셨다.&lt;/p&gt;

&lt;p&gt;RDS 재부팅 후 정상적인  &lt;strong&gt;UTC+9&lt;/strong&gt;  time_zone을 확인하였다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154259305-b575d7e9-e444-4494-8f70-13d2f72039d0.png&quot; /&gt;&lt;/center&gt;

&lt;h4 id=&quot;2-2--sequelize-시간-설정&quot;&gt;2-2.  Sequelize 시간 설정&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; 파일에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TZ&lt;/code&gt; 환경변수를 추가하였다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TZ=Asia/Seoul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;사실 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default timezone in node.js&lt;/code&gt; 키워드로 검색한 결과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TZ&lt;/code&gt;라는 환경변수를 생성하면 Node.js 서버의 Timezone이 바뀔 줄 알았는데 별 영향이 없는듯하다..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;그 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.js&lt;/code&gt; 파일을 수정하여 Timezone을 설정해 주었다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155133723-64ffd8fd-1f9f-4e66-ad9c-7b66a9ee0d40.png&quot; /&gt;&lt;/center&gt;

&lt;h3 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;RDS&lt;/strong&gt; time_zone 설정과 &lt;strong&gt;Sequelize&lt;/strong&gt; timezone 설정을 바꾸어 주었다.&lt;/p&gt;

&lt;p&gt;다만, 기존 DB들이 저장된 시간값이 바뀌진 않기에 기존 DB는 수동으로  시간값을 수정해주어야 할 듯 하다.&lt;/p&gt;

&lt;p&gt;다만 실제로 웹에서 서비스되는 HTTP 환경에서는 시간이 맞지 않는다..&lt;br /&gt;
아래의 Resonse Header를 확인해보면 (현재 시간은 &lt;strong&gt;02월22일 21:54&lt;/strong&gt; 이다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155144617-60a2f5bd-7cec-4f99-b077-336e6450122f.png&quot; alt=&quot;스크린샷, 2022-02-22 21-55-23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때문인지 클라이언트에서는 &lt;strong&gt;Date 객체&lt;/strong&gt;의 시간값을 제대로 읽어내지 못하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Date&quot; target=&quot;_blank&quot;&gt;검색&lt;/a&gt;한 결과 HTTP에서 서버의 응답 시간은 항상 지역 시간이 아닌 GMT(Greenwich 표준시)로 표현된다는 사실을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;결국 Node.js 서버와 RDS에서 시간을 Asia/Seoul값으로 바꾸어 주어서 DB에는 시간값이 잘 저장되지만, HTTP 환경으로 배포된 클라이언트에서는 GMT 시간대로 표현되기에 Date 객체의 시간이 맞지 않았다.&lt;/p&gt;

&lt;p&gt;때문에 9시간을 더해주어서 DB에 저장된 시간값을 정상적으로 표현할 수 있도록 코드를 수정해주었다.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.16.Project/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.16.Project/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>Sequelize Op</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152718557-af87a691-a231-4f0f-a603-a478fe17e795.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;

&lt;p&gt;시퀄라이즈는 SQL문을 JavaScript 환경에서 객체로 작성할 수 있는 ORM(Object Relational Mapping)이다.&lt;/p&gt;

&lt;p&gt;여러 문법중 Op라는 연산자를 사용하는 문법에 대해 학습한 내용을 정리해 보았다.&lt;/p&gt;

&lt;h3 id=&quot;1-op&quot;&gt;1. Op&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Op 연산자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt;객체 안에서 쓰이는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Glossary/Symbol&quot;&gt;Symbol&lt;/a&gt; 타입의 연산자이다.&lt;/p&gt;

&lt;p&gt;해당 연산자를 사용하여 복잡한 비교 연산을 지원해준다.&lt;/p&gt;

&lt;h4 id=&quot;1-1-연산자일반&quot;&gt;1-1. 연산자(일반)&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;공식문서에서 설명하는 연산자는 다음 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Logical operator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (a = 5) &amp;amp;&amp;amp; (b = 6)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (a = 5) || (b = 6)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Basics&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// = 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// != 20&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// IS NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// IS NOT TRUE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (someAttribute = 5) OR (someAttribute = 6)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Using dialect specific column identifiers (PG in the following example):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;user.organization_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// = &quot;user&quot;.&quot;organization_id&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Number comparisons&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;gt; 6&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;gt;= 6&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;lt; 10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;lt;= 10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// BETWEEN 6 AND 10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NOT BETWEEN 11 AND 15&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Other operators&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;SELECT 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;gt; ALL (SELECT 1)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// IN [1, 2]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NOT IN [1, 2]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// LIKE &apos;%hat&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notLike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NOT LIKE &apos;%hat&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// LIKE &apos;hat%&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// LIKE &apos;%hat&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// LIKE &apos;%hat%&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iLike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ILIKE &apos;%hat&apos; (case insensitive) (PG only)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notILike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NOT ILIKE &apos;%hat&apos;  (PG only)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;^[h|a|t]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// REGEXP/~ &apos;^[h|a|t]&apos; (MySQL/PG only)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notRegexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;^[h|a|t]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// NOT REGEXP/!~ &apos;^[h|a|t]&apos; (MySQL/PG only)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iRegexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;^[h|a|t]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ~* &apos;^[h|a|t]&apos; (PG only)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notIRegexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;^[h|a|t]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// !~* &apos;^[h|a|t]&apos; (PG only)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ANY ARRAY[2, 3]::INTEGER (PG only)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;to_tsquery&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fat &amp;amp; rat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// match text search for strings &apos;fat&apos; and &apos;rat&apos; (PG only)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In Postgres, Op.like/Op.iLike/Op.notLike can be combined to Op.any:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// LIKE ANY ARRAY[&apos;cat&apos;, &apos;hat&apos;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;1-2-연산자범위&quot;&gt;1-2. 연산자(범위)&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;범위 연산자 또한 지원하여 다양한 종류의 범위를 쿼리할 수 있다.&lt;br /&gt; 
공식문서에서 설명하는 범위 연산자는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// @&amp;gt; &apos;2&apos;::integer  (PG range contains element operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// @&amp;gt; [1, 2)        (PG range contains range operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contained&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// &amp;lt;@ [1, 2)        (PG range is contained by operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overlap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// &amp;amp;&amp;amp; [1, 2)        (PG range overlap (have points in common) operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adjacent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// -|- [1, 2)       (PG range is adjacent to operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strictLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// &amp;lt;&amp;lt; [1, 2)        (PG range strictly left of operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strictRight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;gt;&amp;gt; [1, 2)        (PG range strictly right of operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noExtendRight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;amp;&amp;lt; [1, 2)        (PG range does not extend to the right of operator)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noExtendLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &amp;amp;&amp;gt; [1, 2)        (PG range does not extend to the left of operator)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-3-연산자-조합&quot;&gt;1-3. 연산자 조합&lt;/h4&gt;
&lt;hr /&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rank &amp;lt; 1000 OR rank IS NULL&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// createdAt &amp;lt; [timestamp] AND createdAt &amp;gt; [timestamp]&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Boat%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;%boat%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// title LIKE &apos;Boat%&apos; OR description LIKE &apos;%boat%&apos;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; 조건 객체에서 연산자들끼리의 중복 사용또한 가능하다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;조건 객체에서 별 다른 연산자로 엮어주지 않고 속성을 나열한다면 AND로 간주된다.&lt;/li&gt;
  &lt;li&gt;연산자안에서 여러 컬럼을 다루는 경우에는 각 컬럼에 대한 조건을 담은 객체의 배열로 작성해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;항상 느끼지만 시퀄라이즈 공식문서는 너무 불친절..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;공식문서에서는 자세한 사용 방식을 안내하기보다는 다양한 예시를 제공해 준 뒤, 이에 맞춰 사용자가 찾아서 써라(?)라는 느낌을 많이 받았다.&lt;/p&gt;

&lt;p&gt;매번 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctril + f&lt;/code&gt; 로 검색하여 찾아 쓰기 귀찮아서 정리해보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.02.15.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.02.15.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 7일차 - 티켓 오픈 임박예정 콘서트 정보만 보여주기</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;현재의 콘서트 정렬 방식은 &lt;strong&gt;조회수순&lt;/strong&gt;, &lt;strong&gt;임박예정순&lt;/strong&gt;, &lt;strong&gt;최신순&lt;/strong&gt; 3가지이다.&lt;br /&gt;
그 중, 임박예정순 경우 티켓오픈일이 가까운 순으로 정렬을 하고 있는데 모든 콘서트가 아닌, 티켓팅이 가능한 콘서트들로만 추려서 보여주는 방식으로 바꿔보려 한다.&lt;/p&gt;

&lt;h3 id=&quot;1-보완이-필요한-사항&quot;&gt;1. 보완이 필요한 사항&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154183554-665b74d4-52fb-4ad9-a5b4-46c601b2333b.gif&quot; alt=&quot;near&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재는 티켓 오픈이 임박한 콘서트 외에도 너무 많은 콘서트 정보들이 불필요하게 보여지고 있다는 피드백을 전달 받았다.&lt;/p&gt;

&lt;p&gt;현재 기준으로 티켓팅이 가능한 상태의 콘서트 데이터들로만 추려서 보여지게끔 바꾸어보려 한다.&lt;/p&gt;

&lt;h3 id=&quot;2-문제-해결&quot;&gt;2. 문제 해결&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;2-1-sequelize-op-연산자를-이용한-데이터-추출&quot;&gt;2-1. Sequelize Op 연산자를 이용한 데이터 추출&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 콘서트 DB 정보중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_date&lt;/code&gt;는 아래와 같이 날짜객체로 저장하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154183947-f18974a6-c137-4ea6-8498-92644ddccaa9.png&quot; alt=&quot;스크린샷, 2022-02-16 11-19-24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇기에 티켓 오픈일자가 지났는지 여부를 비교하려면 같은 날짜 객체끼리 비교해야 유의미한 비교 결과가 나온다.&lt;br /&gt;
비교를 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequelize&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; 조건문을 통하여 필요한 데이터를 추릴 수 있으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequelize.Op&lt;/code&gt;를 사용하면 보다 더 복잡한 조건문을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// &amp;gt;= 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequelize&lt;/code&gt; 공식 문서를 통해 위 연산자를 사용하였으며 날짜간의 대소 비교 또한 적절히 사용이 가능하였다.&lt;/p&gt;

&lt;h3 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;수정된 Controller 부분은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154184798-af995973-9409-47f5-9e12-53fd327bc023.png&quot; alt=&quot;스크린샷, 2022-02-16 11-27-56&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Op.gte&lt;/code&gt; 메소드로 티켓 오픈일이 임박한 콘서트 들로만 추려서 데이터 값을 보내주고 있다.&lt;br /&gt;
정렬 또한 1순위는 임박예정순으로 보여지며, 티켓 오픈일시가 같은 콘서트 같은 경우에는 2순위로 조회수 순으로 정렬을 해주고 있다.&lt;/p&gt;

&lt;p&gt;티켓 오픈일이 지난 콘서트들은 목록에서 보여지지 않기 때문에 임박이 예정된 콘서트 정보만 볼 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154185416-cbcac13f-38e4-4f15-851d-5a48752cf4ec.gif&quot; alt=&quot;near2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;매번 조건식을 작성 할 때 마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequelize&lt;/code&gt; 공식 문서에서 조건 비교를 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Op&lt;/code&gt; 연산자에 대해 검색하여 쓰고 있다.&lt;br /&gt; 
이번 기회를 빌어 학습 한 내용을 정리한 뒤 블로그에 남겨보도록 해야겠다.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.15.Project/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.15.Project/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 6일차 - Articles 테이블 스키마 수정(2)</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;ALL-CON에서는 한달간의 콘서트 정보만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allConcerts&lt;/code&gt; 배열에 담아 보여주고 있다.&lt;br /&gt;
한달이 지나게되면 콘서트 정보중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;으로 비활성화되어 서버에서 보여주지 않고 있다. &lt;del&gt;(콘서트 삭제는 관련 댓글 및 게시글들이 모두 삭제되므로 비활성화를 선택)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154025834-c3427f3f-4758-4c4a-bc77-4c219faa9844.png&quot; alt=&quot;스크린샷, 2022-02-15 17-45-59&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기존에는 콘서트가 비활성화 될 시 관련 게시글은 조회수를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-999999&lt;/code&gt; 음수값으로 강제로 할당하여 조회수로 검색시 맨 뒤로 나열되게끔 수정해주었으나 만약 불순한(?) 목적으로 조회수를 올리거나 시간이 오래지나 조회수가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 이상의 양수값으로 전환된다면 올바르지 않은 결과가 초래되므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt; 컬럼값을 추가해 비활성화 해주기로 했다.&lt;/p&gt;

&lt;h3 id=&quot;1-보완이-필요한-사항&quot;&gt;1. 보완이 필요한 사항&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블의 현재 스키마는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154025162-0730e711-8b2f-4946-962b-b5b3ab09d166.png&quot; alt=&quot;스크린샷, 2022-02-15 17-44-23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블 컬럼중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt; 컬럼값을 추가하고,  서버에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodeSchedule&lt;/code&gt;을 통하여 1일 1회 티켓 발매 후 한달이 지난 콘서트들은 비활성화를 시키는데 해당 콘서트에 종속된 게시글들 또한 모두 비활성화 진행이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;2-문제-해결&quot;&gt;2. 문제 해결&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;2-1-sequelize-model-파일-스키마-수정--addcolumn-함수를-통한-마이그레이션&quot;&gt;2-1. Sequelize Model 파일 스키마 수정 &amp;amp;&amp;amp; addColumn() 함수를 통한 마이그레이션&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;어제 학습한 내용대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addColumn()&lt;/code&gt; 함수를 통해 마이그레이션으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블의 스키마를 수정해주었다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BOOLEAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;초기값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;로 설정 (티켓 오픈 후 한달이 지난 콘서트 게시글은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;로 비활성화 된다.) , 데이터 타입과 옵션을 설정해주었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154092908-57a17a67-2d42-4d7d-9c59-b38e3439b348.png&quot; alt=&quot;스크린샷, 2022-02-16 00-23-06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스키마를 수정했기 때문에 기존 게시글들을 수동으로 하나하나 데이터 값을 수정해줘야 하나 싶었는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaultValue&lt;/code&gt;값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;로 준 탓인지 기존 게시글들도 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt; 컬럼의 값이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;로 활성화되었다. &lt;del&gt;(휴…)&lt;/del&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-2-concertcleaner-함수-및-controller-변경&quot;&gt;2-2. concertCleaner() 함수 및 Controller 변경&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;매일 오전 09시에 서버에서는 콘서트 정보를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concertCleaner()&lt;/code&gt; 함수를 통해서 티켓 오픈일이 한달 지난 콘서트 DB의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;로 바꾸어 주고 있다.&lt;br /&gt;
여기에 더불어 해당 콘서트에 종속된 게시글 DB들의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt; 또한 함께 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;로 바꾸어 주었다.&lt;/p&gt;

&lt;p&gt;또한, 이제는 Controller 또한 수정하여 게시글을 뱉어주는 요청이 들어온다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt;값을 내림차순으로 주어서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;인 게시물은 후순위로 밀리게끔 설계하였다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154095571-20c8416e-30e4-4e4c-b665-6a5962839808.png&quot; /&gt;&lt;/center&gt;

&lt;h3 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;클라이언트에서 이제 조회수순으로 정렬을 하여도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt;의 우선순위가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activation&lt;/code&gt; 내림차순이기 때문에 비활성화된 콘서트에 종속된 게시물들을 후순위로 밀리게 설계하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154096234-6ea10a8a-a7df-4501-9575-71ded1c491d6.png&quot; alt=&quot;스크린샷, 2022-02-16 00-40-09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;콘서트가 비활성화되어 목록에서는 사라졌지만 게시글은 후순위로 밀렸을 뿐이라서 조회/수정/삭제 처리는 가능한 상태이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/154100340-9819feb2-da3c-4216-b2e3-8e67231f199b.png&quot; alt=&quot;스크린샷, 2022-02-16 00-59-54&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;위 사진과 같이 상단 콘서트 목록은 공백으로 보여지고 있다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;빈 콘서트 목록 처리를 어떻게 해야할지 클라이언트를 담당한 팀원분과 조율해서 내일까지 Task를 가져가야 할 듯 하다.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.14.Project/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.14.Project/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>Sequelize Migration</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152718557-af87a691-a231-4f0f-a603-a478fe17e795.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;

&lt;p&gt;Sequelize ORM을 사용하며 가장 편리한 점을 꼽는다면 마이그레이션을 선택할 것 같다.&lt;/p&gt;

&lt;p&gt;운영중인 서비스 중단없이 DB 스키마 모델을 변경한다던가 서비스 기획 및 설계단계에서 놓친 점을 나중에 추가할 때 DB를 갈아엎지 않고 수정할 수 있는 기능을 제공하는 마이그레이션은 써본 사람만 알 것이다.&lt;/p&gt;

&lt;p&gt;다만 스키마 수정이 필요한 경우가 많이 발생하지 않기 때문에 사용빈도가 많지가 않았다.&lt;br /&gt;
익숙치 않은 문법이기 때문에 매번 사용할 때 마다 검색을 통하여 사용하였는데, 이참에 블로그에 학습한 내용을 정리해서 내가 보려고 남겨본다.&lt;/p&gt;

&lt;h3 id=&quot;1-migration&quot;&gt;1. Migration&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequelize&lt;/code&gt; 공식문서에서는 마이그레이션을 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just like you use &lt;strong&gt;version control&lt;/strong&gt; systems such as &lt;strong&gt;Git&lt;/strong&gt; to manage changes in your source code, you can use &lt;strong&gt;migrations&lt;/strong&gt; to keep track of changes to the database. With migrations you can transfer your existing database into another state and vice versa: Those state transitions are saved in migration files, which describe how to get to the new state and how to revert the changes in order to get back to the old state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;간단히 설명하자면 &lt;strong&gt;마이그레이션&lt;/strong&gt;은 Git과 같은 버전 컨트롤 시스템으로써, 이를 데이터베이스에 적용하며 지원해준다.&lt;/p&gt;

&lt;p&gt;즉, 마이그레이션은 데이터베이스의 수정및 롤백을 버전 컨트롤 시스템 처럼 이용할 수 있게끔 지원하는 강력한 기능이다.&lt;/p&gt;

&lt;p&gt;마이그레이션을 이용하기전 Sequelize CLI가 필요하다. CLI는 마이그레이션과 프로젝트 부트스트랩 지원을 제공하며 이를 설치한 환경이라는 가정하에 글을 남긴다.&lt;/p&gt;

&lt;h4 id=&quot;1-1-migration-생성&quot;&gt;1-1. Migration 생성&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;마이그레이션은 필요할 때마다 생성할 수 있다. &lt;br /&gt;
스키마에 변경이 필요할 때(컬럼을 추가하거나, 기존 컬럼의 데이터 속성값을 변경할 때)마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migration.js&lt;/code&gt; 파일을 생성하여 진행하는 것이다.&lt;/p&gt;

&lt;p&gt;우선 마이그레이션을 생성하는 명령어는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;생성할&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;이름&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;생성할&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;이름&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마이그레이션 파일을 보고 어떤 기능을 하는 코드인지 유추할 수 있을만한 이름만 입력해주면 생성이 된다.&lt;/p&gt;

&lt;p&gt;명령어를 입력시 아래와 같은 템플릿 코드가 제공이 된다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable(&apos;users&apos;, { id: Sequelize.INTEGER });
     */&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable(&apos;users&apos;);
     */&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt;은 마이그레이션을 담당하고 있으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;down&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undo&lt;/code&gt; 기능(롤백)을 담당하고 있다.&lt;/p&gt;

&lt;p&gt;다음은 기능별로 함수들을 묶어 정리하였다.&lt;/p&gt;

&lt;h4 id=&quot;1-2-테이블을-새로-생성하거나-기존-테이블을-지워야-할-때&quot;&gt;1-2. 테이블을 새로 생성하거나 기존 테이블을 지워야 할 때&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 테이블을 생성할 때는 아래의 함수를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createTable()&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.createTable(&apos;테이블명&apos;, 컬럼명: {데이터 속성, 옵션}...);&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INTEGER&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;autoIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 테이블을 삭제할 때는 아래의 함수를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dropTable()&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.createTable(&apos;테이블명&apos;);&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dropTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-3-테이블에-새로운-컬럼을-추가하거나-기존의-컬럼을-삭제할-때&quot;&gt;1-3. 테이블에 새로운 컬럼을 추가하거나 기존의 컬럼을 삭제할 때&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 테이블에 새로운 컬럼을 추가할 때는 아래의 함수를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addColumn()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt; 테이블에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;role&lt;/code&gt; 컬럼 추가 (데이터 속성은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;을 허용하지 않으며 기본값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;)&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.addColumn(&apos;테이블명&apos;, &apos;컬럼명&apos;, {데이터 속성,옵션...});&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaltValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 기존의 컬럼을 삭제할 때는 아래의 함수를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeColumn()&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.removeColumn(&apos;테이블명&apos;, &apos;컬럼명&apos;);&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-4-기존-컬럼의-이름-변경할-때&quot;&gt;1-4. 기존 컬럼의 이름 변경할 때&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;테이블에 있는 기존 컬럼의 이름을 변경할 땐 아래의 함수를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameColumn()&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.renameColumn(&apos;테이블명&apos;, &apos;컬럼명&apos;, &apos;변경할 컬럼명&apos;);&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renameColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userRole&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-5-기존-컬럼의-데이터-속성-및-옵션값-변경&quot;&gt;1-5. 기존 컬럼의 데이터 속성 및 옵션값 변경&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;테이블에 있는 기존 컬럼의 이름을 변경할 땐 아래의 함수를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changeColumn()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt; 테이블에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userRole&lt;/code&gt; 컬럼 속성 변경 (데이터 속성은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRING&lt;/code&gt;, 기본값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normal&lt;/code&gt;)&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.changeColumn(&apos;테이블명&apos;, &apos;컬럼명&apos;, {데이터 속성, 옵션});&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;userRole&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;defaltValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-6-migration-실행과-롤백&quot;&gt;1-6. Migration 실행과 롤백&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;각각 필요한 기능을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up()&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;down()&lt;/code&gt; 기능에 적절히 넣어두면 명령어를 통해 사용이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;migrate&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 통해 마이그레이션을 실행 할 수 있으며 롤백 또한 아래의 코드를 이용하여 사용이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;undo&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;migrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;undo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;서비스를 멈추거나 DB를 모두 삭제 후 스키마를 수정을 해야하는 번거로움 없이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequelize&lt;/code&gt; Migration은 DB 스키마 수정을 간편하게 도와준다.&lt;/p&gt;

&lt;p&gt;혹시 예상치 못한 스키마 수정결과가 일어나도 Git과 같이 &lt;strong&gt;버전 관리&lt;/strong&gt; 기능이 있기 때문에 롤백또한 쉽게 가능하다.&lt;br /&gt;
위 명령어들은 솔직히 자주 쓰지 못했기 때문에 매번 쓸 때마다 검색에 검색을 거듭해서 사용하곤 했었다.&lt;/p&gt;

&lt;p&gt;글로 정리하며 조금 머릿속에서 정리된 기분이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.02.11.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.02.11.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 5일차 - Articles 테이블 스키마 수정(1)</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;어제~오후까지 어제부터 이어온 Task인 로그인이 검증이 필요한 API 요청시 유효하지 않은 로그인 상태라면 메인페이지로 강제 이동 후 로그인 창 팝업으로 다시 로그인을 유도하는 로직으로 서버와 클라이언트를 다시 설계하였다.&lt;/p&gt;

&lt;p&gt;생각보다 로그인 검증이 필요한 API 요청이 많아서 작업시간이 오래걸렸다..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;===main page===&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;알람 요청 : [post] concert/:concertid/alarm&lt;/li&gt;
    &lt;li&gt;알람 취소 : [delete] concert/:concertid/alarm&lt;/li&gt;
    &lt;li&gt;알람 조회 : [get] concert/alarm&lt;/li&gt;
    &lt;li&gt;콘서트 댓글 작성 : [post] concert/:concertid/comment&lt;/li&gt;
    &lt;li&gt;콘서트 댓글 수정 : [patch] concert/:concertid/comment/:commentid&lt;/li&gt;
    &lt;li&gt;콘서트 댓글 삭제 : [delete] concert/:concertid/comment/:commentid&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;===concert page===&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;없음&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;===conchin page===&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;게시글 작성 : [post] concert/:concertid/article&lt;/li&gt;
    &lt;li&gt;게시글 수정 : [patch] concert/:concertid/article/:articleid&lt;/li&gt;
    &lt;li&gt;게시글 삭제 : [delete] concert/:concertid/article/:articleid&lt;/li&gt;
    &lt;li&gt;게시글 댓글 작성 : [post] concert/:concertid/article/:articleid/comment&lt;/li&gt;
    &lt;li&gt;게시글 댓글 수정 : [patch] concert/:concertid/article/:articleid/comment/:commentid&lt;/li&gt;
    &lt;li&gt;게시글 댓글 삭제 : [delete] concert/:concertid/article/:articleid/comment/:commentid&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;===my page===&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;마이페이지 진입 : [get] user/me&lt;/li&gt;
    &lt;li&gt;개인정보 수정 : [patch] user/me&lt;/li&gt;
    &lt;li&gt;닉네임 중복 확인 : [post] user/username&lt;/li&gt;
    &lt;li&gt;프로필사진 수정 : [patch] user/picture&lt;/li&gt;
    &lt;li&gt;콘친 인증 : [patch] user/safe&lt;/li&gt;
    &lt;li&gt;콘친 인증코드 요청 : [post] user/safe&lt;/li&gt;
    &lt;li&gt;콘친 인증코드 입력 : [post] user/safe/confirm&lt;/li&gt;
    &lt;li&gt;회원탈퇴 : [delete] user/me&lt;/li&gt;
    &lt;li&gt;내가 쓴 게시글 : [get] user/myarticle&lt;/li&gt;
    &lt;li&gt;내가 쓴 댓글 : [get] user/mycomment&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-추가적인-보완이-필요한-사항&quot;&gt;1. 추가적인 보완이 필요한 사항&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;클라이언트를 담당하는 팀원분께서 현재 ALL-CON 프로젝트 스키마를 수정해달라는 요청을 해주셨다.&lt;/p&gt;

&lt;p&gt;현재 콘친찾기 게시글 작성시 총 멤버수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; 현재원 수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;값으로 항상 고정을 해두었다.&lt;br /&gt;
처음부터 멤버수를 고정하기보다는 게시글 작성때부터 유연하게 멤버수를 수정할 수 있게 스키마를 수정해달라는 요청을 해주셨다.&lt;/p&gt;

&lt;p&gt;사실 민감정보 암호화 리팩토링을 할 때도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequelize&lt;/code&gt; 문법중 특정 컬럼만 추가하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migration&lt;/code&gt;하는 방법도 열심히 구글링하여 찾아보았는데, 이번 스키마 구조 수정 후 자주쓰는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequelize&lt;/code&gt; 문법은 다시 한번 복습할 겸 블로그에 학습한 내용을 남겨봐야겠다. &lt;del&gt;(매번 스키마 수정할 때마다 구글링 중..)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;우선 클라이언트를 담당하는 팀원분께서 요청한 부분은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153529646-275d910a-f7ee-43e2-8818-c2f2c9087961.png&quot; alt=&quot;스크린샷, 2022-02-11 11-09-59 (사본)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블 컬럼중 두가지값을 수정 요청하셨다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;member_count&lt;/code&gt; 디폴트값 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total_member&lt;/code&gt; 디폴트값 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-문제-해결&quot;&gt;2. 문제 해결&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;2-1-sequelize-model-파일-스키마-수정&quot;&gt;2-1. Sequelize Model 파일 스키마 수정&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블의 모델구조는 다음과 같다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153530343-c5bc09d9-9c91-4f8b-bb9b-56be132b2c22.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;member_count&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total_member&lt;/code&gt; 컬럼은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTEGER&lt;/code&gt; 타입의 데이터이며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;이 허용되지 않고 기본값들이 각각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;로 설정이 되어 있다.&lt;/p&gt;

&lt;p&gt;아래와 같이 불필요한 데이터 속성들을 삭제했다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153530565-8e3c1057-f48a-446a-b7eb-1afcf3531e53.png&quot; /&gt;&lt;/center&gt;

&lt;h4 id=&quot;2-2-changecolumn-함수로-컬럼-데이터-속성값-변경&quot;&gt;2-2. changeColumn() 함수로 컬럼 데이터 속성값 변경&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 아래 명령어로 migration 파일을 생성해 준다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;생성할&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;이름&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;생성할&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;이름&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 뒤, 컬럼 안 데이터 속성값을 변경할 예정이기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changeColumn()&lt;/code&gt; 함수를 사용한다. &lt;br /&gt;
함수의 사용 방법은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// await queryInterface.changeColumn(테이블명, 컬럼명, {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  컬럼 데이터 속성,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  컬럼 옵션&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// })&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;member_count&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;allowNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두가지 속성이 비동기로 처리되어야 하므로 아래와 같이 작성하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153529840-83dcc0fa-af69-4442-9395-dbc371849e23.png&quot; alt=&quot;스크린샷, 2022-02-11 11-42-54&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;해당 스키마 수정외에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controller&lt;/code&gt; 부분에서도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;member_count&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total_member&lt;/code&gt;는 고정값이 DB에 저장되므로 따로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req.body&lt;/code&gt;로 입력값을 전달받아 DB에 저장하지 않는 구조였다.&lt;/p&gt;

&lt;p&gt;게시글 작성 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controller&lt;/code&gt;까지 수정하여 게시글 작성시 멤버수를 유연하게 적용할 수 있게끔 리팩토링하였다.&lt;/p&gt;

&lt;h3 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Articles&lt;/code&gt; 테이블 스키마가 다음과같이 변경되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153530932-c18c05a1-c469-413f-97da-62c00be542ea.png&quot; alt=&quot;스크린샷, 2022-02-11 11-09-59&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 게시글 최초 작성시에도 멤버수를 유연하게 적용하여 게시글 생성이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153531161-6c35922d-cdce-458d-ae93-04daa29ab5b9.gif&quot; alt=&quot;test&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.11.refactoring/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.11.refactoring/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 4일차 - 유효하지 않은 로그인 상태 검증</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;어제 발생한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code: &apos;ERR_HTTP_HEADERS_SENT&lt;/code&gt; 에러는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt;  미들웨어 함수를 수정하여 핸들링하였다. 오늘은 전반적으로 유효하지 않은 로그인 상태를 검증하여 메인페이지로 이동 후 로그인을 유도하는 방향으로 프로젝트를 리팩토링해볼 예정이다.&lt;/p&gt;

&lt;h3 id=&quot;1-문제점&quot;&gt;1. 문제점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;현재 ALL-CON 프로젝트는 로그인중 웹 브라우저 쿠키가 삭제되거나 쿠키의 유효기간이 지난 이후에도 로그인을 계속 하고 있다면, 로그인이 필요한 API 요청을 시도시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server Error&lt;/code&gt;만 반환하고 자동으로 로그아웃 처리가 된다던지, 페이지가 이동한다던지의 상태변화는 이뤄지지 않는다.&lt;/p&gt;

&lt;p&gt;이렇게 서비스가 유지가 된다면 이용자가 직접 유효하지 않은 로그인 상태를 감지하기는 어려우니 당연히 ALL-CON 서버 측의 문제가 있다고 생각이 들것이다.&lt;/p&gt;

&lt;p&gt;만약 유효하지 않는 로그인 정보로 로그인 검증이 필요한 API 요청 사용시에는 메인페이지로 강제로 이동 시키며, 로그인을 유도하는 방면으로 프로젝트를 리팩토링 해 볼 예정이다.&lt;/p&gt;

&lt;h3 id=&quot;2-문제-해결&quot;&gt;2. 문제 해결&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;2-1-loginredirect-모듈-생성&quot;&gt;2-1. LoginRedirect 모듈 생성&lt;/h4&gt;
&lt;hr /&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Store import */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUserInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../store/AuthSlice&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 생략 */&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Library import */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useDispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useSelector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react-redux&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useNavigate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react-router-dom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LoginRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* dispatch &amp;amp; navigate &amp;amp; useLocation 선언 */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useDispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useNavigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* useSelector */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isLoginCheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;cm&quot;&gt;/* handler 함수 (기능별 정렬) */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 메인페이지 리다이렉트 핸들러&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;goHomeHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 메인페이지 상태 초기화 */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 켜져있는 모달창 모두 종료 */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 홈으로 이동 */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/main&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 로그인 상태 변경 핸들러&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginStateHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 로그아웃 상태로 변경 &amp;amp; 유저정보 상태 초기화 */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}));&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 로그인 모달창 팝업 */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showLoginModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoginCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;goHomeHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 메인페이지로 이동&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;loginStateHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 로그인 상태 변경 &amp;amp; 로그인 모달창 팝업&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoginCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LoginRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginRedirect&lt;/code&gt; 모듈을 만들었다.&lt;/p&gt;

&lt;p&gt;해당 모듈의 주된 기능은 두가지 함수로 만들어주었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메인페이지 상태 초기화 &amp;amp; 켜져있는 모든 모달창 종료이후 메인페이지로 이동하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goHomeHandler()&lt;/code&gt; 함수&lt;/li&gt;
  &lt;li&gt;로그인 상태 초기화, 로그인한 유저정보 초기화 이후 로그인 모달창 띄워 재 로그인 유도하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loginStateHandler()&lt;/code&gt; 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153373384-2d37e9d0-f59b-4c11-ad77-6981f3356d4e.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.tsx&lt;/code&gt;에 해당 컴포넌트를 불러와서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isLoginCheck&lt;/code&gt; 상태가 변동될때 마다 위 두 함수가 작동하게끔 만들어 주었다.&lt;/p&gt;

&lt;h4 id=&quot;2-2-로그인-검증이-필요한-api-요청-아래-분기-처리&quot;&gt;2-2. 로그인 검증이 필요한 API 요청 아래 분기 처리&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153373104-0149fc03-a438-4dde-9b37-0737a2f40f46.png&quot; alt=&quot;스크린샷, 2022-02-10 17-57-11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인 검증이 필요한 API 요청 아래에 응답 결과값이 &lt;strong&gt;상태코드 200번 &amp;amp;&amp;amp; 에러메시지&lt;/strong&gt;를 반환하면 유효하지 않는 로그인 상태이므로 위와 같이 분기처리를 한뒤,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isLoginCheck&lt;/code&gt; 상태값을 바꿔주어 재렌더링 해주었다.&lt;/p&gt;

&lt;h3 id=&quot;3-결과&quot;&gt;3. 결과&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로그인 중 웹 브라우저 쿠키가 삭제되거나 쿠키 만료로 유효하지 않은 로그인 상태에서 마이페이지 진입하면 메인페이지로 이동 후 로그인 창 팝업&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153384029-7cff7cd8-a60a-43c9-9013-14c77c74e344.gif&quot; alt=&quot;gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그인 중 웹 브라우저 쿠키가 삭제되거나 쿠키 만료로 유효하지 않은 로그인 상태에서 로그인 검증이 필요한 기능 수행시 (댓글 작성) 메인 페이지로 이동 후 로그인 창 팝업&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153384922-c0f2be81-9822-4e84-a643-68571d70451a.gif&quot; alt=&quot;gif2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;우선 메인페이지에서 보여지는 영역은 모두 처리하였다.&lt;/p&gt;

&lt;p&gt;다른 영역, 예를 들어 콘친찾기 글쓰기 중 쿠키가 만료되거나 사라지는 경우 등을 대처하기 위해서 내일은 사이트 전반적인 로그인 검증이 필요한 API 요청시 메인페이지로 강제 이동 &amp;amp; 로그인 재시도를 할 수 있게 끔 수정해볼 예정이다.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.10.refactoring/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.10.refactoring/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>Node.js - code: &apos;ERR_HTTP_HEADERS_SENT 에러 핸들링</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152718557-af87a691-a231-4f0f-a603-a478fe17e795.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;h3 id=&quot;1-nodejs---code-err_http_headers_sent&quot;&gt;1. Node.js - code: ‘ERR_HTTP_HEADERS_SENT&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Project 진행 중 쿠키가 강제로 삭제된 상황에서 로그아웃 API 요청시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code: &apos;ERR_HTTP_HEADERS_SENT&apos;&lt;/code&gt; 에러를 겪고 서버가 죽어버리는 문제가 발생했었고 리팩토링 과정에서 해결한 과정을 짧게 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;우선 해당 에러는 한번의 Request(요청)에 2개 이상의 Response(응답)이 존재하는 경우 발생하는 에러이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생각 보다 정직(?)하게 에러 메시지를 송출해 준다.&lt;/p&gt;

&lt;h4 id=&quot;1-1-에러발생-원인&quot;&gt;1-1. 에러발생 원인&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 에러가 무엇을 뜻하는지는 알았다.&lt;/p&gt;

&lt;p&gt;그렇다면 왜 발생했는지 코드를 뜯어보았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;controller/authentication/logout.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153110704-f562c05e-890a-4512-a358-f2cc3e431102.png&quot; alt=&quot;스크린샷, 2022-02-09 11-31-35&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 로그인 인증검사&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로그인 여부를 인증하는 코드에서 미들웨어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt; 함수를 호출하고 있으며 이 미들웨어 함수는 다음과 같이 구성되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;middlewares/authorized/userAuth.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153112382-26f6e9dd-73c9-487e-bfa3-76c388d160e9.png&quot; alt=&quot;스크린샷, 2022-02-09 11-42-11&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;에러가 발생하는 시점은 로그인 상태 중 쿠키가 강제로 삭제되어(웹 브라우져에서 쿠키 초기화 등등의 이유로 인하여) 쿠키에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;은 비어있지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 상태는 로그인 상태이기 때문에 로그아웃 요청은 진행이 가능하며, 로그아웃 요청시 2번의 응답결과가 발생되는 경우이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt; 미들웨어의 응답결과&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AccessToken Is Empty!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logout&lt;/code&gt; 컨트롤러의 응답결과&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Logout Success!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;가 서버에서 보내고 있기 때문에 발생하였다. 그렇기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt; 로그인 검증 미들웨어 함수를 수정해 주었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;middlewares/authorized/userAuth.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153366836-2657fc2c-a046-4d42-9b68-9ee1b155e054.png&quot; alt=&quot;스크린샷, 2022-02-10 17-21-56&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;문 뒤에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; 응답 결과를 담지 않고 유효하지 않은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;이 담겨있는 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;값을 반환하며 유효한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;이 담겨있는 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userInfo&lt;/code&gt; 유저 정보값을 반환해주는 함수로 변경해주었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;controller/authentication/logout.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153367164-a5686917-ab22-498f-9dce-81e6542afd04.png&quot; alt=&quot;스크린샷, 2022-02-10 17-23-13&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt; 검증 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userInfo&lt;/code&gt; 변수에 담은 뒤 해당 변수에 담기는 값이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;일 경우에는 상태코드 200번과 함께 메세지를 반환해주었다.&lt;/p&gt;

&lt;p&gt;이로써 우선 응답결과는 하나의 요청에 하나의 응답만 주어서 에러는 해결하였다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;서버 변경점에 맞춰 클라이언트 코드도 수정해보려 한다.&lt;/p&gt;

&lt;p&gt;로그인 검증이 필요한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; API 요청의 아래에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; 응답값의 결과가 만약 상태코드 200번 &amp;amp;&amp;amp; 에러메시지가 나오는 경우, 메인페이지로 리다이렉트 &amp;amp; 로그인 모달 팝업 상태로 변경하여 다시 로그인을 유도하는 방면으로 코드를 수정해봐야겠다.&lt;/p&gt;

&lt;p&gt;로그아웃 외에 로그인 검증이 필요한 API 요청의 서버 &amp;amp; 클라이언트 코드들 또한 모두 수정해봐야 겠다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;기본에 충실하지 못하여서 발생한 에러라서 솔직히 부끄러운 에러라 생각이 든다.&lt;/p&gt;

&lt;p&gt;같은 실수를 하지않게끔 글로 남겨본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.02.09.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.02.09.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 3일차 - 하나의 요청에 두개 이상의 응답시 발생하는 에러 핸들링</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;민감정보 암호화 Task는 모두 끝냈다.&lt;br /&gt;
다음 가져갈 Task로 로그아웃시 발생하는 에러 핸들링을 해보려한다.&lt;/p&gt;

&lt;h3 id=&quot;문제점&quot;&gt;문제점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;현재 로그인 방식은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cookie&lt;/code&gt;에 JWT Token을 담아 인증하는 방식으로 로그인검증이 이루어지고 있으며, 로그아웃시에는 로그인 여부를 검증한 뒤, 쿠키를 만료시키는 방식으로 로그아웃 처리를 구현하였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;controller/authentication/logout.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153110704-f562c05e-890a-4512-a358-f2cc3e431102.png&quot; alt=&quot;스크린샷, 2022-02-09 11-31-35&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;로그아웃시 에러가 발생하는 대표적인 경우는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;웹이나 모바일 환경에서 강제로 쿠키를 삭제 후 로그아웃시 발생&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153110448-62615271-8a2c-4055-b3cd-59e80b7c1dbb.png&quot; alt=&quot;스크린샷, 2022-02-09 11-28-57&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우선 위의 크롬환경에서 쿠키를 강제로 삭제하는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cookie&lt;/code&gt;에 담긴 JWT Token값이 날아가기 때문에, 로그인 검증이 이뤄지지 않아 발생하는 에러이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153110122-099531cf-6e6f-4deb-bce3-96c4f73d9f2a.png&quot; alt=&quot;스크린샷, 2022-02-09 11-24-50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;검색 결과 우선 에러의 원인은 &lt;strong&gt;“서버가 클라이언트에 둘 이상의 응답을 보내려고 할 때 발생하는 에러”&lt;/strong&gt; 였다.&lt;/p&gt;

&lt;h3 id=&quot;문제-해결&quot;&gt;문제 해결&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;우선 해결은 간단히 가능했다.&lt;/p&gt;

&lt;p&gt;키포인트는 &lt;strong&gt;“서버가 클라이언트에 둘 이상의 응답을 보내려고 할 때 발생하는 에러”&lt;/strong&gt; 에러코드 그 자체가 정답이었다. &lt;del&gt;(기계는 거짓말을 하지않는다…)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;우선 로그아웃시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt; 미들웨어 함수가 호출된다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 로그인 인증검사&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 함수로 로그인 여부가 검증이 이뤄지며 미들웨어 함수의 자세한 내용은 아래와 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;middlewares/authorized/userAuth.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153112382-26f6e9dd-73c9-487e-bfa3-76c388d160e9.png&quot; alt=&quot;스크린샷, 2022-02-09 11-42-11&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드를 살펴보니 원인은 다음과 같았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쿠키를 강제로 파괴하는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; 상태는 로그인 상태이지만 JWT 토큰값이 없는 상황.&lt;/li&gt;
  &lt;li&gt;JWT 토큰이 없는 상황에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt; 미들웨어 함수를 거치며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;값으로 401번 에러코드 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; 응답 결과를 반환함.&lt;/li&gt;
  &lt;li&gt;결국 로그아웃 API 요청이 들어왔을 경우 반환되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;응답 결과값이 2개가 되어서 &lt;strong&gt;“서버가 클라이언트에 둘 이상의 응답을 보내려고 할 때 발생하는 에러”&lt;/strong&gt;가 발생이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;controller/authentication/logout.js&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/153113003-73804868-4fb3-4b21-bff6-e0b5b285c9c3.png&quot; alt=&quot;스크린샷, 2022-02-09 11-53-04&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선은 로그인 인증검사 부분&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 로그인 인증검사&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// await userAuth(req, res); &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 코드를 주석처리하면 에러는 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;하지만, 조금더 나아가서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuth&lt;/code&gt;에서 로그인 검증 이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;값이 비어있다면 (즉, 유효하지 않은 로그인정보 상태라면) 메인페이지로 이동하고 로그인 모달을 띄워서 다시 로그인을 유도하는 방향으로 서버 &amp;amp; 클라이언트의 구조를 바꿔보아야 겠다. &lt;del&gt;(내일 진행 예정)&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;요청값에 일반적으로 1개의 응답결과를 반환해야하는 당연하고 기본적인 개념을 실수하고 넘어가서 발생한 에러였다.&lt;/p&gt;

&lt;p&gt;우선 해당 내용에 대해서 조금더 학습해보고 로그인 검증 이후 유효하지 않은 로그인 정보를 보유중이라면 메인페이지로 이동하고 로그인을 다시 유도하는 방향으로 전반적인 코드를 다시 작성해보아야겠다.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.09.refactoring/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.09.refactoring/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 2일차 - 민감정보 암호화</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;어제 오후까지 프로젝트 리팩토링 우선순위를 정하여 각자 Task를 선별하였다.&lt;/p&gt;

&lt;p&gt;팀 프로젝트 Repository를 이제는 더이상 수강생이 아니기 때문에 Private ⮕ Public으로 전환을 하였다.&lt;br /&gt;
그 과정에서 기존 Repository에서 새로운 Repository로 이전을 해야해서 오늘은 시간을 소비하였다.&lt;/p&gt;

&lt;p&gt;우선 어제의 결과물은 블로그 후기로 정리를 해두었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jh8459.github.io/til/22.02.07.til/&quot; target=&quot;_blank&quot;&gt;[TIL] Crypto 모듈로 비밀번호 암호화하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오늘은 문제점 2~3을 마저 해결해보려한다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-미처-해결하지-못한-문제점&quot;&gt;1. 미처 해결하지 못한 문제점&lt;/h2&gt;
&lt;h3 id=&quot;1-1-문제점-2&quot;&gt;1-1. 문제점 2&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;비밀번호 찾기 &amp;amp; 콘친인증시 발송되는 6자리 난수코드 또한 암호화 하지않고 그대로 서버에서 DB로 저장을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152725583-d719287c-ad5e-4670-acc5-1d71928abcc8.png&quot; alt=&quot;스크린샷, 2022-02-07 13-41-06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 DB에 저장된 난수코드 값은 3분 이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expired&lt;/code&gt;값으로 초기화 되게끔 셋팅을 해두었기 때문에 비밀번호를 그대로 DB에 저장하는 경우 보다는 위험성은 낮다. 하지만 위험의 여지가 있다는 사실은 변함이 없다.&lt;/p&gt;

&lt;h3 id=&quot;1-2-문제점-3&quot;&gt;1-2. 문제점 3&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;비밀번호 찾기 인증코드 입력 후 새로운 비밀번호 입력시 &amp;amp; 프로필 수정하기 진입 후 새로운 비밀번호 입력시 입력된 새로운 비밀번호들 또한 암호화 하지않고 그대로 서버에서 DB로 저장을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152726131-a6872096-1f35-452d-b8fd-2e73bf5087a9.png&quot; alt=&quot;스크린샷, 2022-02-07 13-43-50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req.body&lt;/code&gt;로 입력받은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;을 DB로 바로 집어 넣는다 😅.&lt;/p&gt;

&lt;p&gt;실제로 소셜로그인 방식이 아닌 위와 같이 회원가입이 진행된 유저들의 DB는 다음처럼 보인다. &lt;del&gt;(테스트 계정입니다.)&lt;/del&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152727993-ef2867c5-9ecd-4c6b-8581-b16fdd38382e.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-해결과정&quot;&gt;2. 해결과정&lt;/h2&gt;
&lt;h3 id=&quot;2-1-문제점-2-해결과정&quot;&gt;2-1. 문제점 2 해결과정&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;6자리 난수코드들 또한 암호화 해주었다.&lt;br /&gt;
난수코드는 3분 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expired&lt;/code&gt;값으로 초기화되므로 레인보우 테이블과 대조하기에 어렵다고 생각되어, 이 과정에서는 Salt를 첨가한 해싱과정까지는 불필요하다 판단하였다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &apos;sha256&apos; 알고리즘으로 confirmNumber을 &apos;base64&apos; 문자열 형식으로 해싱한다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashedNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3분뒤 초기화되는 짧은 유효기간의 DB정보이기때문에 조금더 가벼운 알고리즘을 통하여 해싱을 해주었다.&lt;/p&gt;

&lt;p&gt;간단한 해싱과정만 거친 뒤 DB에 저장을 하였다.&lt;/p&gt;

&lt;h3 id=&quot;2-2-문제점-3-해결과정&quot;&gt;2-2. 문제점 3 해결과정&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Crypto 모듈로 비밀번호 암호화였으며 종합 과정은 1번 문제점 유사하게 해결하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152939747-9b7d7cce-b433-49d2-9a45-b77f7e490c8d.png&quot; alt=&quot;스크린샷, 2022-02-08 16-33-04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래의 민감정보를 다루는 영역들에서 테스트 결과 이제 더이상 DB에 비밀번호를 바로 저장하지 않는걸 확인하였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;회원가입시 비밀번호 입력값&lt;/li&gt;
  &lt;li&gt;회원정보 수정시 새로운 비밀번호 입력값&lt;/li&gt;
  &lt;li&gt;비밀번호 초기화 이후 새로운 비밀번호 입력값&lt;/li&gt;
  &lt;li&gt;콘친 인증 &amp;amp; 이메일 인증 코드 6자리 난수값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;물론 DB를 보호하기 위해 기본 내장 모듈만 이용한 최소한의 보안장치만 걸어둔 서버이지만, 앞으로는 보안에 중점을 항상 1순위로 두어야겠다는 교훈을 얻었다.&lt;/p&gt;

&lt;p&gt;내일부터는 Client 0순위였던 TypeScript 문법 코드 유지보수 혹은 Server의 1순위였던 토큰이 사라져도 로그아웃이 되지 않는 현상, 둘 중 하나를 리팩토링 해 봐야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.08.refactoring/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.08.refactoring/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>Crypto 모듈로 비밀번호 암호화하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152718557-af87a691-a231-4f0f-a603-a478fe17e795.jpeg&quot; alt=&quot;TIL&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;today-i-learnd&quot;&gt;Today I Learnd&lt;/h2&gt;
&lt;h3 id=&quot;1-문제점&quot;&gt;1. 문제점&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;민감한 정보를 다룰 때 가장 중요한 부분은 바로 &lt;strong&gt;&lt;em&gt;보안&lt;/em&gt;&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;Final Project를 진행하며 보안에는 신경을 전혀 쓰지 않고 빠르게 기능적인 측면만 완성시키는데 급급하였다.
그렇기에 당연히 보안에는 구멍이 너무나도 크게 뚫려있었고, 리팩토링 기간 동안 보안적인 측면에서 조금더 안전하게 민감정보들을 DB로 저장하는 방법을 찾아본 내용을 글로 남겨보았다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152727053-d5bb15b0-0585-4ad9-8bad-afe23b59bd1d.jpg&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선, 가장 심각한 문제를 꼽자면 클라이언트에서 받은 입력값들 혹은 서버에서 제공하는 인증코드들을 암호화 하지않고 그대로 DB로 저장을 하고 있다. 그렇기에 만약 DB가 해킹당하는 사태시에는 아무런 보호조치를 받지 못한채로 민감정보들이 그대로 유출이 될 수 밖에 없다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최악의 경우 또한 대비해두어야 한다 생각한다. DB가 해킹되어 탈취 당했을 경우 최소한의 대처가 가능하도록 민감정보 암호화를 해보려 한다.&lt;/p&gt;

&lt;h4 id=&quot;1-1-문제점-1&quot;&gt;1-1. 문제점 1&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 실제 코드를 다시 뜯어보고 가장 큰 보안 구멍 세군데를 찾아냈다.&lt;/p&gt;

&lt;p&gt;첫번째로는 회원가입시 클라이언트에서 받은 입력값을 암호화 하지않고 그대로 서버에서 DB로 저장을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152724691-bcc27a1d-ad7c-4390-ad0c-2d2889bb2220.png&quot; alt=&quot;스크린샷, 2022-02-07 13-29-19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req.body&lt;/code&gt;로 입력받은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;을 중복검사만 진행 한 뒤 아무런 암호화 작업없이 DB로 바로 집어 넣는다.&lt;/p&gt;

&lt;p&gt;솔직히 비밀번호를 입력받은 그대로 서버에서 DB로 저장하는 행위는 범죄 방조 행위와 비슷하다 생각한다.. &lt;del&gt;(분명히 문제가 될 여지가 있다는걸 알면서도 모른척 한 행위니까 😅)&lt;/del&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-문제점-2&quot;&gt;1-2. 문제점 2&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;두번째로는 비밀번호 찾기 &amp;amp; 콘친인증시 발송되는 6자리 난수코드 또한 암호화 하지않고 그대로 서버에서 DB로 저장을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152725583-d719287c-ad5e-4670-acc5-1d71928abcc8.png&quot; alt=&quot;스크린샷, 2022-02-07 13-41-06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 DB에 저장된 난수코드 값은 3분 이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expired&lt;/code&gt;값으로 초기화 되게끔 셋팅을 해두었기 때문에 위의 비밀번호를 그대로 DB에 저장하는 경우 보다는 위험성은 낮다. 하지만 위험의 여지가 있다는 사실은 변함이 없다.&lt;/p&gt;

&lt;h4 id=&quot;1-2-문제점-3&quot;&gt;1-2. 문제점 3&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;마지막 세번째로는 비밀번호 찾기 인증코드 입력 후 새로운 비밀번호 입력시 &amp;amp; 프로필 수정하기에서 새로운 비밀번호 입력시 입력된 새로운 비밀번호들 또한 암호화 하지않고 그대로 서버에서 DB로 저장을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152726131-a6872096-1f35-452d-b8fd-2e73bf5087a9.png&quot; alt=&quot;스크린샷, 2022-02-07 13-43-50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req.body&lt;/code&gt;로 입력받은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;을 DB로 바로 집어 넣는다. 회원가입 부분과 유사하게 로직을 구성하였다 😅.&lt;/p&gt;

&lt;p&gt;실제로 소셜로그인 방식이 아닌 위와 같이 회원가입이 진행된 유저들의 DB는 다음처럼 보인다. &lt;del&gt;(테스트 계정입니다.)&lt;/del&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152727993-ef2867c5-9ecd-4c6b-8581-b16fdd38382e.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 리팩토링 기간동안 가장 신경 못썼던 보안에 중점을 두고 수정해보려 한다.&lt;/p&gt;

&lt;h3 id=&quot;2-암호화란&quot;&gt;2. 암호화란?&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;암호화에는 단방향 암호화와 양방향 암호화, 크게 두 가지 방법이 있다.&lt;/p&gt;

&lt;p&gt;간단하게 설명하자면 단방향 암호화는 암호화가 진행이 되면 복호화(암호화된 문자열을 다시 원래 문자열로 돌려놓는 것)할 수 없고, 양방향 암호화는 복호화해서 원래의 비밀번호를 알 수 있다.&lt;/p&gt;

&lt;p&gt;다만, 대부분의 사이트는 비밀번호를 찾을 때 원래의 비밀번호를 알려주는 것이 아닌 재설정하며, 현재 리팩토링중인 Project도 비밀번호를 되찾아 주는 것이 아닌 비밀번호 재설정을 하기 때문에 양방향 암호화는 굳이 필요없으므로 단방향 암호화를 사용했다.&lt;/p&gt;

&lt;h4 id=&quot;2-1-해시-함수와-salt&quot;&gt;2-1. 해시 함수와 Salt&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;단방향 암호화의 가장 간단한 방식은 해시 함수를 사용하는 것이다. &lt;br /&gt;
또한 이미 보안이 뚫린 해시 함수가 존재하며, 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MD5&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HAS-180&lt;/code&gt;로 해당 알고리즘은 사용해선 안된다. (보다 안전한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-256&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-512&lt;/code&gt; 등을 사용하자)
하지만, 단순하게 해시 함수만 사용해서 암호화를 하면 절대 안 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;예를 들면 같은 비밀번호 ‘1234’를 쓰는 유저들의 해싱값들은 항상 같은 해시 결과값을 나타내기 때문에, 만약 해커가 모든 암호에 대해 어떤 결과가 나올지 데이터베이스화 해두었다면 결과만 보고도 원래 암호를 유추해낼 수 있다는 문제가 있다.&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;이러한 데이터베이스를 &lt;strong&gt;&lt;em&gt;레인보우 테이블&lt;/em&gt;&lt;/strong&gt; 이라고 한다.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇기에 &lt;strong&gt;Salt&lt;/strong&gt;라는 특정 값을 통해서 위에서 나온 결과를 변형해 주거나 해시 함수를 여러번 돌려 주어서 결과값을 변형해 주어야 한다. (혹은 둘다 사용해도 된다.)
비밀번호에 Salt 문자열을 붙여서 그것을 수 만번 반복 해싱을 한다면 알고리즘을 해독하는데 길게는 수만년의 시간이 걸리게 될 수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;2-2-crypto-vs-bcrypt&quot;&gt;2-2. Crypto vs Bcrypt&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 암호화를 왜 해야하는지? 그리고 어떤 방식으로 암호화가 진행되는지 알아보았으니 Node.js 환경에서 많이 쓰이는 암호화 방식을 찾아보았다.&lt;/p&gt;

&lt;p&gt;검색해보니 Node.js에서 기본 패키지로 제공하는 Native 모듈인 Crypto 모듈을 사용하는 방법과 Bcrypt의 Blowfish 알고리즘을 사용한 방법이 주를 이뤘다.&lt;/p&gt;

&lt;p&gt;우선 Bcrypt는 Blowfish 알고리즘은 계산 비용이 많이들며 설정한 키값 만큼 반복 해싱 사용 (일반적으로 4,096회 정도지만 하드웨어 퍼포먼스에 따라 유동적이다. &lt;a href=&quot;https://stackoverflow.com/questions/6951867/nodejs-bcrypt-vs-native-crypto&quot; target=&quot;_blank&quot;&gt;출처 : Stack Overflow&lt;/a&gt; )이 가능하기 때문에 설정값에 따라서 해싱에 엄청난 비용이 든다고 추측된다.&lt;/p&gt;

&lt;p&gt;하드 웨어 가 뒷받침 된다면 Bcrypt는 보안적인 측면에서 보다 안전하다 생각되지만 현재 Project의 서버 환경은 AWS Free-Tier EC2를 사용하고 있기 때문에 서버 부하가 너무 강한 해싱 알고리즘은 피해야 된다고 생각한다.&lt;/p&gt;

&lt;p&gt;강한 알고리즘을 선택하지 않는다면 Bcrypt가 아닌 Crypto 모듈로도 충분하기 때문에 Crypto 모듈을 선택하여 암호화를 진행하였다. &lt;del&gt;(Node.js 기본 패키지로 들어간 이유가 다 있다고 생각하자..)&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-crypto-암호화-과정&quot;&gt;3. Crypto 암호화 과정&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;crypto의 기본 내장 메소드를 이용해서 암호화 한다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createHash()&lt;/code&gt; : 사용할 알고리즘&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; : 암호화할 비밀번호&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digest()&lt;/code&gt; : 인코딩 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* 생략 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &apos;sha512&apos; 알고리즘으로 req.body로 전달받은 password를 &apos;base64&apos; 문자열 형식으로 해싱한다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sha512&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용하면 우선 해시 알고리즘만 사용하여 암호화가 가능하다. 다만, 위에서 언급하였듯이 Salt 첨가 혹은 반복 해싱작업이 없어서 &lt;strong&gt;레인보우 테이블&lt;/strong&gt;로 비밀번호 유추가 가능하기 때문에 반쪽짜리 무늬만 해싱과정이다.&lt;/p&gt;

&lt;p&gt;따라서 비밀번호는 해시 알고리즘에 유저마다 부여된 고유의 Salt 값을 더해 생성해 주어서 해싱을 해주어야 한다.&lt;/p&gt;

&lt;p&gt;로그인을 할 경우 각각 고유 Salt값이 있어야 해싱되어 DB에 저장된 비밀번호가 해독이 가능하므로 Salt값 또한 DB에 저장할 수 있도록 Sequelize ORM Migration을 통하여 DB 스키마를 수정해주었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152745787-010fd874-9862-498b-9143-b7a079e312e6.png&quot; alt=&quot;스크린샷, 2022-02-07 16-43-31&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt;테이블에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userSalt&lt;/code&gt; 컬럼을 추가해 주었다.&lt;/p&gt;

  &lt;p&gt;OAuth 2.0으로 회원가입시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;값을 받지 않고 있으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;을 허용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 준비는 끝나었으니 회원가입시 비밀번호 암호화를 진행해보자.&lt;/p&gt;

&lt;h4 id=&quot;3-1-salt가-더해진-암호화-과정&quot;&gt;3-1. Salt가 더해진 암호화 과정&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;Salt 생성에서는 crypto 모듈의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;randomBytes()&lt;/code&gt; 메소드를 사용하였으며 비밀번호 암호화는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pbkdf2()&lt;/code&gt; 메소드를 사용하였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;pbkdf2 (Password-Based Key Derivation Function Version 2)&lt;/strong&gt; : 사용자 패스워드에 해시함수, 솔트(Salt), 반복 횟수 등을 지정하여 패스워드에 대한 다이제스트(Digest)를 생성하는 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해시값을 구할때, 작업이 끝날때까지 기다려 주어야 하므로 비동기 콜백 함수의 형태로 사용하거나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Promise()&lt;/code&gt; 형태로 감싸주어야 한다. 하지만 코드의 가독성을 높히기 위해 Node.js 내장 모듈인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promisify()&lt;/code&gt;를 사용하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152785259-f62fc6bd-addd-4799-9126-3aaeb1431c56.png&quot; alt=&quot;스크린샷, 2022-02-07 21-07-34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 위 해싱과정을 통하여 패스워드는 임의의 64바이트 문자열 Salt가 더해진 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha512&lt;/code&gt; 알고리즘으로 106,699회 해싱 후 64바이트 문자열로 복호화 된다.&lt;/p&gt;

&lt;p&gt;이제 로그인시 입력 비밀번호값에 DB에 저장된 Salt값 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userSalt&lt;/code&gt;로 똑같이 복호화 해준 뒤 패스워드값을 비교해주어서 검증해주는 과정을 마친다면 로그인 검증또한 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152790303-1f7d0eab-eb76-46ae-8b16-88af8ff47e14.png&quot; alt=&quot;스크린샷, 2022-02-07 21-43-25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 입력된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt; 값과 일치하는 유저정보를 찾은 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userSalt&lt;/code&gt;값을 불러 온뒤 입력한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;에 동일하게 해싱을 해주어 일치하는 패스워드인지 검증을 해주는 절차로 구성하였다.&lt;/p&gt;

&lt;p&gt;일단 오늘은 이렇게 &lt;strong&gt;문제점 1&lt;/strong&gt;을 해결하였다. 빠른 시일 내로 비밀번호에 관련된 보안 구멍을 모두 위와 같은 로직으로 수정해봐야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오늘-느낀-점&quot;&gt;오늘 느낀 점&lt;/h2&gt;
&lt;p&gt;신경을 안써도 너무 안썼다..&lt;br /&gt;
생각보다 코드는 간단하게 작성하여 해결하였지만, 개념들을 모두 처음부터 학습하며 두가지 모듈을 비교해가며 내 프로젝트에 적용하는 시간은 짧지 않았다.&lt;/p&gt;

&lt;p&gt;물론 내가 작성한 코드가 철통보안이라고 생각하지 않는다.&lt;br /&gt;
다만 DB가 탈취되었을 때, 적나라하게 모든 비밀번호가  유출되는 경우보다는 훨씬 보안이 향상되었다 생각한다.&lt;/p&gt;

&lt;p&gt;프로젝트에 해싱 알고리즘을 적용하는 동안 여러 해커들에게 보안이 뚫린 알고리즘이라던지 알고리즘별 퍼포먼스가 하드웨어에 미치는 영향이라던지 흥미로운 부분들이 많아서 재밌었다.&lt;/p&gt;

&lt;p&gt;문제점2~3은 내일 해결 해 봐야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/til/22.02.07.til/</link>
        <guid isPermaLink="true">http://localhost:4000/til/22.02.07.til/</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>ALL-CON Refactoring 1일차 - 서버 리팩토링 우선순위 선정</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152715311-82cc5a61-ca9c-4c46-a955-77970d4449bb.jpg&quot; alt=&quot;Project&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;우선 ALL-CON Final Project만 대상이며 리팩토링 기간은 정해두지 않았다. &lt;br /&gt;
수료 이후 너무 헤이해지지 않도록 09:00 ~ 18:00 일정으로 팀원들과 다시 모여 프로젝트 결과물을 최소 보름~몇달간 재정비할 계획이다.&lt;/p&gt;

&lt;p&gt;리팩토링 우선순위를 정해보았으며 다음과 같다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1️⃣-1순위&quot;&gt;1️⃣ 1순위&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;&lt;strong&gt;[클라이언트]&lt;/strong&gt; useEffect&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;중복 실행 현상 (콘서트 조회시 조회수가 1회 이상씩 올라가는 현상)&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;&lt;del&gt;비동기 처리 구현 (ex. Loading 중인 표현)&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[클라이언트]&lt;/strong&gt; TypeScript 문법 체크
    &lt;ul&gt;
      &lt;li&gt;어색한 문법및 Type 누락 코드 유지보수 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[서버]&lt;/strong&gt; 서버 보안
    &lt;ul&gt;
      &lt;li&gt;회원가입 등 비밀번호를 다룰때 암호화 과정이 없이 클라이언트와 서버와 DB간 작동을 하고 있다. 특히 비밀번호 변경시 발송되는 인증코드와 새로운 패스워드로 비밀번호 변경된 값 그리고 회원가입의 경우 클라이언트에서 입력한 민감한 정보가 그대로 담겨서 서버로 전달되며 별다른 가공없이 DB로 저장되고 있다.&lt;/li&gt;
      &lt;li&gt;보안에 중점둔 서버 재설계 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;del&gt;&lt;strong&gt;[배포]&lt;/strong&gt; browser 호환성&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;safari 가 안된다?? 도메인 문제인지 Check 필요&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 큰 틀은 위과 같다. &lt;br /&gt;
우선 &lt;strong&gt;[서버]&lt;/strong&gt; 서버 보안 을 중점으로 첫번째 Task를 가져갈 예정이다.&lt;/p&gt;

&lt;p&gt;사실 기존에 작성한 서버는 보안을 전혀 신경쓰지 않았기에 리팩토링 기간에는 보안에 중점을 두어서 다시 설계를 해보아야 할 듯 하다.
지금 바로 생각나는건 Bcrypt를 사용한 해싱 알고리즘 정도가 바로 떠오른다. &lt;del&gt;(2~3개의 대중적인 해싱 방법을 찾아본 뒤, 비교 후 서버에 적용해볼 예정이다.)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;1주일 이내로 1순위 Task를 끝마치는게 1차 계획이다.&lt;/p&gt;

&lt;h3 id=&quot;2️⃣-2순위&quot;&gt;2️⃣ 2순위&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;&lt;strong&gt;[클라이언트]&lt;/strong&gt; 반응형 레이아웃 유지보수&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;반응형으로 레이아웃이 바뀔시 작동하는 애니메이션 넣기&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;&lt;del&gt;전반적인 홈페이지 반응형 레이아웃 점검&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[서버]&lt;/strong&gt; JWT 토큰이 없을시 로그아웃이 안되고 있다.
    &lt;ul&gt;
      &lt;li&gt;토큰이 없음에도 토큰 검증이 진행되는 현상&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;del&gt;&lt;strong&gt;[배포]&lt;/strong&gt; AWS EC2 사용시 보안에 중점을 둔 서버&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;PM2로 24시간 켜져있는 서버의 보안 고려하기&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;0순위 다음으로 시급한 리팩토링 대상은 위와 같다.&lt;br /&gt;
이중 &lt;strong&gt;[서버]&lt;/strong&gt; JWT 토큰이 없을시 로그아웃 자동처리를 중점으로 Task를 가져갈 예정이다.&lt;/p&gt;

&lt;p&gt;1순위는 우선 0순위 Task가 완료 될시 진행해볼 예정이다.&lt;/p&gt;

&lt;h3 id=&quot;3️⃣-3순위&quot;&gt;3️⃣ 3순위&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[공통]&lt;/strong&gt; 안쓰는 모듈 Uninstall&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[공통]&lt;/strong&gt; 문서작업 재정비&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로는 안쓰는 모듈들을 Check해서 배포시 Package.json에 불필요한 모듈이 들어가지 않게 점검 후 프로젝트 문서를 재정비해볼 예정이다.&lt;/p&gt;

&lt;p&gt;우선 오늘은 프로젝트 전반적인 리팩토링 대상 우선순위를 점검하였으며, 필요한 부분들을 각자 공부해볼 예정이다.
오늘은 해싱관련 내용을 찾아본 뒤 스스로 정리하는 시간을 가져보려 한다.&lt;/p&gt;

&lt;p&gt;본격적인 코드수정 작업은 내일부터 해 볼 예정이다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Feb 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.02.07.refactoring/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.02.07.refactoring/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>코드스테이츠 34기 수료</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/151650800-00ba9a63-5827-462a-91d3-e453381cc515.jpg&quot; alt=&quot;수료증1024_1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;retrospect&quot;&gt;Retrospect&lt;/h2&gt;

&lt;p&gt;코드스테이츠 수료 직후 드는 감정을 한 문장으로 정의하자면&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;고생했고-이제-시작이다&quot;&gt;&lt;strong&gt;&lt;em&gt;고생했고 이제 시작이다.&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;
프로젝트 기간에는 평균 수면 시간 2~3시간.. 그동안 수료를 보며 달려왔던 관성이 있어서, 프로젝트가 끝난 뒤 어영부영 12시쯤 잠에 들려고 눈을 감으면 온갖 생각들로 잠자리가 편하지 않다.&lt;/p&gt;

&lt;p&gt;우선 수료하는 오늘 느낀 감정에 대해서 간략히 적어보려한다.&lt;/p&gt;

&lt;h3 id=&quot;무엇을-배웠나&quot;&gt;무엇을 배웠나?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/151651548-2acaaae3-1ab1-4747-8bc3-98fb61cb819c.jpeg&quot; alt=&quot;web-developer-skills&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 개발에 전반적인 흐름과 설계 구조에 대하여 공부하였다.&lt;/p&gt;

&lt;p&gt;우선 프로그래밍 언어로는 JavaScript를 집중적으로 배웠으며 네트워크 구조, 자료구조와 알고리즘 등 공학에 관련된 기초 지식을 쌓았다.&lt;/p&gt;

&lt;p&gt;기술스택을 말하자면 프론트엔드 기술로는 React를 이용한 Client 개발 기술, Redux를 이용한 상태관리 SASS &amp;amp; Styled Components 등의 CSS 기술 또한 배웠다.&lt;/p&gt;

&lt;p&gt;백엔드 기술로는 Node.js와 Express를 이용한 Server 개발을 주축으로 내가 만든 서버와 클라이언트 환경을 AWS 환경을 통하여 배포까지 직접 할 수 있게 되었다. 👍&lt;/p&gt;

&lt;h3 id=&quot;앞으로는&quot;&gt;앞으로는?&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;이제 주니어 개발자가 되기 위한 험난한 과정의 시작이다.😅&lt;br /&gt;
취업에 가장 중요한 시점은 수료후 8~9주 정도라 생각한다.&lt;/p&gt;

&lt;p&gt;일단 자소서와 이력서를 다듬을 예정이다.&lt;/p&gt;

&lt;p&gt;매일매일 프로그래머스와 백준 알고리즘 문제 풀이를 통해 코딩 테스트를 대비해 볼 예정이다.&lt;br /&gt;
백엔드 포지션 기술 면접 또한 대비할 예정이다.&lt;/p&gt;

&lt;p&gt;코딩 테스트를 되도록 보는 회사를 찾아서 지원해볼 예정이다. &lt;br /&gt;
비전공 출신인 신입 개발자가 눈에 띄는 포트폴리오를 보여주긴 어렵다 생각되므로 알고리즘 풀이에 시간을 쏟아 볼 예정이다.&lt;/p&gt;

&lt;p&gt;그리고 팀원들과 함께 파이널 프로젝트 리팩토링 기간을 가져보며 취업 준비를 겸해볼 예정이다.&lt;/p&gt;

&lt;p&gt;사실 아직 무슨 회사에서 일해보고 싶은지 생각해 본 적이 없다. 😅&lt;br /&gt;
어떤 회사에 지원할지 우선 정하고 난 뒤 구직활동을 시작해 볼 예정이다.&lt;/p&gt;

&lt;p&gt;원하는 진로로 취업하는 그날까지 파이팅이다. 👍&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Jan 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/22.01.28.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/22.01.28.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>[ALL-CON] 콘서트 예매정보부터 콘서트 친구까지 찾아주는 콘서트 종합 정보 플랫폼 🎟</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=waving&amp;amp;color=FFCE63&amp;amp;height=230&amp;amp;section=header&amp;amp;text=예매정보부터&amp;#160;콘서트&amp;#160;친구까지&amp;#160;찾아주는&amp;#160;콘서트&amp;#160;종합&amp;#160;정보&amp;#160;플랫폼&amp;amp;fontColor=FFFFFF&amp;amp;fontSize=25&quot; alt=&quot;header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://all-con.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1.5em; color: #FFCE63;&quot;&gt;&amp;#160;👉 ALL-CON 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://github.com/codestates/ALL-CON&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1.5em; color: #FFCE63;&quot;&gt;&amp;#160;👉 Github 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://jh8459.github.io/retrospect/22.01.25.Retrospect/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1.5em; color: #FFCE63;&quot;&gt;&amp;#160;👉 Project 회고 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;ALL-CON&lt;/span&gt;&lt;/strong&gt;은 각 사이트들의 콘서트 정보를 한 눈에 볼 수 있는 콘서트 종합 정보 플랫폼이에요.&lt;/li&gt;
  &lt;li&gt;각 사이트들의 단독 판매 콘서트까지 한눈에 보고 비교해보세요!🤩&lt;/li&gt;
  &lt;li&gt;콘서트를 가고 싶은데 같이 즐길 친구가 없어 망설이셨나요?😢&lt;/li&gt;
  &lt;li&gt;콘서트의 감동을 함께 나눌 콘친을 찾아 보세요!🤼‍♂️&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;&lt;a href=&quot;https://all-con.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152898834-c2e127a6-9431-4841-a6d0-21f532b7b07e.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;

&lt;h2 id=&quot;-all-con은-무슨-뜻인가요&quot;&gt;🤔 &lt;span style=&quot;color: #FFCE63;&quot;&gt;ALL-CON&lt;/span&gt;은 무슨 뜻인가요?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&quot;콘서트가 열리는 모든 날에 참석함&quot;을 의미해요.&lt;br /&gt;
&lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;&lt;b&gt;ALL-CON&lt;/b&gt;&lt;/span&gt;과 함께 올콘 참석에 성공하세요!🏃‍♀️🏃🏃‍♂️
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-all-con에서는-무엇을-할-수-있나요&quot;&gt;🤔 &lt;span style=&quot;color: #FFCE63;&quot;&gt;ALL-CON&lt;/span&gt;에서는 무엇을 할 수 있나요?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;자세히보기&lt;/b&gt;&lt;/summary&gt;
&lt;br /&gt;

&lt;div&gt;

      &lt;p&gt;👉 &lt;i&gt;각 사이트들의 콘서트 정보(단독 콘서트 포함)를 한 눈에 볼 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;현재 인기 많은 콘서트, 오픈이 임박한 콘서트, 최근 등록된 콘서트 정보를 한눈에 볼 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;문자 알림 또는 메일 알림 기능을 이용해서 내가 원하는 콘서트의 예매 오픈시간을 놓치지 않을 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;콘서트 정보를 조회해서 콘서트장의 위치정보를 알 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;콘친 인증을 하면 콘서트에 함께 갈 콘친을 찾을 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;콘친이 될 유저의 정보를 볼 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;콘서트에 대한 기대 댓글을 작성할 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;내가 찾는 콘서트를 검색할 수 있어요.&lt;/i&gt;&lt;/p&gt;

    &lt;/div&gt;
&lt;/details&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-all-con-서비스-기능별-시연&quot;&gt;🎬 &lt;span style=&quot;color: #FFCE63;&quot;&gt;ALL-CON&lt;/span&gt; 서비스 기능별 시연&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;랜딩페이지&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155190860-936d4cea-6353-4112-a019-a5719c0287a7.gif&quot; alt=&quot;landing&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155190929-e159a127-954e-4563-923e-e41e87b630d6.gif&quot; alt=&quot;landing(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;로그인&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155191686-3d65e796-818c-4e0a-9689-852d5a656ff0.gif&quot; alt=&quot;login_success&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155191733-f4ca367f-febe-4206-bb3a-007b462915fc.gif&quot; alt=&quot;login_success(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;소셜 로그인&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155191377-13ee6999-efd9-44d3-bb1c-1547ad15715c.gif&quot; alt=&quot;social_login_success&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155191468-47342868-8aae-441c-92c9-e81cd30660a7.gif&quot; alt=&quot;social_login_success(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;회원가입&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155191995-aef5a4f8-ff29-4aca-b81e-0a223fe022a2.gif&quot; alt=&quot;signup_success&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192009-ee05c867-d0d6-4d07-906c-e82f1386234c.gif&quot; alt=&quot;signup_success(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;비밀번호 초기화&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192260-c338a65a-7afd-43fc-a068-cc63e31e4d80.gif&quot; alt=&quot;password&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192271-401fd40b-ef3c-4f55-88b8-b0b7193bcf73.gif&quot; alt=&quot;password(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인페이지(포스터슬라이드)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192542-8d3f0380-0580-4aa9-8264-9a037d8fdd37.gif&quot; alt=&quot;main_jumbotron&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192550-ff966fc6-acd5-490f-a11b-12704ff9f609.gif&quot; alt=&quot;main_jumbotron(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인페이지(콘서트정보)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192847-87ae60ee-f0f9-423e-aeab-7566231ff42b.gif&quot; alt=&quot;main_concert&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192853-7c24f881-e7d4-463e-8c6a-aae56e61fd39.gif&quot; alt=&quot;main_concert(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인페이지(댓글)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192977-bbc16630-d1dd-406c-8eca-18ed0d1bd3d1.gif&quot; alt=&quot;main_comment&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155192982-8919e2e1-7427-498f-91ab-2bb9d4970f8c.gif&quot; alt=&quot;main_comment(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;콘서트페이지&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155193172-5fface74-bd06-4927-8cf0-f8bf026ff43b.gif&quot; alt=&quot;concert&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155193181-c598df6d-fff6-4f83-9e20-d0312eb74b71.gif&quot; alt=&quot;concert(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;콘친찾기페이지(게시글 작성)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155193469-09e8c9b2-7fff-449c-91e2-304875ab0e86.gif&quot; alt=&quot;conchin_write&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155193474-7cd03737-8ba6-4e79-90d4-bdd62c13b069.gif&quot; alt=&quot;conchin_write(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;콘친찾기페이지(게시글 레이아웃 변화)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155193637-7ac5244e-3ee2-4592-89b0-24563fbd86ff.gif&quot; alt=&quot;conchin_article&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155193650-0b44ccdb-5563-42b4-8dfc-6192294444a2.gif&quot; alt=&quot;conchin_article(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;콘친찾기페이지(게시글 보기)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194105-0cdef6e4-de3e-4965-925d-3fe1d4b285ef.gif&quot; alt=&quot;conchin_detail&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194112-b7b5167a-3832-400a-a288-f5d27446b779.gif&quot; alt=&quot;conchin_detail(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;마이페이지&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194624-05a3294a-e4eb-4956-9745-e730d0a1a8d2.gif&quot; alt=&quot;mypage&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194630-fe46453c-a93a-4766-ad07-04697f67824a.gif&quot; alt=&quot;mypage(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;마이페이지(프로필 수정 페이지)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155195072-6a9a01e2-8a7a-42e6-8a53-cdfaa388dedc.gif&quot; alt=&quot;mypage_profile&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155195079-b836a92b-2d61-4aee-9b65-2f1e1f06aceb.gif&quot; alt=&quot;mypage_profile(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;마이페이지(콘친인증 페이지)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194879-8670d122-d9a5-48f4-858e-66102a114eab.gif&quot; alt=&quot;mypage_conchin&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194885-e1c53370-1300-43f6-ba99-b5d8f425a658.gif&quot; alt=&quot;mypage_conchin(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;헤더&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194369-0cf13f00-90d8-4958-bc7a-23020f984c3b.gif&quot; alt=&quot;header&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155194377-0a64478d-7e09-4740-ae8e-53c98c4bece2.gif&quot; alt=&quot;header(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;로그아웃&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;strong&gt;데스크탑&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155195527-0c107e9c-bf3b-4888-8cca-fbbe4ae8eb75.gif&quot; alt=&quot;logout&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;모바일&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155195532-c57c6c53-7b0c-4cf3-b0b7-09399ca2512e.gif&quot; alt=&quot;logout(mobile)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-all-con-서비스-발표-영상&quot;&gt;🎥 &lt;span style=&quot;color: #FFCE63;&quot;&gt;ALL-CON&lt;/span&gt; 서비스 발표 영상&lt;/h2&gt;

&lt;iframe width=&quot;928&quot; height=&quot;522&quot; src=&quot;https://www.youtube.com/embed/1uK3QLF9TIo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-all-con에서는-무엇을-담당하였나요&quot;&gt;🤔 &lt;span style=&quot;color: #FFCE63;&quot;&gt;ALL-CON&lt;/span&gt;에서는 무엇을 담당하였나요?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;🖥 Front-end&lt;/b&gt;&lt;/summary&gt;

&lt;br /&gt;
&lt;img alt=&quot;TypeScript&quot; src=&quot;https://img.shields.io/badge/TypeScript-3178C6.svg?&amp;amp;style=for-the-badge&amp;amp;logo=TypeScript&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;React&quot; src=&quot;https://img.shields.io/badge/React-61DAFB.svg?&amp;amp;style=for-the-badge&amp;amp;logo=React&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Redux&quot; src=&quot;https://img.shields.io/badge/Redux-764ABC.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Redux&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Sass&quot; src=&quot;https://img.shields.io/badge/Sass-CC6699.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Sass&amp;amp;logoColor=white&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;div&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인페이지&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;콘서트 알람 조회 &amp;amp; 요청 기능 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;콘서트 댓글 작성 유효성 검사 &amp;amp; 수정 &amp;amp; 삭제 기능 구현&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;콘서트페이지&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;콘서트 페이지 레이아웃 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;콘서트 조회수순 &amp;amp; 임박예정순 &amp;amp; 등록일순 조회 기능 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;콘서트 상세 페이지 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;카카오 개발자 도구를 이용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;카카오맵 API&lt;/code&gt; 기능 구현&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;모달&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;로그인 모달 창 구현
            &lt;ul&gt;
              &lt;li&gt;일반 로그인 &amp;amp; 구글 &amp;amp; 카카오 소셜 로그인 기능 구현&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;회원가입 모달 창 구현
            &lt;ul&gt;
              &lt;li&gt;회원가입 유효성 검사 기능 구현&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;비밀번호 찾기 모달 창 구현
            &lt;ul&gt;
              &lt;li&gt;타이머 &amp;amp; SMS 발송 및 입력값 유효성 검사 기능 구현&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;⚙️ Back-end&lt;/b&gt;&lt;/summary&gt;
	
&lt;br /&gt;
&lt;img alt=&quot;JavaScript&quot; src=&quot;https://img.shields.io/badge/JavaScript-F7DF1E.svg?&amp;amp;style=for-the-badge&amp;amp;logo=JavaScript&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Node.js&quot; src=&quot;https://img.shields.io/badge/Node.js-339933.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Node.js&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Express&quot; src=&quot;https://img.shields.io/badge/Express-000000.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Express&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;MySQL&quot; src=&quot;https://img.shields.io/badge/MySQL-4479A1.svg?&amp;amp;style=for-the-badge&amp;amp;logo=MySQL&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Sequelize&quot; src=&quot;https://img.shields.io/badge/Sequelize-52B0E7.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Sequelize&amp;amp;logoColor=white&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;div&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;구조 작성&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;라우터 &amp;amp; 컨트롤러 뼈대 구조 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Sequelizer 설정
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migrations&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seeders&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;associations&lt;/code&gt; 설정&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;민감정보 암호화&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto&lt;/code&gt;를 이용한 암호화
            &lt;ul&gt;
              &lt;li&gt;해쉬 알고리즘과 솔트를 이용한 민감정보 암호화&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;로그인 컨트롤러&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JWT&lt;/code&gt; 인증방식 로그인 기능 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;닉네임 중복없는 OAuth 소셜 로그인 기능 구현
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;구글 API&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;카카오 API&lt;/code&gt; 를 이용한 두가지 로그인 방식 지원&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;문자 인증 컨트롤러&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Twillio&lt;/code&gt;를 이용한 6자리 난수 코드 SMS 전송&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;웹 크롤링&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cheerio&lt;/code&gt;를 이용한 웹 크롤러 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node Schedule&lt;/code&gt;을 이용한 크롤링 자동화 구현&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;🔧 Deployment&lt;/b&gt;&lt;/summary&gt;
	
&lt;br /&gt;
&lt;img alt=&quot;Amazon AWS&quot; src=&quot;https://img.shields.io/badge/Amazon AWS-232F3E.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Amazon AWS&amp;amp;logoColor=white&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;div&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;클라이언트 배포 자동화&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3&lt;/code&gt;를 이용한 클라이언트 배포&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CloudFront&lt;/code&gt;를 이용한 클라이언트 HTTPS 배포&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodePipeLine&lt;/code&gt;을 이용한 배포 자동화&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route 53&lt;/code&gt;을 이용한 도메인 연결&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-개인-기술-발표-영상&quot;&gt;🎥 개인 기술 발표 영상&lt;/h2&gt;

&lt;iframe width=&quot;1028&quot; height=&quot;578&quot; src=&quot;https://www.youtube.com/embed/4Z4uoshjOQ4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q. 왜 Cheerio를 사용했나요?&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; HTML / XML 문서를 매우 쉽게 데이터 파싱 및 추출은 물론이며, 정말 빠른 속도로 가져올 수 있기에 선택하였습니다. 빠른 속도와 더불어 적은 리소스로 서버의 부담을 최대한 줄일 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q. 왜 node-schedule을 사용했나요?&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; 앞서 말씀드린대로 무분별한 크롤링이 아닌, 1일 1회의 크롤링을 제어하기 위해 작업을 반복적으로 그리고 서버 정기점검 시간을 피할 수 있는 특정시간에 처리해야 할 수 있어야 했습니다.&lt;/p&gt;

&lt;p&gt;npm compare 사이트를 통해 대표적인 스케쥴러 라이브러리 3가지를 선정하였으며, 그중 Agenda는 mongo DB가 반드시 필요하므로 제외하였습니다.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155177170-787ed73c-b5f3-4320-abb0-b2d445f31074.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
node Schedule 라이브러리는 가장 역사가 길며 다운로드수가 많은걸 보아 다양한 유저들이 사용하였다 판단되므로 에러핸들링하기 가장 진입장벽이 낮아보이는 node-schedule 라이브러리를 선택하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=waving&amp;amp;color=FFCE63&amp;amp;height=230&amp;amp;section=footer&quot; alt=&quot;Footer&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jan 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/22.01.26.Final-Project/</link>
        <guid isPermaLink="true">http://localhost:4000/project/22.01.26.Final-Project/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>코드스테이츠 Final Project [ALL-CON] 회고</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=soft&amp;amp;color=FFCE63&amp;amp;height=100&amp;amp;section=header&quot; alt=&quot;header&quot; /&gt;&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;https://all-con.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/152898834-c2e127a6-9431-4841-a6d0-21f532b7b07e.png&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;&lt;b&gt;[ALL-CON]&lt;/b&gt;&lt;/span&gt; 콘서트 예매정보부터 친구까지 찾아주는 
&lt;br /&gt;
콘서트 종합 정보 플랫폼 🎟️
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;final-project-회고&quot;&gt;Final Project 회고&lt;/h2&gt;

&lt;p&gt;코드스테이츠 34기 마지막 과정인 파이널 프로젝트를  백엔드 포지션으로 마무리하며, 기획은 어떻게? 어떤 작업을 하였고 또 그 과정에서 어떤 부분에서 고민을 경험했는지 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;우선 완성된 프로젝트 배포링크와 Gihub 저장소 링크 그리고 프로젝트 안내 문서의 링크는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://all-con.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;&amp;#160;👉 ALL-CON 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://github.com/codestates/ALL-CON&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;&amp;#160;👉 Github 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.01.26.Final-Project/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;&amp;#160;👉 Blog 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;기획&quot;&gt;기획&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;기획단계는 1주일 정도 걸렸다.&lt;br /&gt; 
사실 기획은 전문 분야가 아니기 때문에 다들 많이 미숙했지만 팀원들 모두 새벽 늦은시간까지 머리를 맞대어 최선의 결과가 나온거라 생각한다.&lt;/p&gt;

&lt;p&gt;다만 First Project에서 한번 겪었던 만큼, 서비스 주제 선정은 너무 지체되지 않게끔 진행하였고 주제에 알맞는 기술들을 추려서 주제를 선정하였다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;선정되지-못한-주제들과-이유&quot;&gt;선정되지 못한 주제들과 이유&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;지금 다시 보니 재밌는 주제들이 많이 나왔던거 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;21.12.27&lt;/strong&gt; 주제선정을 위해 아이디어 회의를 기록한 내용중 선정되지 못했던 주제들을 찾아보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155274828-2699f886-f1e6-4d34-bdf8-bf7c46700814.png&quot; alt=&quot;스크린샷, 2022-02-23 16-08-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여러 의견이 나왔지만 회의 결과 &lt;em&gt;“너무 위치기반에 중점을 둔 서비스는 피하자!”&lt;/em&gt;  &lt;del&gt;(어떻게 해도 당근마켓 스러워진다..)&lt;/del&gt; 였다.&lt;/p&gt;

&lt;p&gt;CRUD에 중점을 둔 서비스는 2주차에 해봤기에 SNS나 게시판 서비스 보다는 색 다른 웹페이지를 만들어 보자는 생각으로 위 4개의 주제들은 모두 탈락하였다&lt;/p&gt;

&lt;p&gt;그리하여 현재 &lt;span style=&quot;font-size: 1em; color: #FFCE63;&quot;&gt;&lt;b&gt;ALL-CON&lt;/b&gt;&lt;/span&gt; 과 &lt;del&gt;(유사한)&lt;/del&gt; 주제가 선정되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;원래는 &lt;a href=&quot;https://www.kopis.or.kr/por/main/main.do&quot; target=&quot;_blank&quot;&gt;KOPIS 공연예술 통합전산망&lt;/a&gt;을 이용한 콘서트 정보 안내 사이트였지만..  주제가 다소 바뀌었다. 이유는 뒤에서 설명하겠다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;프로젝트-레이아웃-선정&quot;&gt;프로젝트 레이아웃 선정&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;주제 선정을 마치고 나서 웹사이트 디자인에 대해서 논의를 시작하였고, 여러 레이아웃들이 제시되었었다.&lt;/p&gt;

&lt;p&gt;메인페이지만 추려서 보여주자면 아래와 같다.
&lt;br /&gt;
&lt;del&gt;(콘서트 이름이 정해지지 않은 상태라 이름들도 가지각색이다 😅)&lt;/del&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155278841-3fe06e9f-26d6-42ed-9929-45319db4b31a.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155278843-b9e75db6-b1c3-44ce-9458-7567d1784c78.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/155278846-e33e2d82-a66a-4937-bfde-ebaaf42e2616.png&quot; /&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;(초기에는 캘린더 라이브러리를 사용해서 콘서트 일정을 달력에서 보여줄 생각도 하였으나 시간 문제로 사용을 하지 못하였다. 😭)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;이중 첫번째 레이아웃이 회의 결과 채택이 되었으며, 프론트엔드 두 분이 주도적으로 UI/UX와 메인 컬러로 쓰일 색상을 선정하여 이를 토대로 &lt;a href=&quot;https://www.figma.com/&quot; target=&quot;_blank&quot;&gt;FIGMA&lt;/a&gt;에서 프로토타입을 제작하였다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;서비스-핵심-기술-선정&quot;&gt;서비스 핵심 기술 선정&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;이부분이 사실 프로젝스 설계 “Miss” 였다.&lt;/p&gt;

&lt;p&gt;사실 프론트엔드에서는 First Project에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeError&lt;/code&gt;를 많이 겪었기에 이번에는 &lt;img alt=&quot;TypeScript&quot; src=&quot;https://img.shields.io/badge/TypeScript-3178C6.svg?&amp;amp;style=for-the-badge&amp;amp;logo=TypeScript&amp;amp;logoColor=white&quot; /&gt;를 사용해보고 싶다라는 의견으로 모아졌기 때문에 개발언어만 바꾸어서 서비스 개발에 임하면 되었기에 핵심기술 선정이 어렵진 않았다.&lt;/p&gt;

&lt;p&gt;문제는 백엔드 서버 설계에서 발생하였다.&lt;br /&gt;
콘서트 정보는 &lt;a href=&quot;https://www.kopis.or.kr/por/main/main.do&quot; target=&quot;_blank&quot;&gt;KOPIS 공연예술 통합전산망&lt;/a&gt;에서 가져오면 되겠지? 싶었는데 여기서 1차 문제가 발생한다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-size: 1.5em; color: gray;&quot;&gt;&lt;b&gt;&quot;콘서트 정보만 없다...&quot;&lt;/b&gt;&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
아뿔사, “공연 / 연극 / 뮤지컬” … 심지어 “아동”도 있지만 콘서트 정보는 그 어디에서도 찾을 수 없었다..&lt;/p&gt;

&lt;p&gt;주제 선정을 다시해야하나 생각을 했지만, 기술적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; 라이브러리를 이용하여 &lt;strong&gt;웹 크롤링&lt;/strong&gt;을 할 수 있다는 걸 알게되었고 “인터파크 티켓”, “YES24” 두 대형 티켓팅 사이트에서 콘서트 정보를 가져오기로 결정하였다.&lt;/p&gt;

&lt;p&gt;다만, 두 사이트에서 제공하는 자료가 정형화 되지않은 자료이기 때문에 NoSQL인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MongoDB&lt;/code&gt;를 사용해야하나 고민하였지만, 전처리만 잘해서 DB에 저장한다면 RDBMS로도 충분히 구현이 가능할 듯하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;으로 진행하였다.&lt;/p&gt;

&lt;p&gt;또한, 해당 사이트에서 가져올 정보들은 매일 특정한 시간에 매일 수행되어야 하므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node Schedule&lt;/code&gt;을 통해서 EC2에서 자동화 처리를 구현하였다.&lt;/p&gt;

&lt;p&gt;지금 생각해보니 외부 API가 지원되지 않았기에 오히려 폭넓은 라이브러리를 사용할 수 있던 경험이된것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발과정&quot;&gt;개발과정&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;매일 AM 09:00 ~ PM 18:00 이후 2시간의 자유시간을 갖고 PM 20:00~ … 마감시간은 정하지 않았는데 보통 새벽 3시정도까지 정말 밥만 먹고 화장실가는 시간 외에는 4주간 온전히 몰두하였다.&lt;/p&gt;

&lt;p&gt;덕분에 프로젝트가 끝난 뒤 비타민 D 부족으로 병원신세 지는 팀원분도 발생하였다.. 힘든 과정을 함께 헤쳐나간 팀원들이 자랑스럽다.&lt;/p&gt;

&lt;p&gt;코드의 컨텍스트를 작성한 방법은 사실 개인의 습관마다 다를 수 있고, 사용하는 문법이 조금씩 다를 수 있으니 이 부분은 생략하도록 하고 개발과정에서 팀 단위로 협업을 해낸 과정을 간략하게 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;집단-지성의-힘&quot;&gt;집단 지성의 힘&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;“정말 이건 참 잘했다! 👍”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 프로젝트 기간 동안 우리 팀이 가장 잘한 점을 꼽으라면, 똘똘 뭉쳐 문제점을 해결하는 팀원들의 태도를 꼽겠다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-size: 1.5em; color: gray;&quot;&gt;&lt;b&gt;&quot;다들 바쁘지 않을까?&quot;&lt;br /&gt;&quot;이런것도 모른다고 생각하지 않을까?&quot;&lt;/b&gt;&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
이런 생각을 전혀 하지 못할 만큼 환경이 잘 구성되었던거 같다.&lt;/p&gt;

&lt;p&gt;서로 질문하고 학습한 내용을 매일매일 공유하고, 또한 자신의 코드를 화면공유를 통해서 &lt;strong&gt;&lt;em&gt;“왜 이런식으로 작성하였고, 어떤 부분에서 막혀 어려움을 겪고 있는지”&lt;/em&gt;&lt;/strong&gt; 허물없이 많은 대화를 통해 문제를 해결하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;대충은-없다&quot;&gt;대충은 없다&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;팀원들 모두 욕심이 많아서 그런지 사소한 포인트라도 쉽게 넘어가지 않았다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;span style=&quot;font-size: 1.5em; color: gray;&quot;&gt;&lt;b&gt;&quot;이정도면 됐잖아?&quot;&lt;/b&gt;&lt;/span&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
작은 기능이라도 구현을 완성하면 서비스 시연을 팀원들끼리 진행을 하였다. &lt;br /&gt;
바로바로 즉각적인 피드백을 주고받아 개선할 내용들을 바로바로 개선하였고 그 결과, 한결 더 간결한 코드와 높은 완성도를 가진 웹 서비스가 탄생한것 같다.&lt;/p&gt;

&lt;p&gt;물론 아직 부족한게 많고, 프로젝트가 다 끝난 뒤 보니 아쉬운점이 모든 페이지에서 계속 보이는건 어쩔수 없다.&lt;/p&gt;

&lt;p&gt;다만, 위와같은 과정마저 없었다면 지금보다 더 후회스러운 결과가 나오지 않았을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;아쉬운-점&quot;&gt;아쉬운 점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;사실 너무 많다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;크롤링 대상 사이트 추가&lt;/li&gt;
  &lt;li&gt;예매 대행까지 가능한 결제 플랫폼 도입&lt;/li&gt;
  &lt;li&gt;애니메이션 라이브러리로 모두 교체&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soket.io&lt;/code&gt; 기능 추가&lt;/li&gt;
  &lt;li&gt;응답속도 개선을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redis&lt;/code&gt; 도입&lt;/li&gt;
  &lt;li&gt;위치기반 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kakao Map API&lt;/code&gt; 도입, 근처 콘서트 검색&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서비스를 본격적으로 키워 광고도 달아보자 등등.. 너무나도 하고싶은게 많고 현재 배포한 웹사이트는 너무 부족한점이 많다.&lt;/p&gt;

&lt;p&gt;4주라는 시간이 서비스를 제작하는데 얼마나 부족한 시간인지 깨닳았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;개선하고-성장할-점&quot;&gt;개선하고 성장할 점&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;팀원들과 합의하여 설 연휴를 보낸 뒤 ALL-CON 프로젝트 리팩토링 기간을 1~2주가량 진행해 볼 예정이다.&lt;/p&gt;

&lt;p&gt;기간을 짧게 가져가는 이유는 너무 길게 프로젝트 리팩토링을 위해 가져가기보다는, 다들 주니어 개발자로써 현업에서 커리어를 쌓아가는게 더 중요하다 생각되기 때문에 너무 길지 않게 진행하기로 결정하였다.&lt;/p&gt;

&lt;p&gt;너무 아쉬웠던 추가로 구현해보고 싶은 기능들이 있다면 구현해보고, 개발기간 동안 아쉬웠던 코드들 혹은 개선을 미뤄뒀던 코드 내용들을 간추려서 리팩토링해 볼 예정이다. &lt;br /&gt;
&lt;del&gt;(기간이 길지 않기 때문에 많은 욕심은 부리지 않으려 한다.)&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;final-project-리팩토링&quot;&gt;Final Project 리팩토링&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(수정 22.02.18)&lt;/strong&gt;&lt;/p&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;자세히보기&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://jh8459.github.io/project/22.02.07.refactoring/&quot; target=&quot;_blank&quot;&gt;🛠️ 1일차 - 서버 리팩토링 우선순위 선정&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.08.refactoring/&quot; target=&quot;_blank&quot;&gt;🛠️ 2일차 - 민감정보 암호화&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.09.refactoring/&quot; target=&quot;_blank&quot;&gt;🛠️ 3일차 - 하나의 요청에 두개 이상의 응답시 발생하는 에러 핸들링&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.10.refactoring/&quot; target=&quot;_blank&quot;&gt;🛠️ 4일차 - 유효하지 않은 로그인 상태 검증&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.11.refactoring/&quot; target=&quot;_blank&quot;&gt;🛠️ 5일차 - Articles 테이블 스키마 수정(1)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.14.Project/&quot; target=&quot;_blank&quot;&gt;🛠️ 6일차 - Articles 테이블 스키마 수정(2)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.15.Project/&quot; target=&quot;_blank&quot;&gt;🛠️ 7일차 - 티켓 오픈 임박예정 콘서트 정보만 보여주기&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://jh8459.github.io/project/22.02.16.Project/&quot; target=&quot;_blank&quot;&gt;🛠️ 8일차 - Timezone 수정&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=soft&amp;amp;color=FFCE63&amp;amp;height=100&amp;amp;section=footer&quot; alt=&quot;Footer&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Jan 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/22.01.25.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/22.01.25.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>[6699] 목표와 다짐들을 글로 적고 실천하며 소통하는 동기부여 커뮤니티 ✍️</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=waving&amp;amp;color=6F777D&amp;amp;height=230&amp;amp;section=header&amp;amp;text=목표와&amp;#160;다짐들을&amp;#160;글로&amp;#160;적고&amp;#160;실천하며&amp;#160;소통하는&amp;#160;동기부여&amp;#160;커뮤니티&amp;amp;fontColor=FFFFFF&amp;amp;fontSize=25&quot; alt=&quot;header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;del&gt;&lt;a href=&quot;https://daily6699.co.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1.5em; color: #6F777D;&quot;&gt;&amp;#160;👉 6699 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/del&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://github.com/codestates/6699&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1.5em; color: #6F777D;&quot;&gt;&amp;#160;👉 Github 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://jh8459.github.io/retrospect/21.12.24.Retrospect/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1.5em; color: #6F777D;&quot;&gt;&amp;#160;👉 Project 회고 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 1em; color: #6F777D;&quot;&gt;6699&lt;/span&gt;&lt;/strong&gt;는 &lt;b&gt;명언&lt;/b&gt;을 보는 것에 그치지 않고 실천까지 이어질 수 있도록 도와주는 동기부여 커뮤니티 입니다.&lt;/li&gt;
  &lt;li&gt;동기부여 글을 보고 타올랐던 열정🔥이 금방 사라진 경험이 있으신가요?&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;명언&lt;/b&gt;을 보는 데에 그치지 않고 실천까지 모두와 함께해요🏃‍♂️🏃‍♀️🏃&lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;&lt;a href=&quot;https://daily6699.co.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156319069-09fc20f8-e777-48ee-ab32-f9c194c68f93.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/center&gt;

&lt;h2 id=&quot;-6699는-무슨-뜻인가요&quot;&gt;🤔 &lt;span style=&quot;color: #6F777D;&quot;&gt;6699&lt;/span&gt;는 무슨 뜻인가요?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;b&gt;명언&lt;/b&gt;은 동기부여를 일으키고&lt;br /&gt;우리를 움직이게 만드는 불씨입니다. 🔥&lt;br /&gt;&lt;br /&gt;
변화를 불러일으킬 당신의 &lt;b&gt;명언&lt;/b&gt;을 기다리고 있는&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156368938-41d7893d-1c4d-457c-aec7-260a856d91a6.png&quot; width=&quot;150&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
빈 따옴표 &lt;b&gt;&quot; &quot;&lt;/b&gt; 를 숫자 6과 9를 이용해서 형상화 한 모양입니다.
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-6699에서는-무엇을-할-수-있나요&quot;&gt;🤔 &lt;span style=&quot;color: #6F777D;&quot;&gt;6699&lt;/span&gt;에서는 무엇을 할 수 있나요?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;자세히보기&lt;/b&gt;&lt;/summary&gt;
&lt;br /&gt;

&lt;div&gt;

      &lt;p&gt;👉 &lt;i&gt;모두와 실천할 수 있는 명언을 만들 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;명언에 맞는 게시물을 올려서 모두와 공유할 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;나를 자극하는 명언과 게시물들을 분야별로 모아서 볼 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;내가 만든 명언과 나의 게시물을 모아서 나의 명언을 실천한 순간들을 모아서 볼 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;다른 사람의 게시물에 댓글을 달아서 소통할 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;다른 사람의 명언에 좋아요를 눌러, 내가 영감을 받은 명언을 모아서 볼 수 있어요.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;
👉 &lt;i&gt;다른 사람의 게시물에 좋아요를 눌러, 나에게 자극을 주는 게시물들을 모아서 볼 수 있어요.&lt;/i&gt;&lt;/p&gt;

    &lt;/div&gt;
&lt;/details&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-6699-서비스-기능별-시연&quot;&gt;🎬 &lt;span style=&quot;color: #6F777D;&quot;&gt;6699&lt;/span&gt; 서비스 기능별 시연&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;로그인&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156371153-89512e9e-a656-4b11-b8d5-f8a6248782d3.gif&quot; alt=&quot;login&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;회원가입&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156371271-d6f8b835-34f9-4812-9193-3bb4f0069081.gif&quot; alt=&quot;signup&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인 페이지(카테고리 별 명언목록 보기) &lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156371406-7ddc1a01-eee3-481a-bf88-7561a70c7b24.gif&quot; alt=&quot;main&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인 페이지(명언 별 게시글 조회 &amp;amp; 게시글 댓글 작성)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156371780-8e8f9556-f3dd-4cdc-853d-648e850bf153.gif&quot; alt=&quot;articles&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인 페이지(명언 작성)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156372300-9a3898c7-4d9e-4c61-bfc1-d6405c73c5a5.gif&quot; alt=&quot;createSaying&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;메인 페이지(게시글 작성)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156372336-2772469b-fca0-4993-9c9f-fcf69d1d418b.gif&quot; alt=&quot;createArticle&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;명언 랭킹 페이지(모든 명언 보기)&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156372627-3e39cd26-ffbd-4503-82b6-9a62e3347c73.gif&quot; alt=&quot;ranking&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;마이페이지&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156372838-911ac1d2-dc09-4bac-8662-f4e29212ae7d.gif&quot; alt=&quot;mypage&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;로그아웃 &amp;amp; 회원탈퇴&lt;/summary&gt;

&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156373186-5d12981b-8b38-4dde-b97b-83827d015372.gif&quot; alt=&quot;logout&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-6699에서는-무엇을-담당하였나요&quot;&gt;🤔 &lt;span style=&quot;color: #6F777D;&quot;&gt;6699&lt;/span&gt;에서는 무엇을 담당하였나요?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;🖥 Front-end&lt;/b&gt;&lt;/summary&gt;

&lt;br /&gt;
&lt;img alt=&quot;JavaScript&quot; src=&quot;https://img.shields.io/badge/JavaScript-F7DF1E.svg?&amp;amp;style=for-the-badge&amp;amp;logo=JavaScript&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;React&quot; src=&quot;https://img.shields.io/badge/React-61DAFB.svg?&amp;amp;style=for-the-badge&amp;amp;logo=React&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Redux&quot; src=&quot;https://img.shields.io/badge/Redux-764ABC.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Redux&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;styled-components&quot; src=&quot;https://img.shields.io/badge/styled-components-DB7093.svg?&amp;amp;style=for-the-badge&amp;amp;logo=styled-components&amp;amp;logoColor=white&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;div&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;명언 랭킹 페이지&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;랭킹 페이지 레이아웃 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;카테고리 별 명언 조회 기능 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;페이지네이션 구현&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;모달&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;로그인 모달 창 구현&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;회원가입 모달 창 구현
            &lt;ul&gt;
              &lt;li&gt;회원가입 유효성 검사 기능 구현&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;⚙️ Back-end&lt;/b&gt;&lt;/summary&gt;
	
&lt;br /&gt;
&lt;img alt=&quot;JavaScript&quot; src=&quot;https://img.shields.io/badge/JavaScript-F7DF1E.svg?&amp;amp;style=for-the-badge&amp;amp;logo=JavaScript&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Node.js&quot; src=&quot;https://img.shields.io/badge/Node.js-339933.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Node.js&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Express&quot; src=&quot;https://img.shields.io/badge/Express-000000.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Express&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;MySQL&quot; src=&quot;https://img.shields.io/badge/MySQL-4479A1.svg?&amp;amp;style=for-the-badge&amp;amp;logo=MySQL&amp;amp;logoColor=white&quot; /&gt;
&lt;img alt=&quot;Sequelize&quot; src=&quot;https://img.shields.io/badge/Sequelize-52B0E7.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Sequelize&amp;amp;logoColor=white&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;div&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;구조 작성&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;라우터 &amp;amp; 컨트롤러 뼈대 구조 구현&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;로그인 컨트롤러&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JWT&lt;/code&gt; 인증방식 로그인 기능 구현&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;🔧 Deployment&lt;/b&gt;&lt;/summary&gt;
	
&lt;br /&gt;
&lt;img alt=&quot;Amazon AWS&quot; src=&quot;https://img.shields.io/badge/Amazon AWS-232F3E.svg?&amp;amp;style=for-the-badge&amp;amp;logo=Amazon AWS&amp;amp;logoColor=white&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;div&gt;

    &lt;details&gt;
&lt;summary&gt;&amp;#160;&amp;#160;HTTPS 배포&lt;/summary&gt;

&lt;div&gt;

        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3&lt;/code&gt;를 이용한 클라이언트 배포&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EC2&lt;/code&gt; 인스턴스 서버 생성 &amp;amp; PM2를 이용한 프로세서 관리&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CloudFront&lt;/code&gt;를 이용한 클라이언트 HTTPS 배포&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadBalencer&lt;/code&gt;를 이용한 웹 서버 HTTPS 배포&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route 53&lt;/code&gt;을 이용한 도메인 연결&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
&lt;/details&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=waving&amp;amp;color=6F777D&amp;amp;height=230&amp;amp;section=footer&quot; alt=&quot;Footer&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/21.12.25.Project/</link>
        <guid isPermaLink="true">http://localhost:4000/project/21.12.25.Project/</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>코드스테이츠 First Project [6699] 회고</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=soft&amp;amp;color=6F777D&amp;amp;height=100&amp;amp;section=header&quot; alt=&quot;header&quot; /&gt;&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156319069-09fc20f8-e777-48ee-ab32-f9c194c68f93.png&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 1em; color: #6F777D;&quot;&gt;&lt;b&gt;[6699]&lt;/b&gt;&lt;/span&gt; 목표와 다짐들을 글로 적고 실천하며
&lt;br /&gt;
소통하는 동기부여 커뮤니티 ✍️
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;first-project-회고&quot;&gt;First Project 회고&lt;/h2&gt;

&lt;p&gt;12.10 ~ 12.24 2주 기간동안 코드스테이츠 34기 정규과정은 끝마치고 조그만 규모의 첫번째 프로젝트를 완성하였다.&lt;/p&gt;

&lt;p&gt;백엔드 포지션으로 참여하는 동안 기획은 어떻게? 어떤 작업을 하였고 또 그 과정에서 어떤 부분에서 고민을 경험했는지 글로 남겨보려 한다.&lt;/p&gt;

&lt;p&gt;우선 완성된 프로젝트 &lt;del&gt;배포링크(배포 도메인은 현재 내려갔습니다.)&lt;/del&gt;와 Gihub 저장소 링크 그리고 프로젝트 안내 문서의 링크는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://daily6699.co.kr/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;del&gt;&lt;span style=&quot;font-size: 1em; color: #6F777D;&quot;&gt;&amp;#160;👉 6699 바로가기&amp;#160;&lt;/span&gt;&lt;/del&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://github.com/codestates/6699&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1em; color: #6F777D;&quot;&gt;&amp;#160;👉 Github 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;&lt;a href=&quot;https://jh8459.github.io/project/21.12.25.Project/&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none&quot;&gt;&lt;span style=&quot;font-size: 1em; color: #6F777D;&quot;&gt;&amp;#160;👉 Blog 바로가기&amp;#160;&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;기획&quot;&gt;기획&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;실제 프로젝트 기간은 팀원선정과 기획단계와 개발과정을 모두 합쳐 2주가 주어졌지만, 우리는 HA3 진행 전 마음이 맞는 팀원을 구해 기획을 우선적으로 틈틈히 진행하고있었다.&lt;/p&gt;

&lt;p&gt;왜냐하면, 선배 기수들에게 항상 들었던 말 때문이다.&lt;/p&gt;

&lt;center&gt;&lt;b&gt;&quot;시간이 너무나 부족하다..&quot;&lt;/b&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
덕분에 좋은 팀원들과 함께 프로젝트를 진행할 수 있었다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;혹시 코드스테이츠를 수료중이시거나, 부트캠프로 코드스테이츠로 선택하신분들이 이 글을 본다면 프로젝트 4인 구성의 팀원은 미리미리 스터디활동이나 페어 프로그래밍중 마음에 맞는 분이 있다면 연락을 통해 미리 구하시는걸 &lt;strong&gt;강력히&lt;/strong&gt; 추천 드립니다.&lt;/em&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;선정되지-못한-주제들과-이유&quot;&gt;선정되지 못한 주제들과 이유&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;지금 다시 보니 재밌는 주제들이 많이 나왔던거 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;21.11.19&lt;/strong&gt; 주제선정을 위해 아이디어 회의를 기록한 내용중 선정되지 못했던 주제들을 찾아보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156325296-975fab84-f599-4a4d-bd7e-20ed70c9434a.png&quot; alt=&quot;스크린샷, 2022-03-02 17-36-36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여러 의견이 나왔고 그중 팀원들이 입을 모아 얘기한건 &lt;strong&gt;“CRUD에 중점을 둔 서비스 개발”&lt;/strong&gt; 이었다.&lt;/p&gt;

&lt;p&gt;CRUD가 가능한 게시판을 만들어보자가 목표였으며, 그 안의 담길 주제는 명언을 보며 되새김질할 수 있는 자기개발 인증 사이트를 만들어보기로 하였다.&lt;/p&gt;

&lt;p&gt;그리하여 현재 &lt;span style=&quot;font-size: 1em; color: #6F777D;&quot;&gt;&lt;b&gt;6699&lt;/b&gt;&lt;/span&gt;의  주제가 선정되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;프로젝트-레이아웃과-이름-선정&quot;&gt;프로젝트 레이아웃과 이름 선정&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;주제 선정을 마치고 나서 웹사이트 디자인에 대해서 논의를 시작하였다.&lt;/p&gt;

&lt;p&gt;컨셉만 우선 그려보았으며 웹 사이트의 컨셉은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156327426-9626b59b-c1a9-45ba-b12c-692ea20fe9a8.png&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/156327662-0b5ef4c1-b561-4329-928d-a1f0dafc574a.png&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;글/명언에 관련된 주제이기 때문에 메인 컬러로 쓰일 색상은 흰색과 검정색이 선정되었으며, 말따옴표를 텍스트로 형상화면 &lt;strong&gt;6699&lt;/strong&gt;와 유사하다는 점에서 착안하여 서비스할 프로젝트의 이름으로 선정하였다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발과정&quot;&gt;개발과정&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;우선 잘 만들고 화려하게 만드는것도 좋지만 첫번째 프로젝트이다 보니, 외부 라이브러리등은 최소화하고 코드스테이츠에서 배운 과정으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;만 사용하여 Vanilla JS로 개발하였다.&lt;/p&gt;

&lt;p&gt;매일 AM 09:00 ~ PM 18:00 이후 2시간의 자유시간을 갖고 PM 20:00~ … 보통 AM 03:00에 마쳤으나, 마지막 발표를 앞둔 시점에서는 해뜨면 잠깐 2시간? 정도 쪽잠을 잔거같다.&lt;br /&gt;
정말 주말도 없이 정신없이 모니터만 보고 코드를 짠거 같다.&lt;/p&gt;

&lt;p&gt;코딩을 배운 이래 처음으로 온전히 몰두할 수 있던 경험을 겪어보았으며, 라이브러리 없이 순수하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 언어만 사용하여 서버와 클라이언트 개발 경험을 가져보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;아쉬운-점&quot;&gt;아쉬운 점&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;사실 이번 프로젝트는 최초 기획한대로 완성하지 못하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배포 자동화 실패 (수동 배포)&lt;/li&gt;
  &lt;li&gt;AWS 사용 미숙으로 설정 오류
    &lt;ul&gt;
      &lt;li&gt;RDS와 EC2 리전을 북미로 설정 😅&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최초 기획한 기능 구현 실패
    &lt;ul&gt;
      &lt;li&gt;댓글 CRUD 기능 구현 실패 😇&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 기획한 기능을 모두 구현하지 못하였다. &lt;del&gt;(특히 댓글 기능은 아예 손 대지 못하였다.)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;또한 배포는 성공하였지만 잘못된 리전설정(북미..😅)으로 인해 속도가 굉장히 저하되는 이슈가 있어서 프로젝트 발표는 로컬환경으로 대신 진행하게되었다.&lt;/p&gt;

&lt;p&gt;이 실패의 경험을 기반으로 파이널 프로젝트는 문제없이 완수해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;개선하고-성장할-점&quot;&gt;개선하고 성장할 점&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;우선 AWS 배포쪽을 공부를 더 해서 4주 프로젝트는 꼭 배포 자동화를 도전하고 싶다.&lt;/p&gt;

&lt;p&gt;또한 이번 프로젝트를 진행하며 소셜 로그인도 기능적으로 구현 해보지 못하였으며 회원가입 등 개인정보를 다룰 때, 보안적인 측면은 고려를 해본적이 없다…😅&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 프로젝트땐 꼭 위 두가지는 개선해봐야겠다. 또한, 기회가 된다면 6699 프로젝트도 리팩토링 과정을 거쳐 기획한 사이즈만큼은 완성해보고 싶다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://capsule-render.vercel.app/api?type=soft&amp;amp;color=6F777D&amp;amp;height=100&amp;amp;section=footer&quot; alt=&quot;Footer&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/21.12.24.Retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/21.12.24.Retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
      <item>
        <title>코드스테이츠 Project 시작</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/140646268-d8056c13-e7ee-4ea5-8e15-e282a26f6a0d.png&quot; alt=&quot;스크린샷, 2021-11-07 22-08-33&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;retrospect&quot;&gt;Retrospect&lt;/h2&gt;

&lt;p&gt;우선 프로젝트가 아직 완성된게 아니라 회고는 아니고 시작 전 다짐 및 마음가짐을 적어보려 간단히 남긴다.&lt;/p&gt;

&lt;h3 id=&quot;first-project-팀-선정&quot;&gt;First Project 팀 선정&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;우선 Section3 HA 이전에 선배 기수들에게 프로젝트에 관련한 내용을 많이 들었다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;미리미리 준비해야 한다. 팀이 절반이다. 기획부터 시간이 오래 걸리므로 미리미리 준비하고 대비해라.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;우선 틀린 말은 아닌거같다. 저번 주 금요일인 12.10 팀 설문조사가 이뤄지고, 미리 프로젝트 진행전 기획을 진행해 오던 팀원들을 적어서 내었고, 해당 팀원으로 구성된 팀이 오늘 부로 결정이 되었다.&lt;/p&gt;

&lt;p&gt;그리고 SR 기획서를 오늘 포함하여 이틀안에 제출을 해야하는데, URClass에서 제공되는 SR 기획서에 기입해야할 양이 생각보다 많다.&lt;br /&gt;
기획서 및 Wiki 작성을 진심으로 임해야 할 듯 하다.&lt;/p&gt;

&lt;p&gt;만약 후배기수가 이 글을 읽는다면, 팀을 미리 꾸리고 &lt;del&gt;(물론 마음에 맞는 팀원 구하기가 어렵습니다..)&lt;/del&gt; 기획의 방향정도는 충분한 회의를 통하여 결정 후 팀 선정에 진입하길 권유하고 싶다. 👍&lt;/p&gt;

&lt;h3 id=&quot;앞으로는&quot;&gt;앞으로는?&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/83164003/145743411-a9f1a1ab-51e2-46d4-8906-4b53e5dd21d1.jpg&quot; alt=&quot;project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 진짜 프로젝트 결과물을 팀 협업을 통해 만들어 내야 한다.&lt;br /&gt;
익숙하지 않는 Git Flow로 협업을 이루고, 작업 분담을 해가며 프로젝트를 진행해내야 한다.&lt;/p&gt;

&lt;p&gt;팀 룰을 정하였고 &lt;del&gt;(최소 6주??간 방콕)&lt;/del&gt;, 웹 페이지를 완성하기 위한 최소한의 TODO 리스트를 작성해두고 1차 프로젝트의 기획의 갈무리는 어느정도 되었다 생각한다.&lt;/p&gt;

&lt;p&gt;다만, 아직 익숙하지 않은 툴들과 프레임워크를 통해서 협업을 진행해야 한다는 사실은 막연한 두려움이 반, 그리고 좋은 결과물을 기대하는 기대감이 나머지 절반으로 두근거리고 있다.&lt;/p&gt;

&lt;p&gt;당분간은 두개의 프로젝트에 전념하기 위해서 블로그는 당분간 글 작성이 없을거 같다.&lt;br /&gt;
두개의 프로젝트가 모두 끝난 후 회고 글을 작성해야겠다.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospect/21.12.13.retrospect/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospect/21.12.13.retrospect/</guid>
        
        
        <category>Retrospect</category>
        
      </item>
    
  </channel>
</rss>