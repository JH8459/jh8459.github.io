<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-29T17:48:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JHLog</title><author><name>JH8459</name></author><entry><title type="html">[Retrospect] 코드스테이츠 34기 수료</title><link href="http://localhost:4000/retrospect/22.01.28.Retrospect/" rel="alternate" type="text/html" title="[Retrospect] 코드스테이츠 34기 수료" /><published>2022-01-28T00:00:00+09:00</published><updated>2022-01-28T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/22.01.28.Retrospect</id><content type="html" xml:base="http://localhost:4000/retrospect/22.01.28.Retrospect/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/83164003/151650800-00ba9a63-5827-462a-91d3-e453381cc515.jpg" alt="수료증1024_1" /></p>

<h2 id="retrospect">Retrospect</h2>

<p>코드스테이츠 수료 직후 드는 감정을 한 문장으로 정의하자면<br /></p>

<h1 id="고생했고-이제-시작이다"><strong><em>고생했고 이제 시작이다.</em></strong></h1>

<p><br />
프로젝트 기간에는 평균 수면 시간 2~3시간.. 그동안 수료를 보며 달려왔던 관성이 있어서, 프로젝트가 끝난 뒤 어영부영 12시쯤 잠에 들려고 눈을 감으면 온갖 생각들로 잠자리가 편하지 않다.</p>

<p>우선 수료하는 오늘 느낀 감정에 대해서 간략히 적어보려한다.</p>

<h3 id="무엇을-배웠나">무엇을 배웠나?</h3>
<hr />

<p><img src="https://user-images.githubusercontent.com/83164003/151651548-2acaaae3-1ab1-4747-8bc3-98fb61cb819c.jpeg" alt="web-developer-skills" /></p>

<p>웹 개발에 전반적인 흐름과 설계 구조에 대하여 공부하였다.</p>

<p>우선 프로그래밍 언어로는 JavaScript를 집중적으로 배웠으며 네트워크 구조, 자료구조와 알고리즘 등 공학에 관련된 기초 지식을 쌓았다.</p>

<p>기술스택을 말하자면 프론트엔드 기술로는 React를 이용한 Client 개발 기술, Redux를 이용한 상태관리 SASS &amp; Styled Components 등의 CSS 기술 또한 배웠다.</p>

<p>백엔드 기술로는 Node.js와 Express를 이용한 Server 개발을 주축으로 내가 만든 서버와 클라이언트 환경을 AWS 환경을 통하여 배포까지 직접 할 수 있게 되었다. 👍</p>

<h3 id="앞으로는">앞으로는?</h3>
<hr />
<p>이제 주니어 개발자가 되기 위한 험난한 과정의 시작이다.😅<br />
취업에 가장 중요한 시점은 수료후 8~9주 정도라 생각한다.</p>

<p>일단 자소서와 이력서를 다듬을 예정이다.</p>

<p>매일매일 프로그래머스와 백준 알고리즘 문제 풀이를 통해 코딩 테스트를 대비해 볼 예정이다.<br />
백엔드 포지션 기술 면접 또한 대비할 예정이다.</p>

<p>코딩 테스트를 되도록 보는 회사를 찾아서 지원해볼 예정이다. <br />
비전공 출신인 신입 개발자가 눈에 띄는 포트폴리오를 보여주긴 어렵다 생각되므로 알고리즘 풀이에 시간을 쏟아 볼 예정이다.</p>

<p>그리고 팀원들과 함께 파이널 프로젝트 리팩토링 기간을 가져보며 취업 준비를 겸해볼 예정이다.</p>

<p>사실 아직 무슨 회사에서 일해보고 싶은지 생각해 본 적이 없다. 😅<br />
어떤 회사에 지원할지 우선 정하고 난 뒤 구직활동을 시작해 볼 예정이다.</p>

<p>원하는 진로로 취업하는 그날까지 파이팅이다. 👍</p>]]></content><author><name>JH8459</name></author><category term="Retrospect" /><summary type="html"><![CDATA[[Retrospect] 코드스테이츠 34기 수료]]></summary></entry><entry><title type="html">[Project] Final Project</title><link href="http://localhost:4000/project/22.01.26.Final-Project/" rel="alternate" type="text/html" title="[Project] Final Project" /><published>2022-01-26T00:00:00+09:00</published><updated>2022-01-26T00:00:00+09:00</updated><id>http://localhost:4000/project/22.01.26.Final%20Project</id><content type="html" xml:base="http://localhost:4000/project/22.01.26.Final-Project/"><![CDATA[<p>(작성중)</p>]]></content><author><name>JH8459</name></author><category term="Project" /><summary type="html"><![CDATA[[Project] Final Project]]></summary></entry><entry><title type="html">[Retrospect] 코드스테이츠 Final Project</title><link href="http://localhost:4000/retrospect/22.01.25.Retrospect/" rel="alternate" type="text/html" title="[Retrospect] 코드스테이츠 Final Project" /><published>2022-01-25T00:00:00+09:00</published><updated>2022-01-25T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/22.01.25.Retrospect</id><content type="html" xml:base="http://localhost:4000/retrospect/22.01.25.Retrospect/"><![CDATA[<p>(작성중)</p>]]></content><author><name>JH8459</name></author><category term="Retrospect" /><summary type="html"><![CDATA[[Retrospect] 코드스테이츠 Final Project]]></summary></entry><entry><title type="html">[Project] First Project</title><link href="http://localhost:4000/project/21.12.25.Project/" rel="alternate" type="text/html" title="[Project] First Project" /><published>2021-12-25T00:00:00+09:00</published><updated>2021-12-25T00:00:00+09:00</updated><id>http://localhost:4000/project/21.12.25.Project</id><content type="html" xml:base="http://localhost:4000/project/21.12.25.Project/"><![CDATA[<p>(작성중)</p>]]></content><author><name>JH8459</name></author><category term="Project" /><summary type="html"><![CDATA[[Project] First Project]]></summary></entry><entry><title type="html">[Retrospect] 코드스테이츠 First Project</title><link href="http://localhost:4000/retrospect/21.12.24.Retrospect/" rel="alternate" type="text/html" title="[Retrospect] 코드스테이츠 First Project" /><published>2021-12-24T00:00:00+09:00</published><updated>2021-12-24T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/21.12.24.Retrospect</id><content type="html" xml:base="http://localhost:4000/retrospect/21.12.24.Retrospect/"><![CDATA[<p>(작성중)</p>]]></content><author><name>JH8459</name></author><category term="Retrospect" /><summary type="html"><![CDATA[[Retrospect] 코드스테이츠 First Project]]></summary></entry><entry><title type="html">[Retrospect] 코드스테이츠 Project 시작</title><link href="http://localhost:4000/retrospect/21.12.13.retrospect/" rel="alternate" type="text/html" title="[Retrospect] 코드스테이츠 Project 시작" /><published>2021-12-13T00:00:00+09:00</published><updated>2021-12-13T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/21.12.13.retrospect</id><content type="html" xml:base="http://localhost:4000/retrospect/21.12.13.retrospect/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/83164003/140646268-d8056c13-e7ee-4ea5-8e15-e282a26f6a0d.png" alt="스크린샷, 2021-11-07 22-08-33" /></p>

<h2 id="retrospect">Retrospect</h2>

<p>우선 프로젝트가 아직 완성된게 아니라 회고는 아니고 시작 전 다짐 및 마음가짐을 적어보려 간단히 남긴다.</p>

<h3 id="first-project-팀-선정">First Project 팀 선정</h3>
<hr />
<p>우선 Section3 HA 이전에 선배 기수들에게 프로젝트에 관련한 내용을 많이 들었다.</p>

<p><em>미리미리 준비해야 한다. 팀이 절반이다. 기획부터 시간이 오래 걸리므로 미리미리 준비하고 대비해라.</em></p>

<p>우선 틀린 말은 아닌거같다. 저번 주 금요일인 12.10 팀 설문조사가 이뤄지고, 미리 프로젝트 진행전 기획을 진행해 오던 팀원들을 적어서 내었고, 해당 팀원으로 구성된 팀이 오늘 부로 결정이 되었다.</p>

<p>그리고 SR 기획서를 오늘 포함하여 이틀안에 제출을 해야하는데, URClass에서 제공되는 SR 기획서에 기입해야할 양이 생각보다 많다.<br />
기획서 및 Wiki 작성을 진심으로 임해야 할 듯 하다.</p>

<p>만약 후배기수가 이 글을 읽는다면, 팀을 미리 꾸리고 <del>(물론 마음에 맞는 팀원 구하기가 어렵습니다..)</del> 기획의 방향정도는 충분한 회의를 통하여 결정 후 팀 선정에 진입하길 권유하고 싶다. 👍</p>

<h3 id="앞으로는">앞으로는?</h3>
<hr />
<p><img src="https://user-images.githubusercontent.com/83164003/145743411-a9f1a1ab-51e2-46d4-8906-4b53e5dd21d1.jpg" alt="project" /></p>

<p>이제 진짜 프로젝트 결과물을 팀 협업을 통해 만들어 내야 한다.<br />
익숙하지 않는 Git Flow로 협업을 이루고, 작업 분담을 해가며 프로젝트를 진행해내야 한다.</p>

<p>팀 룰을 정하였고 <del>(최소 6주??간 방콕)</del>, 웹 페이지를 완성하기 위한 최소한의 TODO 리스트를 작성해두고 1차 프로젝트의 기획의 갈무리는 어느정도 되었다 생각한다.</p>

<p>다만, 아직 익숙하지 않은 툴들과 프레임워크를 통해서 협업을 진행해야 한다는 사실은 막연한 두려움이 반, 그리고 좋은 결과물을 기대하는 기대감이 나머지 절반으로 두근거리고 있다.</p>

<p>당분간은 두개의 프로젝트에 전념하기 위해서 블로그는 당분간 글 작성이 없을거 같다.<br />
두개의 프로젝트가 모두 끝난 후 회고 글을 작성해야겠다.</p>]]></content><author><name>JH8459</name></author><category term="Retrospect" /><summary type="html"><![CDATA[[Retrospect] 코드스테이츠 First Project 시작]]></summary></entry><entry><title type="html">[TIL] 1. Node.js Multer (작성중)</title><link href="http://localhost:4000/til/21.12.09.til/" rel="alternate" type="text/html" title="[TIL] 1. Node.js Multer (작성중)" /><published>2021-12-09T00:00:00+09:00</published><updated>2021-12-09T00:00:00+09:00</updated><id>http://localhost:4000/til/21.12.09.til</id><content type="html" xml:base="http://localhost:4000/til/21.12.09.til/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>

<h3 id="1-nodejs-multer">1. Node.js Multer</h3>
<hr />
<ul>
  <li>Node.js Express 서버는 기본 기능에는 파일 업로드 기능이 포함되어 있지 않다.</li>
  <li>multer는 사용자 파일 업로드 기능을 제공하는 패키지로, 사용자가 전송한 파일을 처리하는 작업을 수행한다.
    <h4 id="1-1">1-1.</h4>
    <hr />
  </li>
</ul>

<p><br />
<br /></p>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>

<p><br />
<br /></p>]]></content><author><name>JH8459</name></author><category term="TIL" /><summary type="html"><![CDATA[[TIL] 1. Node.js Multer]]></summary></entry><entry><title type="html">[Retrospect] 코드스테이츠 Section3 후기</title><link href="http://localhost:4000/retrospect/21.12.08.retrospect/" rel="alternate" type="text/html" title="[Retrospect] 코드스테이츠 Section3 후기" /><published>2021-12-08T00:00:00+09:00</published><updated>2021-12-08T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/21.12.08.retrospect</id><content type="html" xml:base="http://localhost:4000/retrospect/21.12.08.retrospect/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/83164003/140646268-d8056c13-e7ee-4ea5-8e15-e282a26f6a0d.png" alt="스크린샷, 2021-11-07 22-08-33" /></p>

<h2 id="retrospect">Retrospect</h2>

<p>18시까지 Hiring Assessments 과제형을 마친 뒤 저녁식사 후 HA를 통과했다는 메일을 받았다.</p>

<p>그동안 Section을 통과할때마다 블로그 후기글을 설문으로 제출하는 링크를 보아도 별 감흥이 없었지만, Section3를 겪으며 백엔드 포지션으로 진로를 정하기도 하였고 모든 HA를 끝낸 해방감(?)에 한번 후기를 남겨보려 한다.</p>

<h3 id="section3-어려웠나요">Section3 어려웠나요?</h3>
<hr />
<p><img src="https://user-images.githubusercontent.com/83164003/145323347-861351cd-23b9-4d2c-860c-a9e7234a596e.png" alt="easyhard" /></p>

<p>우선 나는 33기로 코드스테이츠로 지원을 하였고 33기 Section3 HA에서 기수이동의 고배를 마셨다.</p>

<p>Section1 &amp; Section2가 HA가 쉬웠다..는 아니지만 Section3 HA에서는 <strong>엄격히</strong> 합격 여부를 선정하는거 같다.</p>

<p>그리고 팀단위로 2주, 4주 노력을 갈아넣는 프로젝트 진행 직전 최소한의 준비단계를 거친뒤 진행하라는 의미로 생각하면, 이러한 엄격한 선정방식은 당연하다 생각을 한다.</p>

<hr />
<p><strong>Section3</strong>는 백엔드&amp;컴퓨터공학과 애플리케이션을 웹으로 배포과정을 중심적으로 학습하는 섹션이다. 우선 단어만 들어봐도 썩 유쾌하지 않다. <del>(공학…)</del></p>

<p>확실히 눈으로 보이며 즉각적인 피드백이 오는 클라이언트 설계를 학습해오다 백엔드 서버 중심의 설계를 배우다 보니 몇가지 어려운점이 있었다.</p>

<p>우선 가장 큰 문제점은 <em>“눈으로 직접 보기가 어렵다”</em> 였다.</p>

<p><strong>[인증/보안] 기초</strong> 가 이 부분에서 정점을 찍는다. <del>(진짜 어렵습니다.. 😂)</del></p>

<ul>
  <li>HTTPS 통신 위해 발급한 인증서는 어디서 보이지?</li>
  <li>쿠키는 도대체 어디서 볼 수 있는거지?.. 로컬 저장소가 어디야…, 쿠키에 담긴 토큰은 어떻게 생겨먹었지?..</li>
  <li>아니 Headers엔 뭐가 담긴것이고 왜 토큰을 잘라서 가져오지…등등</li>
</ul>

<p>이는 Postman API 플랫폼이나 Chrome의 네트워크 탭등을 통해 확인하는 방법을 스프린트에서 학습하고 배우지만, 솔직히 앞서 말한 스프린트 내용만으로는 온전히 활용하기가 어려웠다.</p>

<p>이 부분은 꼭 추가적인 공부를 하셔서 어떠한 방식으로 클라이언트/서버가 요청과 결과를 주고받는지 눈으로 꼭 확인해보길 권유하고 싶다.  👍</p>

<hr />
<p>두번째로 <em>“배포”</em>…</p>

<center><img src="https://user-images.githubusercontent.com/83164003/145323400-e3203fa4-b592-4032-9919-1c9b3262306a.png" /></center>
<p><br /></p>

<p>위에서 언급한 과정을 겪은 뒤 실제 도메인영역에 웹서비스를 배포하는 과정을 실습한다. <del>(Advanced AWS HTTPS 배포 어렵습니다..😂)</del></p>

<p>AWS HTTPS 삽질한 배포 과정을 <a href="https://jh8459.github.io/til/21.11.26.til/" target="_blank">게시물</a>로 남기기도 하였다.</p>

<p>이 두가지는 그래도 꼭 학습하고 넘어가야 백엔드 포지션으로써 <strong>“첫 발은 내딘다”</strong> 라고 생각한다.</p>

<hr />
<p>마지막으로 <em>“Hiring Assessments”</em> HA 이다.</p>

<p>사실 불합격 고배를 한번 마신적이 있기 때문에, 애증의 대상이다.</p>

<p>코드스테이츠에서도 해당 시험을 직접적/간접적으로 언급하는걸 꺼려하기에 자세한 내용은 적지 않고 딱 한가지만 적고 넘어가려 한다.</p>

<blockquote>
  <p>“npm test” 테스트 코드들 누락없이 모두 통과하세요.</p>
</blockquote>

<hr />
<p>그래서 Section3 어렵냐? 결론은 무엇이냐?</p>

<p><strong>어렵습니다.</strong></p>

<p>하지만 이 어려운 과정을 헤쳐나가려 삽질하며 공부하는 과정이 반드시 있어야만 성장하고 드디어 서비스를 배포 할 수 있는 최소한의 자격을 얻는다고 생각한다.</p>

<h3 id="section3-이후-앞으로는">Section3 이후 앞으로는?</h3>
<hr />
<p>이제 실전이다.<br />
Section 을 거듭하며 마음에 맞는 스터디 팀원들이 생겼고 이 팀원들과 기획방향을 이제 맞춰보려 한다.</p>

<p>사실 지금껏 배워온 프레임워크라던지 기술 스택들은 지금 이 프로젝트 과정을 위해 모두 배운것 아닌가? 이제 모두 쏟아내어 결과물을 보고싶다. <del>(많은 밤샘이 있을까 걱정중이다..😇)</del></p>

<p>앞으로 6주가 가장 중요하다 생각된다.</p>

<p>실질적 이 프로젝트들은 수료 후 취업과정에서 나를 가장 잘 보여줄 수 있는 수단이 될 것이라 생각된다. 솔직한 감정으로는 열심히..도 좋지만, 그보다는 잘 해내고 싶다.</p>

<hr />
<p>여담으로 이 글을 본다면 나보다는 아래 기수이지 않을까? 생각이 든다.<br />
그리고 준비된 사람이라 생각이 든다.</p>

<p>Section3의 난이도와 HA에 대한 막연한 불안감..,  곧 나에게 다가올 미래이기도 할테니 여러 다양한 사람에게 정보를 구하자 할 노력을 하고 계시다 생각이 든다.</p>

<p>나 또한 지금 선배기수들의 프로젝트 결과물과 진행과정들을 열심히 찾아 보며 불안감을 달래는 중이다. 😅</p>

<p>원하는 진로로 취업하는 그날까지 파이팅이다. 👍</p>]]></content><author><name>JH8459</name></author><category term="Retrospect" /><summary type="html"><![CDATA[[Retrospect] 34기 Section3 후기]]></summary></entry><entry><title type="html">[TIL] 1. 무료 도메인 주소를 이용한 AWS HTTPS 인증</title><link href="http://localhost:4000/til/21.11.26.til/" rel="alternate" type="text/html" title="[TIL] 1. 무료 도메인 주소를 이용한 AWS HTTPS 인증" /><published>2021-11-26T00:00:00+09:00</published><updated>2021-11-26T00:00:00+09:00</updated><id>http://localhost:4000/til/21.11.26.til</id><content type="html" xml:base="http://localhost:4000/til/21.11.26.til/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/83164003/127775612-7464075f-89e7-478e-82ee-dc1c2710a125.jpeg" alt="TIL" /></p>
<h2 id="today-i-learnd">Today I Learnd</h2>

<p>기존에 EC2, S3, RDS를 통해 배포한 <a href="https://jh8459.github.io/til/21.10.29.til/" target="_blank">웹 애플리케이션</a>(21.10.29 TIL 참조)을 무료 도메인(Freenom)으로 배포하는 Advanced한 삽질 과정을 백엔드/프론트엔드 영역을 나누어 포스팅 해보려 한다.</p>

<hr />
<p><strong>주의!</strong> CloudFront에서 AWS 인증서 검증은 us-east-1(버지니아 북부) 인증서만 검증이 된다.<br /></p>

<p>s3와 CloudFront는 글로벌 지역으로 배포가 되고 ec2와 ELB는 지역 리전으로 나뉘어진다. <br />
클라이언트는 글로벌 리전에서 작동하므로 리전에 영향을 받진 않을 듯 하고, 서버가 탑재될 ELB 서울리전으로 두고(<em><a target="_blank">CloudPing.info</a>를 통한 속도 검증 결과 리전마다 속도차이가 명확히 있다.</em>) 개발환경을 구성하는게 서버의 응답속도 때문에 이점이 있을 듯 한데 인증서 문제 때문에 골머리가 아팠다…</p>

<p>이를 간단히 해결하기 위해서 배포된 <a href="https://cmarket.cf" target="_blank">https://cmarket.cf</a> 는 us-east-1 리전에서 웹서버가 작동하게 하여(<em>CloudFront(클라이언트)와 ELB(서버) 인증서가 모두 us-east-1 동일한 인증서 1개로 해결가능</em>)간단히 해결하였다.</p>

<h3 id="1-무료-도메인-https-aws-배포---백엔드">1. 무료 도메인 HTTPS AWS 배포 - 백엔드</h3>
<hr />
<h4 id="1-1-도메인-발급">1-1. 도메인 발급</h4>
<hr />
<ul>
  <li>도메인 주소를 이용하여 HTTPS 인증방식을 사용하려면 우선 도메인을 발급받아야 한다.</li>
  <li>
    <p>AWS에서도 Route 53을 통한 도메인 구매가 가능하지만.. 비용부담이 발생하기도 하고 실제 상업사이트나 프로젝트/포트폴리오 목적이 아닌 학업 목적이기 때문에 무료 도메인 사이트인 <a href="https://www.freenom.com/en/index.html?lang=en" target="_blank">Freenom</a>에서 도메인 발급 후, 해당 도메인을 이용하였다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143876151-e7fed5c2-1b13-4d57-b97f-47440d364cde.png" alt="스크린샷, 2021-11-29 22-26-24" /></p>

    <p>무료 도메인은 예고없이 사라지거나 로그인이 안되는(?)등 종잡을 수 없는 문제가 발생 할 수 있으므로..이런 부분은 감안하고 학습목적 정도로만 사용하도록 하는게 알맞은 사용방향이라 생각한다.</p>
  </li>
  <li>
    <p><a href="http://cmarket.cf/" target="_blank">cmarket.cf</a> 주소로 도메인을 발급 받았으며 최초 발급 후 도메인에 접속하면 DNS 설정도 안된 빈 도메인이기 때문에 아래와 같은 에러코드를 받을 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143876050-43d949bd-e541-4507-acee-b59782c602f5.png" alt="스크린샷, 2021-11-29 22-23-51" /></p>
  </li>
</ul>

<h4 id="1-2-elb-생성">1-2. ELB 생성</h4>
<hr />
<h5 id="elb란">ELB란?</h5>
<hr />
<ul>
  <li>
    <p>AWS에서 설명하는 ELB는 다음과 같다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144385209-49c0bca7-99bf-4d70-ad9a-d8bf0a76f3e8.png" alt="스크린샷, 2021-12-02 17-26-39" /></p>

    <p>단순한 로드 밸런서* 역할 외에도 인증서 관리등 HTTPS 인증방식 지원까지 겸하고 있는 만능 서비스이다.</p>

    <blockquote>
      <p><strong>로드 밸런서</strong>란?</p>

      <p>하나의 인터넷 서비스가 발생하는 트래픽이 많을 때 여러 대의 서버가 분산처리하여 서버의 로드율 증가, 부하량, 속도저하 등을 고려하여 적절히 분산처리하여 해결해주는 서비스.</p>
    </blockquote>
  </li>
</ul>

<hr />

<ul>
  <li>
    <p>ELB 서비스가 왜 필요한지 개념을 알았으니, AWS EC2 메뉴중 로드밸런서로 들어가 보자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143878331-14740d1a-92f8-4bdb-8c93-ce3d7e468979.png" alt="스크린샷, 2021-11-29 22-37-16" /></p>
  </li>
  <li>
    <p>로드밸런서를 생성하려보니 여러 유형을 선택 할 수 있는 선택창이 나온다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144386594-d626749f-2e92-4e78-ade4-6c52c1c7509d.png" alt="스크린샷, 2021-12-02 17-36-07" /></p>

    <p>우리는 HTTPS 인증 방식을 이용할 예정이니 1번을 선택하자.</p>
  </li>
  <li>
    <p>로드 밸런서 이름을 정한 뒤,</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144386771-94d61e1d-5c20-413f-bc13-cd119bdbdd75.png" alt="스크린샷, 2021-12-02 17-37-32" /></p>

    <p>네트워크 맵핑에서는 가용 영역을 모두 체크해주자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144386995-f2e95a20-928a-400d-b4c0-ea5629603a37.png" alt="스크린샷, 2021-12-02 17-38-35" /></p>

    <p>그리고 리스너* 를 추가해 주어야 한다.</p>

    <blockquote>
      <p><strong>리스너</strong>란?</p>

      <p>짧게 말해 리스너란, 구성한 프로토콜 및 포트를 사용해서 연결 요청을 확인하는 프로세스이다.</p>
    </blockquote>

    <p>리스너의 구성된 프로토콜/포트로 요청이 왔을때 대상그룹으로 연결(?)해주는 프로세스 같다. <del>(확실하지 않다…)</del></p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144387585-52909c76-7f0e-463f-8792-8d27ea0a532f.png" alt="스크린샷, 2021-12-02 17-42-54" /></p>

    <p>리스너가 추가되면 각 리스너에 타겟 그룹을 설정해줘야 한다.</p>
  </li>
  <li>
    <p>현재 배포하려는 웹 애플리케이션은 클라이언트와 서버가 토큰을 로컬스토리지에 담아 <strong>HTTP</strong>프로토콜로 데이터를 주고받고 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144389226-eddc00a7-e610-4849-9db7-4bd16edf329e.png" alt="스크린샷, 2021-12-02 17-51-26" /></p>

    <p>그렇기 때문에 클라이언트 ⮕ 로드밸런서로 HTTPS 요청이 와도 인스턴스(웹서버)에는 HTTP 프로토콜로 전달해 주어야 서버에서 클라이언트의 요청에 알맞는 응답 결과를 반환 할 수 있다.</p>
  </li>
  <li>
    <p>그러므로 HTTP/HTTPS 두 리스너는 모두 HTTP 80포트로 인스턴스 연결이 이뤄지게끔 타겟 대상을 설정 해주자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144390493-66a4eb97-b839-49f0-b3d9-7715ef867dfd.png" alt="스크린샷, 2021-12-02 18-00-00" /></p>

    <p>그리고 상태검사에서는 성공코드를 201번으로 변경하여 대상타겟을 생성해주자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144390985-cc3aec51-cf97-4647-bc2a-5f207e2c4c53.png" alt="스크린샷, 2021-12-02 18-02-42" /></p>
  </li>
  <li>
    <p>이제 로드밸런서가 외부 클라이언트로부터 HTTP/HTTPS 요청이 왔을 때 인스턴스로 이동하는 과정은 모두 완성하였다. 이제 인증서를 등록해 주어야 한다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144411410-47d3a10f-8b12-4c79-bd58-c97656cfec51.png" alt="스크린샷, 2021-12-02 18-06-03" /></p>

    <p>HTTPS 프로토콜을 이용하려면 신뢰할 수 있는 기관에서 발급받은 인증서로 통해 통신이 이뤄진다. AWS에서는 ACM(<em>AWS에서 제공하는 인증서</em>)를 권장하고 있으며, 기존 사용하던 인증서가 있다면 해당 인증서를 import 해주어서 로드밸런서에 인증서를 등록해줄수도 있다.</p>

    <p>AWS에서도 무료로 인증서 발급을 해주기도하고, 권장하는 방법이기 때문에 새로 발급해서 사용하기로 하였다.</p>
  </li>
</ul>

<h4 id="1-3-acm을-통한-인증서-발급">1-3. ACM을 통한 인증서 발급</h4>
<hr />
<ul>
  <li>
    <p>AWS에서 발급 가능한 인증서를 만들기 위해 우선 <strong>새 인증서 요청</strong> 버튼으로 진입 후 요청을 눌러준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144416238-157f4c2d-0eaa-4374-b5c6-b2f9356992ff.png" alt="스크린샷, 2021-12-02 20-46-27" /></p>

    <p>퍼블릭 인증서 요청을 선택한 뒤 다음 버튼을 누르면, 도메인 이름과 검증 방식을 설정해 준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144416552-6a6e340d-d5a2-4276-b512-c9f6a11330e0.png" alt="스크린샷, 2021-12-02 20-48-33" /></p>

    <p>도메인 이름에 다른이름을 추가한 이유는 서버/클라이언트 각각 다른 도메인으로 배포하기 위함이다. (서버는 server.cmarket.cf 로 배포하였다.)<br />
Freenom에서 발급 받은 도메인 앞에 와일드카드(<code class="language-plaintext highlighter-rouge">*</code>)를 입력하여 도메인이름을 설정하였다.</p>

    <p>그리고 검증방식은 DNS 방식을 선택해주자. <del>(이게 간편하다고 하더라..)</del></p>
  </li>
  <li>
    <p>조금 기다린 뒤 인증서 ID를 눌러보면 CNAME 값이 생성된 것을 볼 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143906637-868b596f-7209-491e-becf-7347fe2e9ffd.png" alt="스크린샷, 2021-11-30 01-31-46" /></p>

    <p>그 뒤 Manage Freenom DNS 로 이동해 준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144420586-a718cd8f-3a36-4078-b4ca-49bcf92bc503.png" alt="스크린샷, 2021-12-02 20-56-02" /></p>

    <blockquote>
      <p>AWS Route 53에서 발급받은 도메인이라면 레코드 추가하기로 간편하게 Route 53에서 DNS 검증이 가능하지만, 무료 도메인을 발급 받은 상황이기때문에 Freenom DNS로 가서 설정을 변경해줘야 한다.</p>
    </blockquote>

    <p>TYPE을 CNAME 으로 변경해 준 뒤, AWS에서 확인한 CNAME 이름과 값을 넣어주고 저장해준다. 그 후 ACM으로 와서 검증이 끝날 때 까지(<em>5~10분정도 소요되었다.</em>) 기다려주면 아래와 같은 인증서 발급 완료 안내를 확인 할 수 있다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143908476-0a484866-aafa-4382-8d04-2099ea5ef71f.png" alt="스크린샷, 2021-11-30 01-45-32" /></p>
  </li>
  <li>
    <p>생성 중이던 로드밸런서에 발급받은 인증서를 넣고 생성을 완료한다.</p>
  </li>
</ul>

<h4 id="1-4-freenom--route-53-연결">1-4. Freenom ⬌ Route 53 연결</h4>
<hr />
<h5 id="route-53란">Route 53란?</h5>
<hr />
<ul>
  <li>
    <p>우선 Route 53은 AWS에서 제공하는 DNS(Domain Name Service)이다.</p>

    <p>그 외에도 도메인과 관련된 여러가지 서비스를 제공한다. 간략히 DNS 개념만 언급하자면 IP로 도메인을 기억하기는 힘들기때문에 사람이 기억하기 이름 형태로 변환해주는 시스템이다.</p>
  </li>
</ul>

<hr />
<ul>
  <li>
    <p>이제 Freenom DNS 검증은 완료되었다, AWS에서 해당 도메인을 사용하기 위해서 Freenom Nameservers 설정을 변경해 주자.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143911244-7cb509e0-6b6a-4406-a120-eed04b5f6317.png" alt="스크린샷, 2021-11-30 02-02-27" /></p>

    <p>위 사진 영역에 Route 53에서 호스팅 영역을 생성 후 NS 에 해당하는 라우팅 대상을 맵핑해서 넣어주면 된다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/143912771-bbaacb32-af5e-439c-9bfe-b2bcc58eabc6.png" alt="스크린샷, 2021-11-30 02-13-28" /></p>
  </li>
  <li>
    <p>이제 Freenom에서 발급 받은 무료 도메인(cmarket.cf)은 AWS Certificate Manager을 받기 위한 DNS 검증도 끝났으며, Route 53 호스팅 영역에도 연결이 되었다.</p>
  </li>
</ul>

<h4 id="1-5-route-53--elb-연결">1-5. Route 53 ⬌ ELB 연결</h4>
<hr />
<ul>
  <li>
    <p>Route 53도 도메인과 연결되어 있으며 ELB도 인스턴스에 연결되어 있는 상태이다. 이 둘을 연결만 해주면 도메인에서도 인스턴스 접근이 가능하다.<br />
Route 53 메뉴로 가서 레코드 한줄만 써주도록 하자.</p>

    <p>서버를 도메인에 등록할텐데, 인증서 발급시 와일드카드(<code class="language-plaintext highlighter-rouge">*</code>)로 주었기 때문에 서버의 도메인은 원하는 이름을 주어도 가능하다. 아래 사진과 같이 레코드를 생성해주었다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144421521-15fd77de-474f-41dc-a80e-caeb95d46b3b.png" alt="스크린샷, 2021-12-02 21-24-45" /></p>
  </li>
</ul>

<h4 id="1-6-연결-확인">1-6. 연결 확인</h4>
<hr />
<ul>
  <li>
    <p>이제 server.cmarket.cf 도메인을 브라우저 검색창에 검색한다면, AWS의 Route 53의 DNS서비스를 통하여 ELB에 접근하게된다.</p>

    <p>ELB에서는 트래픽을 자동으로 분산 시켜서 HTTPS/HTTP 을 요청을 리스너를 통하여 HTTP/80번 포트로 EC2 인스턴스 접근을 허용시킨다.</p>
  </li>
  <li>
    <p>EC2에 서버가 켜져있다면 endpoint <code class="language-plaintext highlighter-rouge">/</code> 로 접근이 될것이므로,</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div>    </div>

    <p>따라서 <a href="https://server.cmarket.cf/" target="_blank">https://server.cmarket.cf</a> 도메인 검색시 아래와 같은 결과가 확인된다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144422316-8d6ed790-125f-4959-9243-dfc05ca6d63a.png" alt="스크린샷, 2021-12-02 21-30-26" /></p>

    <p>해당 도메인에 AWS에서 발급받은 인증서가 유효하게 작동하는 HTTPS 서버 도메인이 완성되었다.</p>
  </li>
</ul>

<h3 id="2-무료-도메인-https-aws-배포---프론트엔드">2. 무료 도메인 HTTPS AWS 배포 - 프론트엔드</h3>
<hr />

<h4 id="2-1-s3-버킷-엔드포인트-수정">2-1. S3 버킷 엔드포인트 수정</h4>
<hr />
<ul>
  <li>
    <p>기존 버킷에 등록된 빌드 파일은 HTTP로 서버와 클라이언트간 통신이 이뤄지고 있었다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144423691-019196bd-2cbc-44cc-980a-ffbb4bcaf39b.png" alt="스크린샷, 2021-12-02 17-51-26" /></p>

    <p>ACM을 이용한 HTTPS 인증방식이 이뤄질 수 있도록 클라이언트의 <code class="language-plaintext highlighter-rouge">.env</code> 파일을 수정하여 엔드포인트를 https://server.cmarket.cf 로 변경해 준 뒤 다시 빌드하여 버킷에 다시 업로드 해주었다.</p>
    <h4 id="2-2-cloudfront-배포-생성-s3--cloudfront-연결">2-2. CloudFront 배포 생성 (S3 ⬌ CloudFront 연결)</h4>
    <hr />
  </li>
  <li>버킷으로는 인증서를 이용한 HTTPS 인증방식이 불가능하기 때문에, S3를 CloudFront에 연결해 주어야 한다.</li>
  <li>
    <p>우선 CloudFront 생성하기로 진입 후 원본 도메인에서 기존 S3 버킷을 선택해 준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144424581-a9dadcea-be3f-44b8-ae39-066b504c9c07.png" alt="스크린샷, 2021-12-02 21-44-21" /></p>
  </li>
  <li>
    <p>기본 캐시동작에서 뷰어 프로토콜 정책은 Redirect HTTP to HTTPS 로 선택해 준다</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144424748-0520949f-381d-4a7f-85fb-de731eb71af1.png" alt="스크린샷, 2021-12-02 21-44-42" /></p>
  </li>
  <li>
    <p>그 다음 설정에서 CNAME은 도메인으로 쓸 cmarket.cf를 입력 해 준뒤, 미리 생성해 둔 인증서(us-east-1)를 등록해준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144425006-75cb095b-c14f-4952-9612-c23a98770d90.png" alt="스크린샷, 2021-12-02 21-47-37" /></p>

    <p><strong>인증서는 반드시 미국 동부(버지니아 북부) 리전(us-east-1)에 있어야 합니다.</strong><br />
<em>이 문구 때문에 사실 서울 리전을 한번 갈아 엎고 미국 동부 리전에서 다시 시작하였다…</em>  <del>장난..??</del></p>

    <p>그리고 계속하여 설정에서 기본값 루트 객체를 index.html으로 수정해준 뒤 배포 생성을 완료해준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144425488-f118043d-d44a-4f3b-9009-e2209377cf22.png" alt="스크린샷, 2021-12-02 21-51-06" /></p>
  </li>
  <li>
    <p>그 뒤 배포 상태가 <strong>활성화 됨</strong>으로 확인되면, 배포 아이디 클릭 후 오류 페이지로 접근 하여 사용자 정의 오류 응답을 작성해 준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144425878-f7959699-d29e-4781-b084-deb136799673.png" alt="스크린샷, 2021-12-02 21-53-28" /></p>

    <p>에러코드 403번과 404번 모두 오류 응답 200번 코드로 응답 페이지는 /index.html 으로 설정 해준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144426098-da4a7eb7-7f6b-427a-9eeb-bf419f61a804.png" alt="스크린샷, 2021-12-02 21-55-05" /></p>

    <p>이제 클라이언트도 유효한 인증서를 기반으로 HTTPS 인증방식으로 서버와 통신할 수 있게 배포가 되었다.</p>
  </li>
</ul>

<h4 id="2-3-route-53--cloudfront-연결">2-3. Route 53 ⬌ CloudFront 연결</h4>
<hr />
<ul>
  <li>
    <p>사실 Cloudfront 배포가 성공하였다면, AWS에서 제공하는 유효한 도메인이 발급이 된다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144426871-9e5f9d34-31d3-4d11-a8d1-983a157e2a38.png" alt="스크린샷, 2021-12-02 22-00-11" /></p>

    <p>다만..<del>(이쁘지 않다..)</del> 애써 발급받은 도메인을 놀리기엔 아깝지 않은가? ELB를 도메인과 연결시켰듯이 클라이언트가 담긴 Cloudfront 또한 Route 53에서 별칭 레코드를 생성해주자.</p>
  </li>
  <li>
    <p>Route 53의 호스팅 영역으로 간뒤, 레코드 생성을 아래와 같이 해준다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144427560-b399fcf4-9bd4-43bd-b70c-c526445fc57b.png" alt="스크린샷, 2021-12-02 22-03-59" /></p>

    <p>cmarket.cf 도메인 주소를 클라이언트가 보여지는 영역으로 쓸 것이므로 이름값은 따로 주지 않았다.</p>
  </li>
</ul>

<h4 id="2-4-연결-확인">2-4. 연결 확인</h4>
<hr />
<ul>
  <li>
    <p>이제 클라이언트/서버가 모두 HTTPS 인증방식으로 내가 원하는 도메인으로 발급이 모두 완료되었다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144428894-aff7f1f8-2401-42aa-8298-8f79ad67dc4f.gif" alt="cmarket cf" /></p>

    <p>리스너를 HTTP/HTTPS 방식 모두 지원하기 때문에 도메인에 배포한 HTTPS 방식의 통신도 지원하며, S3 버킷에서 HTTP 환경으로 클라이언트를 구동시켜도 모두 서버와 원활히 통신이 가능하다.</p>
  </li>
</ul>

<p><br />
<br /></p>
<h2 id="오늘-느낀-점">오늘 느낀 점</h2>
<ul>
  <li>AWS…너무 어렵다.<br />
단순히 인스턴스 올리고 버킷에 객체 업로드 하고 RDS로 DB 생성 후 연동하는건 정말 걸음마 단계였던거 같다.</li>
  <li>원래 해당 스프린트는 Advanced 과정으로 코드스테이츠에는 Route 53에서 도메인을 구매 후 진행하라 일러준다. <br />
 학습과정에서 적게는 9$ 이상씩 지불하기가 아깝기도 하고.. AWS에서 지원하지 않는 외부 도메인을 사용해서 Route 53에서 등록하는 과정까지 학습과정에서는 모두 좋은 경험이라 생각든다.</li>
  <li>
    <p>마음에 안드는 부분은 CloudFront 배포가 무조건 us-east-1 리전에서만 가능하기때문에 EC2 인스턴스도 억지로 서울 리전을 버리고 us-east-1 리전으로 강제 이주하였다..</p>

    <p>서두에 말했듯이, 미국지역 리전의 응답속도와 서울 리전의 응답속도는 하늘과 땅차이 였다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/144410348-669abeb7-67a6-413f-95bf-4e4373125150.png" alt="스크린샷, 2021-12-02 19-54-25" /></p>

    <p>위와 같이 엄청난 속도차이가 있다.<del>(역시 인터넷 속도는 한국)</del> 서울 리전에 서버를 두고 다시 배포해보는 과정을 생각해봐야 겠다. (이렇게 되면 클라이언트/서버 각각 인증서가 리전이 다른데 유효할지 의문이 든다..)</p>

    <p>찜찜하지만.. 우선 초기에 목표로 둔 내가 원하는 도메인에 HTTPS 인증방식으로 배포하는게 성공해서 잠은 푹 잘 수 있을듯 하다.</p>
  </li>
</ul>

<p><br />
<br /></p>]]></content><author><name>JH8459</name></author><category term="TIL" /><summary type="html"><![CDATA[[TIL] 1. 무료 도메인 주소를 이용한 AWS HTTPS 인증]]></summary></entry><entry><title type="html">[Blog] Minimal mistakes Utterances</title><link href="http://localhost:4000/blog/21.11.17.Blog/" rel="alternate" type="text/html" title="[Blog] Minimal mistakes Utterances" /><published>2021-11-17T00:00:00+09:00</published><updated>2021-11-17T00:00:00+09:00</updated><id>http://localhost:4000/blog/21.11.17.Blog</id><content type="html" xml:base="http://localhost:4000/blog/21.11.17.Blog/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/83164003/140798334-e59d59e0-7a88-4007-bd04-28f832401caf.jpeg" alt="tool" /></p>

<h2 id="minimal-mistakes-utterances">Minimal mistakes Utterances</h2>

<h3 id="utterances-vs-disqus">Utterances VS Disqus</h3>
<hr />

<ul>
  <li>
    <p>현재 블로그 (21.11.17 기준)는 <code class="language-plaintext highlighter-rouge">Minimal mistakes</code> jekyll theme 에 댓글 창은 <strong>Disqus</strong>를 사용하고 있었다.</p>

    <p><img src="https://user-images.githubusercontent.com/83164003/142207738-058ca84c-b025-4150-991c-f08006bdd877.png" alt="스크린샷, 2021-11-17 22-09-56" /></p>

    <p>다만 조금..난잡하다? 라는 생각이 들던 중 <del>어짜피 댓글도 안달리는데…</del> GitHub Issue 기반으로 Comment를 작성하는 <strong>Utterances</strong>를 알게 되어서 변경해 보았다.</p>
  </li>
  <li>
    <p>블로그 성격이 개발 블로그이기 때문에, 기존에 쓰던 <strong>Disqus</strong> 보다는 Github 계정으로 댓글을 작성할 수 있기 때문에 사용성이 조금 더 용이하다 생각이 들었다.</p>
  </li>
</ul>

<hr />
<h3 id="utterances-적용하기">Utterances 적용하기</h3>

<hr />

<h4 id="github-setting">Github setting</h4>
<hr />

<p>간단하게 사용이 가능하다.</p>

<p>우선 <a href="https://github.com/apps/utterances" target="_blank">utterances</a> Github App 을 install 해준다.<br /></p>

<h4 id="utterances-setting">utterances setting</h4>
<hr />

<p>Github App을 설치하였다면 <a href="https://utteranc.es/" target="_blank">https://utteranc.es/</a> 사이트에 들어간다.</p>

<p><img src="https://user-images.githubusercontent.com/83164003/142213538-26d1d0f8-6414-4630-bfcc-77caa7dfd387.png" alt="스크린샷, 2021-11-17 22-53-18" /></p>

<p>utterances 설정에 앞서 <code class="language-plaintext highlighter-rouge">owner/repo</code>를 입력하라 나온다.</p>

<center><img src="https://user-images.githubusercontent.com/83164003/142213648-2180e200-28a8-42c1-8a26-e9789de63fa7.png" /></center>
<p><br /></p>

<p>이러한 형식으로 알맞게 입력해준다.</p>

<p>그 뒤, <code class="language-plaintext highlighter-rouge">Blog Post ↔️ Issue Mapping</code> 옵션 선택창이 나온다.</p>

<p><img src="https://user-images.githubusercontent.com/83164003/142213903-32670289-ebc4-4ee3-b412-2c3e4a1523d7.png" alt="스크린샷, 2021-11-17 22-51-57" /></p>

<p>다른 옵션은 모르겠고… default 값인 <strong>Issue title contains page pathname</strong>는 포스트 게시물의 .md 파일의 이름으로 연결된다. <del>게시물의 .md 파일명을 수정하게 되면 댓글또한 날아간다…</del></p>

<p><code class="language-plaintext highlighter-rouge">owner/repo</code>와 <code class="language-plaintext highlighter-rouge">Blog Post ↔️ Issue Mapping</code>을 모두 선택하면 다음과 같은 script가 나온다.</p>

<p><img src="https://user-images.githubusercontent.com/83164003/142214912-6c8b31e1-d563-4ab4-a5a2-d84bae0769cc.png" alt="스크린샷, 2021-11-17 23-01-14" /></p>

<p>해당 script 중 <code class="language-plaintext highlighter-rouge">issue-term</code>, <code class="language-plaintext highlighter-rouge">theme</code>을 기억해서 config.yml에 넣어주면 완료된다.</p>

<h4 id="configyml-setting">config.yml setting</h4>
<hr />

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">repository</span>               <span class="p">:</span> <span class="dl">"</span><span class="s2">JH8459/JH8459.github.io</span><span class="dl">"</span> <span class="err">#</span> <span class="nx">GitHub</span> <span class="nx">username</span><span class="o">/</span><span class="nx">repo</span><span class="o">-</span><span class="nx">name</span>  

<span class="err">#</span> <span class="nx">댓글</span> <span class="nx">관련</span> <span class="nx">부분</span>
<span class="nx">comments</span><span class="p">:</span>
  <span class="nx">provider</span>               <span class="p">:</span> <span class="dl">"</span><span class="s2">utterances</span><span class="dl">"</span> <span class="err">#</span> <span class="kc">false</span> <span class="p">(</span><span class="k">default</span><span class="p">),</span> <span class="dl">"</span><span class="s2">disqus</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">discourse</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">facebook</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">staticman</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">staticman_v2</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utterances</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">custom</span><span class="dl">"</span>
  <span class="nx">utterances</span><span class="p">:</span>
    <span class="nx">theme</span>                <span class="p">:</span> <span class="dl">"</span><span class="s2">github-light</span><span class="dl">"</span> <span class="err">#</span> <span class="dl">"</span><span class="s2">github-light</span><span class="dl">"</span> <span class="p">(</span><span class="k">default</span><span class="p">),</span> <span class="dl">"</span><span class="s2">github-dark</span><span class="dl">"</span>
    <span class="nx">issue_term</span>           <span class="p">:</span> <span class="dl">"</span><span class="s2">pathname</span><span class="dl">"</span> <span class="err">#</span> <span class="dl">"</span><span class="s2">pathname</span><span class="dl">"</span> <span class="p">(</span><span class="k">default</span><span class="p">)</span>
</code></pre></div></div>
<h4 id="완료">완료</h4>
<hr />

<p>모두 설정이 완료된 후 commit 후 push 해 주면 다음과 같은 결과를 볼 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/83164003/142215734-540361c4-e8db-4527-9e77-bec48902dac1.png" alt="스크린샷, 2021-11-17 23-07-41" /></p>]]></content><author><name>JH8459</name></author><category term="Blog" /><summary type="html"><![CDATA[[Blog] Minimal mistakes Utterances]]></summary></entry></feed>